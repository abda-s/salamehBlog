
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2025-03-15","image":"","imageAlt":"","link":"/posts/charging-the-byd-seagull-how-8a-and-32a-chargers-impact-its-lfp-battery/","summary":"How different charging rates affect the BYD Seagull’s lithium iron phosphate (LFP) battery. Learn about battery longevity, charging efficiency, and the best practices for maintaining performance.","tags":["Cars","Electronics"],"text":"the byd seagull is a compact electric vehicle equipped with lithium iron phosphate (lfp) batteries, known for their durability and thermal stability. understanding how different charging rates affect these batteries is crucial for optimizing both vehicle performance and battery longevity.\nbyd seagull\u0026rsquo;s charging capabilities the seagull offers two battery options: a 30.08 kwh lfp battery and a 38.88 kwh lfp byd blade battery. its charging infrastructure supports:\nac charging: up to 6.6 kw dc fast charging: 30 kw or 40 kw these specifications indicate that the seagull is designed to handle various charging scenarios, from standard home charging to faster public charging stations.\nunderstanding c-rates and their impact the c-rate measures the rate at which a battery is charged or discharged relative to its capacity. a 1c rate means charging the entire battery in one hour. for the seagull\u0026rsquo;s 30.08 kwh battery:\n1c rate: 30.08 kw 0.5c rate: 15.04 kw charging with an 8a charger an 8-ampere (a) charger operating at 230 volts (v) delivers approximately 1.84 kw (8a × 230v). this translates to a c-rate of about 0.061 for the 30.08 kwh battery (1.84 kw ÷ 30.08 kwh). such a low c-rate is considered gentle on the battery, minimizing stress and potentially extending its lifespan.\ncharging with a 32a charger a 32a charger at 230v provides around 7.36 kw (32a × 230v). for the 30.08 kwh battery, this results in a c-rate of approximately 0.245 (7.36 kw ÷ 30.08 kwh). this rate is still within the battery\u0026rsquo;s designed ac charging capacity of 6.6 kw, meaning the vehicle’s onboard charger will regulate the charging power accordingly.\nresearch insights on lfp batteries and charging rates studies have shown that lfp batteries exhibit resilience to higher charging rates. for instance, research indicates that charging at rates up to 4c does not significantly impact the battery\u0026rsquo;s lifespan. specifically, capacity degradation was 15% at a 1c rate and 17% at a 4c rate after 4,000 cycles, with similar degradation observed up to 1,000 cycles.\nconclusion the byd seagull\u0026rsquo;s onboard charger supports a maximum ac charging power of 6.6 kw. this means that when using a 32a charger at 230v (which can provide up to approximately 7.36 kw), the vehicle\u0026rsquo;s charging system will limit the power to 6.6 kw to stay within its designed capacity. charging at this rate aligns with the vehicle\u0026rsquo;s specifications and should not adversely affect the longevity of its lithium iron phosphate (lfp) battery. therefore, utilizing a 32a charger is considered safe and appropriate for maintaining the battery\u0026rsquo;s health.\nreferences https://en.wikipedia.org/wiki/byd_seagull https://findingspress.org/api/v1/articles/21459-impact-of-charging-rates-on-electric-vehicle-battery-life.pdf https://moscow.sci-hub.ru/5155/011d5b81780c4ac3e787a937c78bd05a/10.1016@j.jpowsour.2016.04.140.pdf https://acmobility.ph/news/byd-seagull-launch ","title":"Charging the BYD Seagull: How 8A and 32A Chargers Impact Its LFP Battery"},{"date":"2025-02-26","image":"","imageAlt":"","link":"/posts/fixing-my-ethernet-cable-issue/","summary":"Diagnosing and fixing an Ethernet cable issue by testing connections, replacing RJ-45 plugs, and ensuring proper wiring","tags":["Electronics"],"text":"the setup my father brought an electrician home to wire an ethernet cable from the router to my room. he ran the cable inside the wall, and everything seemed fine at first. however, when he crimped the rj-45 connectors, he messed up, and the cable wasn’t working on my laptop. that meant i had to fix it myself.\nto do this, i needed:\nan ethernet cable tester an ethernet crimper rj-45 plugs here’s a photo of each item:\nunderstanding the ethernet cable tester before jumping in, i had to figure out how the ethernet cable tester actually works. i watched a few youtube videos and learned that it’s just a connectivity tester. an ethernet cable has eight wires, and the tester checks each one sequentially. if the wire is properly connected, its corresponding led blinks. if an led doesn’t blink, that wire isn’t connected properly, meaning the cable is faulty.\nto get comfortable with the tester, i tried it on an already working cable.\nthe led numbers correspond to the pin numbers in the rj-45 plug. here’s an image showing the correct pin numbering:\ndiagnosing the issue now that i understood how the tester works, i tested the cable the electrician installed. i connected the first part of the tester in the living room and the second part in my bedroom.\nhere’s a video showing that all leds turned on except for number 7. that’s why the cable wasn’t working.\nfixing the ethernet cable to fix the issue, i had to replace the rj-45 connectors on both ends of the cable. initially, i only replaced the end in the living room and tested it again. if that fixed the issue, i wouldn’t need to replace the bedroom end. but in the end, i had to change both.\nhere’s the youtube video that helped me with the process: watch it here.\nreplacing the rj-45 plug step 1: cutting the old rj-45 plug step 2: removing the outer plastic sheath step 3: untwisting the wires and cutting excess plastic step 4: arranging the wires in the correct order the correct color order follows the t568a standard:\nhere’s how it looked after arranging them:\nstep 5: cutting and crimping the wires after cutting the wires to the correct length, i used the crimper to attach the new rj-45 plug.\nhere’s the final result:\ni repeated the same process in my bedroom:\ntesting the fixed cable i tested the cable again using the tester.\nnow, it was time for the moment of truth. i tested the cable one more time using the ethernet tester, and…\nsuccess! the tester confirmed that all the leds were lighting up correctly.\nto be completely sure, i connected one end to the router and the other to my laptop. it worked!\nconclusion this was a fun hands-on experience, and i learned a lot about networking cables, testers, and crimping rj-45 connectors. hopefully, this helps anyone dealing with similar issues!\n","title":"Fixing My Ethernet Cable Issue"},{"date":"2025-02-14","image":"","imageAlt":"","link":"/posts/spotx--no-ads-on-spotify-for-windows/","summary":"Add free Spotify on windows for free","tags":[],"text":"🔗 all the files you need (spotify client + spotx) are here: 📂 google drive link\nif the spotx github repo is ever down, you can still install everything from this link!\n🚀 how to install get the spotify client\ndownload it from this google sheets link. or grab it from the google drive. close spotify (if it\u0026rsquo;s running).\ndownload spotx\nfrom the google drive link. or get it from the official repo: github repo. run the installer\nright-click install_auto.bat → run as administrator. it’ll patch spotify automatically. just let it do its thing. open spotify and enjoy no ads! 🎶\n🔥 extra info works only with the desktop version of spotify (not the microsoft store version). blocks ads, disables tracking, and enables extra features. that’s it! enjoy ad-free spotify. 🚀\n","title":"SpotX – No Ads on Spotify for Windows"},{"date":"2025-02-14","image":"","imageAlt":"","link":"/posts/understanding-uart-and-serial-communication/","summary":" The basics of UART, serial communication, baud rates, and the differences between TTL and RS-232.","tags":["Electronics"],"text":"data transmission data transmission can be categorized into two main types: serial and parallel. serial communication, in particular, has several subtypes, including asynchronous, synchronous, and isochronous. in this post, we’ll focus on uart (universal asynchronous receiver-transmitter), which is an asynchronous method of communication. unlike synchronous communication, uart does not require devices to share the same clock cycles or be synchronized.\nserial vs. parallel transmission serial transmission: data is sent one bit at a time over a single communication channel. this method is simpler and more cost-effective but can be slower compared to parallel transmission.\nparallel transmission: data is sent in groups of 8 bits (a byte) simultaneously over multiple channels. while faster, it is more complex and expensive due to the need for multiple communication lines.\nboth methods enable devices to communicate, but they differ in their approach. serial transmission is often preferred for its simplicity and lower cost, while parallel transmission is used when speed is critical.\nkey terms: msb (most significant bit): the bit with the highest value in a byte (e.g., 2^7). lsb (least significant bit): the bit with the lowest value in a byte (e.g., 2^0). serial transmission in serial transmission, bits are sent one after another over a single communication channel. this reduces the cost of transmission compared to parallel methods, which require multiple channels. serial transmission can be implemented in three ways: asynchronous, synchronous, and isochronous.\nasynchronous transmission (uart) asynchronous transmission does not rely on a shared clock signal between devices. instead, it uses agreed-upon patterns to communicate data. each byte of data is framed with a start bit and one or more stop bits, allowing the receiver to identify the beginning and end of each byte.\nstart bit: a single bit (usually 0) that signals the start of a byte. stop bit(s): one or more bits (usually 1s) that signal the end of a byte. between bytes, there may be a gap or idle time, which helps the receiver prepare for the next byte. the receiver synchronizes with the incoming data stream at the start of each byte, ensuring accurate data interpretation.\nnote: asynchronous transmission is \u0026ldquo;asynchronous at the byte level,\u0026rdquo; but the bits within each byte are still synchronized.\nuart: universal asynchronous receiver-transmitter uart is a hardware device that facilitates asynchronous serial communication. it uses two wires:\ntx (transmit): sends data from the transmitting device. rx (receive): receives data at the receiving device. the communication speed, known as the baud rate, must be agreed upon by both devices.\nbaud rate: how it works the baud rate is a critical parameter in serial communication, especially in uart. it defines the speed at which data is transmitted and received, measured in bits per second (bps). here’s how it works:\ndefinition: the baud rate represents the number of signal changes (symbols) per second. in uart, each symbol typically corresponds to one bit, so the baud rate is often equal to the bit rate.\nsynchronization: both the transmitter and receiver must be configured to use the same baud rate. if they are not synchronized, data will be misinterpreted, leading to communication errors.\ncommon baud rates: some standard baud rates include 9600, 19200, 38400, 57600, and 115200 bps. lower baud rates are used for longer distances or noisy environments, while higher baud rates are used for faster communication over shorter distances.\ncalculation: the baud rate determines the duration of each bit. for example, at 9600 bps, each bit lasts approximately 104 microseconds (1 second / 9600 bits).\nerror tolerance: the receiver samples the incoming data at the midpoint of each bit. if the baud rates of the transmitter and receiver are slightly mismatched, the sampling point may drift, causing errors. therefore, precise baud rate configuration is essential.\nttl vs. rs-232 ttl (transistor-transistor logic): operates at 5v. commonly used in short-range communication. not a protocol but refers to the voltage level used by uart. example: usb-to-ttl converters. rs-232: uses higher voltage levels (+/- 12v) for long-range communication. voltage levels: -3v to -15v represents a \u0026ldquo;1\u0026rdquo; bit. +3v to +15v represents a \u0026ldquo;0\u0026rdquo; bit. active low logic. references: youtube: uart communication explained youtube: serial vs. parallel communication youtube: ttl and rs-232 explained youtube: asynchronous transmission youtube: uart protocol deep dive data communications and networking by behrouz a. forouzan wikipedia: universal asynchronous receiver-transmitter ","title":"Understanding UART and Serial Communication"},{"date":"2025-01-20","image":"","imageAlt":"","link":"/posts/understanding-capacitor-charging-and-the-concept-of-full-charge/","summary":"Explore the science behind capacitor charging, the significance of 5τ, and why capacitors never truly reach full charge despite practical approximations.","tags":["Electronics"],"text":"while taking a course with walid issa, we explored the fascinating behavior of capacitors. during one of the experiments, an interesting observation about capacitor charging sparked my curiosity. my friend ahmad awad and i decided to dive deeper into the topic, conducting research that ultimately led to this blog.\nwhen analyzing capacitors, we often hear that a capacitor is \u0026ldquo;fully charged\u0026rdquo; when the elapsed time equals 5 times the time constant (“5τ”). however, upon closer look, this statement needs some clarification. let\u0026rsquo;s dive into the theory, practical observations, and what \u0026ldquo;fully charged\u0026rdquo; really means.\nobservations from the simulation in a recent calculation, the capacitor was expected to be fully charged in 0.25 seconds. however, the voltage across the capacitor at this point was 11.923 v instead of the expected 12 v. the error was calculated as:\n$$ \\frac{12 - 11.923}{12} \\times 100 = 0.6% $$\nthis raised the question: why is there an error when the capacitor is supposed to be fully charged at 5τ?\nthe truth about 5τ the value of 5τ does not mean the capacitor is 100% charged. instead, it means the capacitor has reached about 99.3% of its maximum voltage. using the data from the simulation, we can confirm this:\n$$ \\frac{11.923}{12} \\times 100 = 99.33% $$\nthis matches the theoretical prediction. while the capacitor seems nearly charged at 5τ, it never fully reaches 100% because of the exponential nature of its charging curve.\ntheoretical explanation the voltage across a charging capacitor is given by the equation:\n$$ v(t) = v_{\\text{max}} \\left( 1 - e^{-\\frac{t}{rc}} \\right) $$\nwhere:\nvmax is the maximum voltage the capacitor can charge to (12 v in this case). t is the time elapsed. rc is the time constant of the circuit. as time passes, $$e^{-t/rc}$$ gets closer to zero.\nthis means it would take infinite time for the capacitor to reach exactly vmax. in practice, we consider the capacitor \u0026ldquo;fully charged\u0026rdquo; when it’s close enough to vmax, such as 99.3% at 5τ.\nthe simulation discrepancy interestingly, the simulation showed the capacitor reaching exactly 12 v, which seems to go against the theory. why did this happen?\noscilloscope precision: oscilloscopes show voltages with limited precision. if the capacitor voltage is extremely close to the maximum (e.g., 11.999999 v), the oscilloscope rounds it to 12 v. rounding effects: the actual voltage might still be slightly below 12 v, but the measuring device’s resolution hides these small differences. higher-resolution equipment would show the tiny gap. key takeaways at 5τ, a capacitor is 99.3% charged, not 100%. it would take infinite time for a capacitor to reach exactly $vmax$. simulations and measurements often show vmax due to rounding and device limitations. this approximation is fine for real-world use, as the difference is too small to matter. understanding these details gives a clearer picture of how capacitors behave and avoids common misunderstandings about what \u0026ldquo;fully charged\u0026rdquo; means.\n","title":"Understanding Capacitor Charging and the Concept of Full Charge"},{"date":"2025-01-08","image":"","imageAlt":"","link":"/posts/installing-esp32-boards/","summary":"A guide when you start out with esp32","tags":["ESP"],"text":" in your arduino ide, go to file\u0026gt; preferences enter the following into the “additional board manager urls” field: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json then, click the “ok” button: note:if you already have the esp8266 boards url, you can separate the urls with a comma as follows\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json open the boards manager. go to tools \u0026gt; board \u0026gt; boards manager… search for esp32 and press install button for the “esp32 by espressif systems“: that’s it. it should be installed after a few seconds. and don\u0026rsquo;t forget to download the drivers for windows\n","title":"Setting up ESP32"},{"date":"2024-12-14","image":"","imageAlt":"","link":"/posts/ros-2-cheat-sheets/","summary":"Get the hang of ROS 2 without the hassle! These quick cheat sheets cover everything from setting up your environment to managing nodes, topics, and more. Perfect for keeping your workflow smooth and stress-free.","tags":["linux","ROS"],"text":"ros 2 environment configuration cheat sheet commands and explanations 1. source the setup files source /opt/ros/\u0026lt;distro\u0026gt;/setup.bash activates ros 2 in the current shell session by setting necessary environment variables. replace \u0026lt;distro\u0026gt; with the name of your installed ros 2 distribution (e.g., humble, galactic, jazzy). 2. add sourcing to shell startup script echo \u0026#34;source /opt/ros/\u0026lt;distro\u0026gt;/setup.bash\u0026#34; \u0026gt;\u0026gt; ~/.bashrc automatically sources ros 2 every time you open a new shell. modify ~/.bashrc to include the source command. undo this step:\nedit the ~/.bashrc file manually to remove the line added. 3. check environment variables printenv | grep -i ros verifies if ros environment variables are correctly set (e.g., ros_distro, ros_version). 4. set the ros_domain_id variable export ros_domain_id=\u0026lt;your_domain_id\u0026gt; sets a unique domain id for communication between ros 2 nodes. add to ~/.bashrc for persistence: echo \u0026#34;export ros_domain_id=\u0026lt;your_domain_id\u0026gt;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc 5. set the ros_automatic_discovery_range variable export ros_automatic_discovery_range=\u0026lt;range_value\u0026gt; limits ros 2 discovery range, useful in environments with multiple robots. add to ~/.bashrc for persistence: echo \u0026#34;export ros_automatic_discovery_range=\u0026lt;range_value\u0026gt;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc turtlesim and ros2 cheat sheet 1. install turtlesim install turtlesim: sudo apt update sudo apt install ros-\u0026lt;ros2-distro\u0026gt;-turtlesim check installed executables: ros2 pkg executables turtlesim 2. start turtlesim launch the turtlesim node: ros2 run turtlesim turtlesim_node 3. control the turtle launch the teleop node to control the turtle: ros2 run turtlesim turtle_teleop_key additional ros2 commands:\nlist active nodes: ros2 node list list available topics: ros2 topic list list available services: ros2 service list list available actions: ros2 action list 4. install and use rqt install rqt and plugins: sudo apt update sudo apt install \u0026#39;~nros-\u0026lt;ros2-distro\u0026gt;-rqt*\u0026#39; launch rqt: rqt 5. use rqt service caller select the service caller plugin: navigate to: plugins \u0026gt; services \u0026gt; service caller refresh services: click on the refresh button. 6. spawn a new turtle (service call) call the /spawn service (in rqt service caller): name: turtle2 coordinates: x = 1.0, y = 1.0 click call to spawn a new turtle. 7. change pen settings (service call) call the /set_pen service (in rqt service caller): r = 255 (red) width = 5 click call. 8. remap topics for multiple turtles remap the cmd_vel topic for turtle2: ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel 9. stop turtlesim stop the turtlesim node: press ctrl + c in the turtlesim_node terminal. stop the teleop node: press q in the turtle_teleop_key terminal. understanding nodes in ros 2 cheat sheet the ros 2 graph the ros 2 graph represents the network of ros 2 elements (nodes, topics, services, etc.) interacting in real-time. a robot system can be visualized as multiple nodes processing data together. each node in ros 2 serves a specific modular function (e.g., controlling motors or publishing sensor data).\nnodes in ros 2 what is a node?\na node is an executable responsible for a specific task (e.g., controlling motors, publishing sensor data) and communicates with other nodes via topics, services, actions, or parameters.\nsingle or multiple nodes per executable:\na single ros 2 executable (written in c++ or python) can contain multiple nodes.\n1. ros2 run the ros2 run command is used to run an executable from a specific package.\nros2 run \u0026lt;package_name\u0026gt; \u0026lt;executable_name\u0026gt; example to run the turtlesim: ros2 run turtlesim turtlesim_node this will open a window with a turtle in it.\n2. ros2 node list to list all active nodes in the ros 2 system:\nros2 node list 3. ros2 node info the ros2 node info \u0026lt;node_name\u0026gt; command provides detailed information about a node’s publishers, subscribers, services, and actions.\nexample to get info about the /turtlesim node: ros2 node info /turtlesim 3.1 remapping node names and topics remap the node name using --ros-args --remap: ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle this will rename /turtlesim to /my_turtle. if you run ros2 node list, you will see: /my_turtle /teleop_turtle ros 2 topic commands cheat sheet topics in ros2 what is a topic a topic in ros 2 is a communication channel through which nodes can publish and subscribe to messages, enabling data exchange between them. 1. rqt_graph (graphical tool): run rqt_graph to visualize the nodes and topics: rqt_graph open via gui: rqt \u0026gt; plugins \u0026gt; introspection \u0026gt; node graph. 2. ros2 topic list: list all active topics: ros2 topic list list topics with types: ros2 topic list -t 3. ros2 topic echo: display the data being published on a topic: ros2 topic echo \u0026lt;topic_name\u0026gt; example: to see /turtle1/cmd_vel data: ros2 topic echo /turtle1/cmd_vel 4. ros2 topic info: get info about a specific topic: ros2 topic info \u0026lt;topic_name\u0026gt; example: info about /turtle1/cmd_vel: ros2 topic info /turtle1/cmd_vel 5. ros2 interface show: show the structure of a message type: ros2 interface show \u0026lt;msg_type\u0026gt; example: for geometry_msgs/msg/twist: ros2 interface show geometry_msgs/msg/twist 6. ros2 topic pub: publish data to a topic: ros2 topic pub \u0026lt;topic_name\u0026gt; \u0026lt;msg_type\u0026gt; \u0026#34;\u0026lt;args\u0026gt;\u0026#34; example: to continuously move the turtle: ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/twist \u0026#34;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\u0026#34; publish once: ros2 topic pub --once \u0026lt;topic_name\u0026gt; \u0026lt;msg_type\u0026gt; \u0026#34;\u0026lt;args\u0026gt;\u0026#34; 7. ros2 topic hz: view the rate of data publishing: ros2 topic hz \u0026lt;topic_name\u0026gt; example: check the rate for /turtle1/pose: ros2 topic hz /turtle1/pose 8. ros2 topic bw: check bandwidth usage for a topic: ros2 topic bw \u0026lt;topic_name\u0026gt; example: check bandwidth for /turtle1/pose: ros2 topic bw /turtle1/pose 9. ros2 topic find: find topics by message type: ros2 topic find \u0026lt;msg_type\u0026gt; example: find topics with geometry_msgs/msg/twist type: ros2 topic find geometry_msgs/msg/twist ros 2 services cheat sheet services in ros2: services in ros 2 follow a call-and-response model, where nodes request data from a service and receive a response. unlike topics, services only provide data when specifically called by a client.\n1. list active services: view all active services in ros 2: ros2 service list 2. service type: check the type of a service (e.g., /clear): ros2 service type /clear 3. service info: get info about a service (e.g., /clear): ros2 service info /clear 4. find services by type: find services of a specific type: ros2 service find std_srvs/srv/empty 5. show service interface: view the request/response structure of a service: ros2 interface show turtlesim/srv/spawn 6. call a service: call a service with or without arguments: ros2 service call /clear std_srvs/srv/empty ros2 service call /spawn turtlesim/srv/spawn \u0026#34;{x: 2, y: 2, theta: 0.2, name: \u0026#39;\u0026#39;}\u0026#34; 7. echo service data: view service communication (request/response): ros2 service echo /add_two_ints here is the content with the requested headings formatted as ####:\nros 2 parameters cheat sheet parameters in ros2: parameters in ros 2 are configuration values for nodes, like settings that can be integers, floats, booleans, strings, and lists. each node can maintain its own parameters.\n1. ros2 param list list all parameters for all nodes: ros2 param list example output: /teleop_turtle:\rscale_angular\rscale_linear\ruse_sim_time\r/turtlesim:\rbackground_b\rbackground_g\rbackground_r\ruse_sim_time 2. ros2 param get get the value and type of a parameter: ros2 param get \u0026lt;node_name\u0026gt; \u0026lt;parameter_name\u0026gt; example to get the value of /turtlesim background_g: ros2 param get /turtlesim background_g output:\ninteger value is: 86 3. ros2 param set change a parameter’s value: ros2 param set \u0026lt;node_name\u0026gt; \u0026lt;parameter_name\u0026gt; \u0026lt;value\u0026gt; example to change /turtlesim background_r: ros2 param set /turtlesim background_r 150 output:\nset parameter successful 4. ros2 param dump view and save a node\u0026rsquo;s parameters to a file: ros2 param dump \u0026lt;node_name\u0026gt; \u0026gt; \u0026lt;file_name\u0026gt;.yaml example for /turtlesim: ros2 param dump /turtlesim \u0026gt; turtlesim.yaml 5. ros2 param load load parameters from a file into a node: ros2 param load \u0026lt;node_name\u0026gt; \u0026lt;parameter_file\u0026gt; example: ros2 param load /turtlesim turtlesim.yaml output:\nset parameter background_b successful\rset parameter background_g successful\rset parameter background_r successful 6. load parameter file on node startup start a node with saved parameters: ros2 run \u0026lt;package_name\u0026gt; \u0026lt;executable_name\u0026gt; --ros-args --params-file \u0026lt;file_name\u0026gt; example: ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml here\u0026rsquo;s the version without any tabs before the code blocks:\nros 2 actions cheat sheet overview of actions actions in ros 2 are for long-running tasks that can be canceled and provide feedback. actions are a combination of goal, feedback, and result. they use a client-server model similar to topics but allow steady feedback and cancellation. action client sends goals to the action server, which processes the goal and sends feedback/results. 1. ros2 node info view a node\u0026rsquo;s information, including its actions: ros2 node info \u0026lt;node_name\u0026gt; example for /turtlesim: ros2 node info /turtlesim this shows the action servers and action clients for the node.\n2. ros2 action list list all actions in the ros graph: ros2 action list this will return available actions such as /turtle1/rotate_absolute.\n3. ros2 action type check the action type for a specific action: ros2 action type /turtle1/rotate_absolute output example: turtlesim/action/rotateabsolute 4. ros2 action info view detailed information about an action: ros2 action info /turtle1/rotate_absolute example output: action: /turtle1/rotate_absolute\raction clients: 1\r/teleop_turtle\raction servers: 1\r/turtlesim 5. ros2 interface show inspect the structure of the action type: ros2 interface show turtlesim/action/rotateabsolute this will show the structure of the goal, result, and feedback: the desired heading in radians\rfloat32 theta\r---\rthe angular displacement in radians to the starting position\rfloat32 delta\r---\rthe remaining rotation in radians\rfloat32 remaining 6. ros2 action send_goal send a goal to an action server: ros2 action send_goal \u0026lt;action_name\u0026gt; \u0026lt;action_type\u0026gt; \u0026lt;values\u0026gt; example: ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/rotateabsolute \u0026#34;{theta: 1.57}\u0026#34; add --feedback to receive feedback during goal execution: ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/rotateabsolute \u0026#34;{theta: -1.57}\u0026#34; --feedback here is the content with only the commands formatted without tabs:\nusing rqt_console to view logs 1. setup start rqt_console in a new terminal with the following command:\nros2 run rqt_console rqt_console now, start turtlesim in a new terminal with the following command:\nros2 run turtlesim turtlesim_node 2. messages on rqt_console to produce log messages for rqt_console to display, let’s have the turtle run into the wall. in a new terminal, enter the ros2 topic pub command below:\nros2 topic pub -r 1 /turtle1/cmd_vel geometry_msgs/msg/twist \u0026#34;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}\u0026#34; press ctrl+c in the terminal where you ran the ros2 topic pub command to stop your turtle from running into the wall.\n3. set the default logger level you can set the default logger level when you first run the /turtlesim node using remapping. enter the following command in your terminal:\nros2 run turtlesim turtlesim_node --ros-args --log-level warn here is a cheat sheet for recording and playing back data using ros2 bag, excluding the previously mentioned commands:\nrecording and playing back data in ros 2 managing topic data 1. setup start the /turtlesim and /teleop_turtle nodes. create a directory for saving recordings. 2. choose a topic to list available topics in your system, run: ros2 topic list to inspect the data of a topic, run: ros2 topic echo \u0026lt;topic_name\u0026gt; 3. record topics single topic:\nrecord a single topic: ros2 bag record \u0026lt;topic_name\u0026gt; multiple topics:\nrecord multiple topics and specify a custom bag file name: ros2 bag record -o \u0026lt;file_name\u0026gt; \u0026lt;topic1\u0026gt; \u0026lt;topic2\u0026gt; ... record all topics: ros2 bag record -a 4. inspect topic data to see details about a recorded bag file: ros2 bag info \u0026lt;bag_file_name\u0026gt; 5. play topic data to replay a bag file: ros2 bag play \u0026lt;bag_file_name\u0026gt; managing service data 1. setup start the introspection_service and introspection_client nodes with service introspection enabled. 2. check service availability list all available services: ros2 service list to check if service introspection is enabled on a specific service: ros2 service echo --flow-style \u0026lt;service_name\u0026gt; 3. record services record a specific service: ros2 bag record --service \u0026lt;service_name\u0026gt; record all services: ros2 bag record --all-services 4. inspect service data to inspect a recorded service data bag file: ros2 bag info \u0026lt;bag_file_name\u0026gt; 5. play service data to replay service data from the bag file: ros2 bag play --publish-service-requests \u0026lt;bag_file_name\u0026gt; ","title":"ROS 2 Cheat Sheets"},{"date":"2024-12-12","image":"","imageAlt":"","link":"/posts/setting-up-esp8266/","summary":"A guide when you start out with esp8266","tags":["ESP"],"text":"esp8266 diagram in your arduino ide, go to file\u0026gt; preferences enter the following into the “additional board manager urls” field:\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json click the “ok” button: note:if you already have the esp8266 boards url, you can separate the urls with a comma as follows\nhttps://dl.espressif.com/dl/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json open the boards manager. go to tools \u0026gt; board \u0026gt; boards manager… search for esp8266 and press install button for the “esp32 by espressif systems“: that’s it. it should be installed after a few seconds. ","title":"Setting up ESP8266"},{"date":"2024-12-09","image":"","imageAlt":"","link":"/posts/oop-in-python/","summary":"This blog covers the fundamentals of Object-Oriented Programming (OOP) in Python, explaining classes, objects, inheritance, and the `super()` function with practical examples to help beginners write modular and reusable code.","tags":["python"],"text":"a beginner\u0026rsquo;s guide to object-oriented programming (oop) in python object-oriented programming (oop) is a cornerstone programming paradigm in python. it allows developers to create reusable and modular code by organizing functionality into objects, which are instances of classes. in this guide, we’ll walk you through the basics of oop, including key concepts like inheritance and the super() function, and provide practical examples to help you get started.\nwhat are objects? objects are the building blocks of oop. in python, everything is an object, from simple data types like integers and strings to complex data structures and functions. when you create a variable, you\u0026rsquo;re actually creating an object of a specific type (or class).\nexample: numbers and strings as objects x = 5 print(type(x)) # output: \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; greeting = \u0026#34;hello\u0026#34; print(type(greeting)) # output: \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; even collections like lists are objects:\nnumbers = [1, 2, 3] print(type(numbers)) # output: \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; built-in methods each object type in python comes with its own set of methods—functions that can be used to manipulate or interact with the object. these methods are accessed using dot notation.\nexample: string methods greeting = \u0026#34;hello\u0026#34; print(greeting.upper()) # output: hello example: list methods numbers = [1, 2, 3] numbers.append(4) print(numbers) # output: [1, 2, 3, 4] however, methods are type-specific. trying to call a string method on an integer will result in an error:\nx = 5 print(x.upper()) # raises attributeerror creating custom classes python lets you define your own classes to create custom objects tailored to your needs. a class serves as a blueprint for creating objects, and each object is an instance of that class.\nexample: defining a simple class class dog: def bark(self): print(\u0026#34;woof!\u0026#34;) you can create an instance (object) of the dog class and use its method:\nmy_dog = dog() my_dog.bark() # output: woof! attributes and methods classes can have attributes (data) and methods (functions). these define the properties and behaviors of objects created from the class. to initialize attributes, you use the special __init__ method, which is automatically called when an object is created.\nexample: adding attributes with __init__ class dog: def __init__(self, name, age): self.name = name self.age = age def bark(self): print(f\u0026#34;{self.name} says woof!\u0026#34;) here’s how you can use this class:\nmy_dog = dog(\u0026#34;buddy\u0026#34;, 3) print(my_dog.name) # output: buddy print(my_dog.age) # output: 3 my_dog.bark() # output: buddy says woof! inheritance and the super() function inheritance allows one class (child class) to derive attributes and methods from another class (parent class). this is particularly useful for code reuse and extension.\nwhen a child class overrides the __init__ method, it’s important to ensure that the parent class’s __init__ method is called. this is done using the super().__init__() function.\nexample: using super().__init__() in a subclass class animal: def __init__(self, species): self.species = species class dog(animal): def __init__(self, name, age, species=\u0026#34;dog\u0026#34;): super().__init__(species) # initialize parent class attributes self.name = name self.age = age def bark(self): print(f\u0026#34;{self.name}, the {self.species}, says woof!\u0026#34;) here’s how it works:\nmy_dog = dog(\u0026#34;buddy\u0026#34;, 3) print(my_dog.species) # output: dog my_dog.bark() # output: buddy, the dog, says woof! in this example:\nthe animal class serves as the parent class. the dog class extends animal and adds its own attributes (name and age). the super().__init__(species) call ensures the species attribute from animal is properly initialized. class and static methods in addition to instance methods, python supports class methods and static methods:\nclass methods work at the class level and are defined using the @classmethod decorator. static methods don’t access class or instance attributes and are defined with the @staticmethod decorator. example: class method class animal: count = 0 def __init__(self, name): self.name = name animal.count += 1 @classmethod def get_count(cls): return cls.count usage:\na1 = animal(\u0026#34;cat\u0026#34;) a2 = animal(\u0026#34;dog\u0026#34;) print(animal.get_count()) # output: 2 example: static method class mathutil: @staticmethod def add(x, y): return x + y usage:\nresult = mathutil.add(5, 10) print(result) # output: 15 why use oop? object-oriented programming provides numerous benefits:\nencapsulation: keeps related data and methods together. reusability: inheritance allows you to extend existing code. readability: code mirrors real-world entities and relationships. real-world example: employee management system let’s create a simple system for managing employees using oop concepts.\nclass employee: def __init__(self, name, position): self.name = name self.position = position def describe(self): print(f\u0026#34;{self.name} works as a {self.position}\u0026#34;) class manager(employee): def __init__(self, name, position, department): super().__init__(name, position) self.department = department def describe(self): print(f\u0026#34;{self.name} is a manager of the {self.department} department.\u0026#34;) usage:\ne1 = employee(\u0026#34;alice\u0026#34;, \u0026#34;developer\u0026#34;) m1 = manager(\u0026#34;bob\u0026#34;, \u0026#34;manager\u0026#34;, \u0026#34;engineering\u0026#34;) e1.describe() # output: alice works as a developer m1.describe() # output: bob is a manager of the engineering department. conclusion object-oriented programming in python enables developers to build organized, reusable, and scalable applications. key concepts like inheritance, the super() function, and different types of methods (instance, class, and static) make oop powerful and flexible.\nstart small by creating simple classes and gradually explore inheritance and method overriding. for practice, try creating a library system, a school management system, or a banking application. with consistent practice, you’ll master the art of oop in python!\n","title":"A Beginner's Guide to Object-Oriented Programming (OOP) in Python"},{"date":"2024-12-09","image":"","imageAlt":"","link":"/posts/virtualbox-clipboard-issues-on-ubuntu/","summary":"Having trouble with clipboard sharing in VirtualBox on Ubuntu? Despite enabling bidirectional settings and installing Guest Additions, copy-paste between host and guest systems fails. Here’s how to fix it by updating packages and enabling clipboard support.","tags":["linux"],"text":"i\u0026rsquo;m running ubuntu on virtualbox on a windows host. despite setting up everything i could think of, the clipboard functionality refuses to cooperate. here’s a breakdown of my situation and the steps i’ve tried so far.\nwhat’s set up: guest additions installed:\nthe vbox_gas_6.1.36 icon appears correctly, and shared folders between the virtualbox guest and the windows host work without a hitch.\nextension pack installed:\ni’ve installed oracle_vm_virtualbox_extension_pack.vbox-extpack-6.1.36a.\nclipboard settings:\nclipboard sharing is set to bidirectional under the devices menu.\ndrag and drop:\nset to bidirectional as well, but it doesn’t work either.\nthe problem: copying text from google chrome on the host and pasting it into firefox within the virtualbox guest doesn’t work. copying text from notepad on the host and pasting it into libreoffice writer on the guest also fails. what i’ve tried: i’ve double-checked all settings and even reinstalled guest additions, but the clipboard issue persists.\npossible solution: if you’re facing a similar problem, the following commands might resolve it:\nupdate and install necessary packages\nrun the following commands in your ubuntu terminal:\nsudo apt-get update sudo apt-get install virtualbox-guest-x11 sudo apt install linux-headers-$(uname -r) build-essential dkms enable clipboard support\nonce the above packages are installed, run:\nsudo vboxclient --clipboard then, restart your virtual machine, after restarting the vm if it still does not work do the same command again and it will work inshallah:\nthese steps should enable clipboard functionality. if it still doesn’t work, double-check that the guest additions installation was successful and matches your virtualbox version.\n","title":"VirtualBox Clipboard Issues on Ubuntu"},{"date":"2024-12-07","image":"","imageAlt":"","link":"/about/","summary":"\u003cp\u003eHello, and welcome to my blog! I\u0026rsquo;m an aspiring \u003cstrong\u003eElectrical Engineer\u003c/strong\u003e with a passion for combining creativity, innovation, and technology to solve real-world problems. I recently completed an internship as a \u003cstrong\u003eFull Stack Developer\u003c/strong\u003e at \u003cstrong\u003eInspire for Development Solutions\u003c/strong\u003e, where I honed my skills in modern web development. Currently, I’m an intern at \u003cstrong\u003eHTU Hacker Space\u003c/strong\u003e, focusing on cutting-edge electrical engineering challenges.\u003c/p\u003e","tags":[],"text":"hello, and welcome to my blog! i\u0026rsquo;m an aspiring electrical engineer with a passion for combining creativity, innovation, and technology to solve real-world problems. i recently completed an internship as a full stack developer at inspire for development solutions, where i honed my skills in modern web development. currently, i’m an intern at htu hacker space, focusing on cutting-edge electrical engineering challenges.\na little about my journey with a foundation in electrical engineering, i’ve explored various disciplines, including full-stack development, robotics, and app development. during my time at inspire, i worked extensively with react, redux, node.js, and mongodb, developing impactful solutions. now, i’m diving deeper into the world of electronics and embedded systems at htu hacker space.\nsome highlights from my journey include:\ndeveloping a job portal web application with features like cv building, job posting, and application tracking. designing and building an arduino-based environmental monitoring system with temperature, humidity, and soil sensors. careminder - smart pill dispenser: a smart device integrated with a mobile app to streamline medication management, featuring precision dispensing, real-time notifications, and solidworks-designed components. my tech toolbox here’s a glimpse of the tools and technologies i work with:\nfrontend: react, redux, material-ui (mui), expo backend: node.js, express, mongodb hardware: arduino, esp32, dht11 sensors, lcd modules, custom control circuits design and simulation: solidworks, pcb design beyond work outside of engineering, i love drawing, watching movies and tv shows—two of my favorite series are breaking bad and arcane. in my downtime, i enjoy playing video games, with cyberpunk 2077 and red dead redemption 2 being among the best games i’ve ever played. i’m always excited to learn, collaborate, and build innovative solutions that make a difference.\nfeel free to explore my blog to see more about my projects, thoughts, and journey!\n","title":"About me"},{"date":"2024-12-06","image":"","imageAlt":"","link":"/posts/starting-a-blog/","summary":"Set up a blog with Hugo and Obsidian by installing Hugo, initializing a site, and syncing Obsidian notes. Add themes, configure settings, and integrate images with a Python script.","tags":["linux","obsidian"],"text":"this image illustrates the workflow of this blog.\nsetting up before starting, ensure that you have git, go and python installed on your system.\ncreate folder for posts first, create a folder in your obsidian vault named posts.\ninstall hugo next, install hugo and add it to your environment variables. link: https://gohugo.io/installation/\n## verify hugo works hugo version ## create a new site hugo new site websitename cd websitename initialize git repository after creating your hugo site, initialize a git repository:\ngit init download a hugo theme go to hugo themes and download a theme of your choice. for this example, we’ll use the theme hugo ficurinia from gitlab.\nuse the following command to add the hugo theme to your site:\ngit submodule add -f [the repo link of the theme] themes/[name of the theme] for me i did this:\ngit submodule add -f https://gitlab.com/gabmus/hugo-ficurinia.git themes/hugo-ficurinia example theme configuration most themes come with an example configuration, which is typically the best way to get started. for the hugo-ficurinia theme:\nbaseurl = \u0026#34;/\u0026#34; theme = \u0026#34;hugo-ficurinia\u0026#34; title = \u0026#34;abdullah salameh\u0026#39;s blog\u0026#34; languagecode = \u0026#34;en\u0026#34; defaultcontentlanguage = \u0026#34;en\u0026#34; # this will be included in the footer after the current year the site is last # built, followed by the (c) symbol # you can use markdown inside this field paginate = 5 # number of articles per page in the index summarylength = 50 # number of words for article summaries [params] author = \u0026#34;abdullah salameh\u0026#34; description = \u0026#34;a description for my website\u0026#34; # this will be added as metadata posts = \u0026#34;posts\u0026#34; # content directory where to find home page posts; default searches in \u0026#34;posts\u0026#34; and \u0026#34;post\u0026#34; showpostslink = true # show or hide the link to the simple post list extracontentdirs = [] # other content directories to render similarly to the home page showcasedir = \u0026#34;showcase\u0026#34; # create a content directory that shows a special showcase section in the home page # shows a specified single page as a home page, instead of the traditional articles list # requires setting `homesinglepage` # goes well with extracontentdirs showsinglepageashome = false homesinglepage = \u0026#34;/home\u0026#34; # it\u0026#39;s best to put these icons in the \u0026#34;static\u0026#34; folder of your site logo = \u0026#34;/logo.svg\u0026#34; favicon = \u0026#34;/favicon.png\u0026#34; # 32x32 faviconico = \u0026#34;/favicon.ico\u0026#34; # 32x32 appletouch = \u0026#34;/apple-touch-icon.png\u0026#34; # 180x180 svgicon = \u0026#34;/logo.svg\u0026#34; icon512 = \u0026#34;/icon512.png\u0026#34; # 512x512 png image logorightoftitle = false # positions the logo to the right of the title; default: false showtags = true # show the tags menu item; default true showrss = false # show the link for the rss feed; default true imageinarticlepreview = true # show images in article preview; default false fitimageinarticlepreview = false # make article preview images fit the article preview instead of getting cropped articlesummary = true # show a summary in article preview; default true fontfamily = \u0026#34;jetbrains mono\u0026#34; # changes the font, default \u0026#34;jetbrains mono\u0026#34; titlefontfamily = \u0026#34;jetbrains mono\u0026#34; # font used for titles and headings monospacefontfamily = \u0026#34;jetbrains mono\u0026#34; # changes the monospace font for code, default \u0026#34;jetbrains mono\u0026#34; # multipliers applied to font sizes, useful for custom fonts that may be too big or too small titlefontsizemultiplier = 1.0 mainfontsizemultiplier = 1.0 monofontsizemultiplier = 1.0 contentwidth = \u0026#34;1000px\u0026#34; # maximum width of the site content, css syntax papercards = true # enable paper card style; default false buttontags = false # enable button tag style; default false tagsinarticlepreview = true # enable tags list in the article preview card gridview = true # show post list as a grid. goes well with papercards bigarticletitle = false # makes the title in the single article view bigger navtype = \u0026#34;standard\u0026#34; # changes the style of the pagination, available styles are: \u0026#34;standard\u0026#34;, \u0026#34;circles\u0026#34; enableshadow = false # shows a shadow around some elements menustyle = \u0026#34;buttons\u0026#34; # changes the style of the main site navigation menu, available styles are: \u0026#34;standard\u0026#34;, \u0026#34;buttons\u0026#34; inputstyle = \u0026#34;standard\u0026#34; # changes the style of inputs (like the searchbar), available styles are: \u0026#34;standard\u0026#34;, \u0026#34;buttons\u0026#34; enablesearch = true # enable search page searchbareverywhere = true # if the searchbar should be shown in every page; requires enablesearch searchmenulink = false # add a search link to the navigation menu; requires enablesearch mobilehamburgernav = false # alternative hamburger menu layout for the main nav menu when screen is small enablefeatured = false # enable a particular view for articles marked as featured (featured: true in the article frontmatter) underlinetitlelinks = false # show an underline also for links that are titles # enable comments support with commento using the script from your server commento = \u0026#34;https://example.com/js/commento.js\u0026#34; # enable comments support with cactus comments (cactus.chat) cactuscommentssitename = \u0026#34;example.com\u0026#34; cactuscommentsservername = \u0026#34;cactus.chat\u0026#34; cactuscommentshomeserver = \u0026#34;https://matrix.cactus.chat:8448\u0026#34; # enable analytics using plausible plausiblescripturl = \u0026#34;https://something.com/...\u0026#34; plausibledomain = \u0026#34;example.com\u0026#34; # enable analytics using umami umamiscripturl = \u0026#34;https://something.com/...\u0026#34; umamiwebsiteid = \u0026#34;example-tracking-code\u0026#34; enableshareonfediverse = false # enable a button at the end of an article to share it on the fediverse tocbeforeimage = false # show the table of contents before the main article image; default false # warning: deprecated! use [[menu.icons]] instead, look below # links = [ # [\u0026#34;gitlab\u0026#34;, \u0026#34;https://gitlab.com/gabmus\u0026#34;], # [\u0026#34;gnome\u0026#34;, \u0026#34;https://gitlab.gnome.org/gabmus\u0026#34;], # [\u0026#34;youtube\u0026#34;, \u0026#34;https://youtube.com/techpillsnet\u0026#34;] # ] # you can customize all of the colors in this theme # colors are defined in data/colors.yml # alternative sidebar layout enablesidebarlayout = false tocinsidebar = false # if the sidebar is enbabled, show the toc in the sidebar # redirect to baseurl if current url host doesn\u0026#39;t match # useful if deploying in gitlab pages with custom domain and don\u0026#39;t want # the username.gitlab.io/website url to persist # this requires you to set baseurl (see above) forceredirect = false infinitescrolling = false # activates infinite scrolling instead of regular pagination # note: you need to enable json output for this to work! # look at the [outputs] section below enablefootercolumns = false # activates footer columns, as described below enablejumbotron = false # enables jumbotron, as described below # related articles will be selected randomly based on tags and shown at # the bottom of the article, after the comments enablerelatedarticles = true relatedarticlesnum = 2 # how many related articles to show randomrelated = false # sorts related articles in random order (randomized at built time) [menu] # these links will be added to the main navigation menu, sorted by weight # other elements in this menu are added automatically from the \u0026#34;pages\u0026#34; folder # the folder it will look into can be customized with the pages variable # in params above [[menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;about\u0026#34; url = \u0026#34;/about/\u0026#34; weight = 10 # these links (menu.icons) will be added as icon links below the main nav [[menu.icons]] identifier = \u0026#34;github\u0026#34; name = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/abda-s\u0026#34; weight = 10 [[menu.icons]] identifier = \u0026#34;linkedin\u0026#34; name = \u0026#34;linkedin\u0026#34; url = \u0026#34;https://www.linkedin.com/in/abdullah-salameh/\u0026#34; weight = 20 # this section is necessary if you want infinite scrolling # it allows to output the article list as paged json so that \u0026#34;pages\u0026#34; can be retrieved via javascript [outputs] home = [\u0026#34;html\u0026#34;, \u0026#34;json\u0026#34;] you can use the previous configuration in your hugo.toml file:\ntest the hugo site locally run the hugo server to test if everything is set up correctly:\nhugo server -t [themename] it\u0026rsquo;s working but there isn\u0026rsquo;t any posts add posts if everything is working but you don’t see any posts, create a posts folder inside the content directory:\ncd content mkdir posts sync obsidian notes with hugo posts to sync your obsidian notes with the hugo posts folder, use the robocopy command:\nrobocopy [sourcepath] [destination] /mir add metadata for new posts when starting a new post, make sure to add the following metadata at the top of your markdown file:\n---\rtitle: blogtitle\rdate: 2024-11-06\rdraft: false\rtags:\r- tag1\r- tag2\r--- add images to hugo when you add images to your obsidian notes, they won’t appear in the hugo site because the image source is only in obsidian. to fix this, use the following python script to copy the images to the hugo static folder.\nimport os import re import shutil # paths (using raw strings to handle windows backslashes correctly) posts_dir = r\u0026#34;c:\\users\\3adas\\documents\\salamehblog\\content\\posts\u0026#34; attachments_dir = r\u0026#34;c:\\users\\3adas\\onedrive\\notes\\files\u0026#34; static_images_dir = r\u0026#34;c:\\users\\3adas\\documents\\salamehblog\\static\\images\u0026#34; # step 1: process each markdown file in the posts directory for filename in os.listdir(posts_dir): if filename.endswith(\u0026#34;.md\u0026#34;): filepath = os.path.join(posts_dir, filename) with open(filepath, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: content = file.read() # step 2: find all image links in the format ![[image.extension]] images = re.findall(r\u0026#39;\\[\\[([^]]+\\.(png|jpg|jpeg|gif|bmp|webp|svg))\\]\\]\u0026#39;, content, re.ignorecase) # step 3: replace image links and ensure urls are correctly formatted for image, _ in images: # `_` is unused, it contains the extension from the regex group # prepare the markdown-compatible link with %20 replacing spaces markdown_image = f\u0026#34;![image description](/images/{image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; content = content.replace(f\u0026#34;![[{image}]]\u0026#34;, markdown_image) # step 4: copy the image to the hugo static/images directory if it exists image_source = os.path.join(attachments_dir, image) if os.path.exists(image_source): shutil.copy(image_source, static_images_dir) # step 5: write the updated content back to the markdown file with open(filepath, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: file.write(content) print(\u0026#34;markdown files processed and images copied successfully.\u0026#34;) run the python script save the above python script as images.py in the root folder of your hugo site. run the script using:\npython images.py upload the code to github to upload your hugo site to github, follow these steps:\nstep 1: create a new repository click the plus icon in github.\nselect new repository from the dropdown menu.\nname your repository. for example, you could use salamehblog, set the repository to public. click create repository.\nstep 2: push your code to github add the remote origin for your repository: git remote add origin https://github.com/username/salamehblog.git build the website: hugo add all files to the staging area: git add . commit your changes: git commit -m \u0026#34;initial commit\u0026#34; push the code to github: git push -u origin main create a new branch for github pages to deploy from git subtree split --prefix public -b gh-pages-deploy git push origin gh-pages-deploy:gh-pages --force git branch -d gh-pages-deploy after completing these steps, your hugo website will be successfully uploaded to github and ready for deployment.\ndeployment navigate to the settings of your github repository.\nselect pages from the left-hand menu.\nchoose the gh-pages branch and set your custom domain.\nin the public folder of your hugo project, create a file named cname. add your custom domain (e.g., blog.salameh.top) inside the cname file.\nautomation script now that everything is set up, we need to address the challenge of running multiple commands each time we want to publish a post. this process is prone to human error and can be cumbersome. to streamline this, we’ll create a powershell script that automates the entire workflow.\ncreate the script\nin the root folder of your blog, create a new file named updateblog.ps1 and paste the following code into it: # powershell script for windows # set variables for obsidian to hugo copy $sourcepath = \u0026#34;c:\\users\\3adas\\onedrive\\notes\\posts\u0026#34; $destinationpath = \u0026#34;c:\\users\\3adas\\documents\\salamehblog\\content\\posts\u0026#34; # set github repo $myrepo = \u0026#34;reponame\u0026#34; # set error handling $erroractionpreference = \u0026#34;stop\u0026#34; set-strictmode -version latest # change to the script\u0026#39;s directory $scriptdir = split-path -parent $myinvocation.mycommand.definition set-location $scriptdir # check for required commands $requiredcommands = @(\u0026#39;git\u0026#39;, \u0026#39;hugo\u0026#39;) # check for python command (python or python3) if (get-command \u0026#39;python\u0026#39; -erroraction silentlycontinue) { $pythoncommand = \u0026#39;python\u0026#39; } elseif (get-command \u0026#39;python3\u0026#39; -erroraction silentlycontinue) { $pythoncommand = \u0026#39;python3\u0026#39; } else { write-error \u0026#34;python is not installed or not in path.\u0026#34; exit 1 } foreach ($cmd in $requiredcommands) { if (-not (get-command $cmd -erroraction silentlycontinue)) { write-error \u0026#34;$cmd is not installed or not in path.\u0026#34; exit 1 } } # step 1: check if git is initialized, and initialize if necessary if (-not (test-path \u0026#34;.git\u0026#34;)) { write-host \u0026#34;initializing git repository...\u0026#34; git init git remote add origin $myrepo } else { write-host \u0026#34;git repository already initialized.\u0026#34; $remotes = git remote if (-not ($remotes -contains \u0026#39;origin\u0026#39;)) { write-host \u0026#34;adding remote origin...\u0026#34; git remote add origin $myrepo } } # step 2: sync posts from obsidian to hugo content folder using robocopy write-host \u0026#34;syncing posts from obsidian...\u0026#34; if (-not (test-path $sourcepath)) { write-error \u0026#34;source path does not exist: $sourcepath\u0026#34; exit 1 } if (-not (test-path $destinationpath)) { write-error \u0026#34;destination path does not exist: $destinationpath\u0026#34; exit 1 } # use robocopy to mirror the directories $robocopyoptions = @(\u0026#39;/mir\u0026#39;, \u0026#39;/z\u0026#39;, \u0026#39;/w:5\u0026#39;, \u0026#39;/r:3\u0026#39;) $robocopyresult = robocopy $sourcepath $destinationpath @robocopyoptions if ($lastexitcode -ge 8) { write-error \u0026#34;robocopy failed with exit code $lastexitcode\u0026#34; exit 1 } # step 3: process markdown files with python script to handle image links write-host \u0026#34;processing image links in markdown files...\u0026#34; if (-not (test-path \u0026#34;images.py\u0026#34;)) { write-error \u0026#34;python script images.py not found.\u0026#34; exit 1 } # execute the python script try { \u0026amp; $pythoncommand images.py } catch { write-error \u0026#34;failed to process image links.\u0026#34; exit 1 } # step 4: build the hugo site write-host \u0026#34;building the hugo site...\u0026#34; try { hugo } catch { write-error \u0026#34;hugo build failed.\u0026#34; exit 1 } # step 5: add changes to git, including handling deletions write-host \u0026#34;staging changes for git...\u0026#34; # detect changes and include deletions $gitstatus = git status --porcelain if (-not $gitstatus) { write-host \u0026#34;no changes to stage.\u0026#34; } else { # stage all changes, including deletions write-host \u0026#34;staging all changes, including deletions...\u0026#34; git add --all } # step 6: commit changes with a dynamic message $commitmessage = \u0026#34;synced posts on $(get-date -format \u0026#39;yyyy-mm-dd hh:mm:ss\u0026#39;)\u0026#34; $hasstagedchanges = (git diff --cached --name-only) -ne \u0026#34;\u0026#34; if (-not $hasstagedchanges) { write-host \u0026#34;no changes to commit.\u0026#34; } else { write-host \u0026#34;committing changes...\u0026#34; git commit -m \u0026#34;$commitmessage\u0026#34; } # step 7: push all changes to the main branch write-host \u0026#34;deploying to github master...\u0026#34; try { git push origin master } catch { write-error \u0026#34;failed to push to master branch.\u0026#34; exit 1 } # step 8: push the public folder to the gh-pages branch using subtree split and force push write-host \u0026#34;deploying to github pages...\u0026#34; # check if the temporary branch exists and delete it $branchexists = git branch --list \u0026#34;gh-pages-deploy\u0026#34; if ($branchexists) { git branch -d gh-pages-deploy } # perform subtree split try { git subtree split --prefix public -b gh-pages-deploy } catch { write-error \u0026#34;subtree split failed.\u0026#34; exit 1 } # push to gh-pages branch with force try { git push origin gh-pages-deploy:gh-pages --force } catch { write-error \u0026#34;failed to push to hostinger branch.\u0026#34; git branch -d gh-pages-deploy exit 1 } # delete the temporary branch git branch -d gh-pages-deploy write-host \u0026#34;all done! site synced, processed, committed, built, and deployed.\u0026#34; run the script\neach time you want to sync or upload a new post, simply execute the script: .\\updateblog.ps1 ","title":"Starting a blog"},{"date":"2024-12-05","image":"","imageAlt":"","link":"/posts/learning-vim/","summary":"This guide covers installing Vim, understanding its modes (Normal, Insert, Visual, Command-Line), essential commands, combining actions, and customizing settings with `:set` for efficient text editing.","tags":["linux"],"text":"everything is based on this video.\ninstalling vim first, check if it’s installed by typing vi or vim in the terminal. if you see the following output: it means the program is installed. otherwise, you’ll need to install it using your linux package manager.\nif you\u0026rsquo;re on ubuntu, use the following commands:\nsudo apt install vi or\nsudo apt install vim understanding vim modes vim has several modes, each designed for specific tasks. vim’s modes are its core strength, allowing efficient text manipulation and navigation. each mode has a specific purpose, and transitioning between them is seamless.\n1. normal mode purpose: the default mode for navigating and executing commands.\nhow to enter: press esc from any mode.\nfeatures in normal mode: cursor navigation: use h (left), j (down), k (up), and l (right). jump words with w (next word) or b (back a word). jump to start/end of the line with ^/$. editing commands: dd: delete a line. yy: copy (yank) a line. p: paste copied/cut text. u: undo the last change. search \u0026amp; replace: /the-thing-you-want: search forward for \u0026ldquo;the-thing-you-want\u0026rdquo;. ?the-thing-you-want: search backward for \u0026ldquo;the-thing-you-want\u0026rdquo;. exiting normal mode: you\u0026rsquo;re always in normal mode unless you\u0026rsquo;ve entered another mode. press esc to ensure you\u0026rsquo;re back.\n2. insert mode purpose: to insert text into the file.\nin vim, capitalized versions of commands often extend or modify the behavior of their lowercase counterparts, typically operating on a larger scope or providing a slightly different action. here’s how capitalized versions of i, a, and o behave and differ from their lowercase equivalents:\ni vs. i i (insert mode): enters insert mode at the current cursor position. you can begin inserting text immediately before the character where the cursor is located. i (insert at start of line): enters insert mode at the beginning of the current line, skipping over any leading whitespace or indentation. this is useful for quickly editing or appending text at the start of a line without manually navigating there. example: this is a sentence. (cursor on the \u0026#34;t\u0026#34;) pressing `i`: insert before \u0026#34;t\u0026#34;. pressing `i`: insert at the very start of the line (before the \u0026#34;t\u0026#34; and leading spaces). a vs. a a (append mode): enters insert mode immediately after the current cursor position. allows you to append text to the current character. a (append at end of line): enters insert mode at the end of the current line, regardless of the cursor’s current position. ideal for quickly adding text at the end of a line. example: this is a sentence. (cursor on \u0026#34;t\u0026#34;) pressing `a`: append after \u0026#34;t\u0026#34;. pressing `a`: jump to the end of the line and begin inserting. o vs. o o (open below): opens a new line below the current line and enters insert mode. convenient for adding new lines after the current one. o (open above): opens a new line above the current line and enters insert mode. useful for quickly inserting new lines before the current line. example: line 1 line 2 (cursor here) line 3 pressing `o`: opens a new line below \u0026#34;line 2\u0026#34;. pressing `o`: opens a new line above \u0026#34;line 2\u0026#34;. why capitalization matters capitalized commands like i, a, and o are shortcuts for actions that would otherwise require additional steps or motions:\ni saves time by avoiding manual navigation to the start of the line. a avoids navigating to the end of the line before appending. **o and o make it easy to insert blank lines without leaving the current context. this behavior reflects vim\u0026rsquo;s philosophy of providing shortcuts for repetitive or common editing tasks while maintaining efficient text editing workflows. by mastering these commands, you can significantly improve your productivity in vim.\nfeatures in insert mode: type as you would in a regular text editor. use arrow keys to navigate (though it\u0026rsquo;s better to return to normal mode for navigation). exiting insert mode: press esc to return to normal mode.\n3. visual mode purpose: to select text for manipulation.\nhow to enter:\nv: character-wise selection. v: line-wise selection. ctrl+v: block/column-wise selection. features in visual mode: highlight text with cursor movement. perform actions like: d: cut (delete) selection. y: copy (yank) selection. \u0026gt;/\u0026lt;: indent or unindent selection. it\u0026rsquo;s like pressing tab u/u: convert selection to uppercase/lowercase. exiting visual mode: press esc to return to normal mode.\n4. command-line mode purpose: execute advanced commands like saving, quitting, or search-and-replace.\nhow to enter:\n:: for general commands. /: for forward search. ?: for backward search. examples of commands: :w: save changes. :q: quit. :wq: save and quit. :q!: quit without saving. :s/old/new/g: replace \u0026ldquo;old\u0026rdquo; with \u0026ldquo;new\u0026rdquo; in the current line. exiting command-line mode: press esc to cancel the current command or after executing it.\nthese modes make vim incredibly versatile, catering to diverse editing needs and workflows. by mastering them, you unlock vim\u0026rsquo;s full potential for efficient text editing.\ncombining multiple commands in vim, you can combine multiple commands to perform actions in sequence on text or the file you\u0026rsquo;re editing. this allows for powerful, efficient editing without needing to switch modes repeatedly.\ncommands cheat sheet using command combinations you can combine commands by using command prefixes, which allow you to perform multiple actions in a single command.\nexamples of command combinations: delete word (diw):\nthe command diw combines two commands:\nd: delete iw: inner word (selects the word under the cursor). this deletes the word under the cursor without deleting the space after it.\nthe quick brown fox if the cursor is on \u0026ldquo;quick\u0026rdquo;, pressing diw will delete \u0026ldquo;quick\u0026rdquo;, leaving \u0026ldquo;the brown fox\u0026rdquo;.\nchange word (ciw):\nciw stands for \u0026ldquo;change inner word\u0026rdquo;.\nc: change (deletes and enters insert mode) iw: inner word (selects the word under the cursor). this command deletes the word and enters insert mode for you to type a new word.\nthe quick brown fox if the cursor is on \u0026ldquo;quick\u0026rdquo;, pressing ciw will delete \u0026ldquo;quick\u0026rdquo; and place the cursor in insert mode to type a new word.\ndelete inside brackets (di():\ndi( combines d (delete) and i( (inner parentheses).\nit deletes the contents inside parentheses, but leaves the parentheses themselves intact.\nthis is (sample text) inside parentheses. if the cursor is inside the parentheses, pressing di( will delete \u0026ldquo;sample text\u0026rdquo; but leave the parentheses.\nyank line (yy):\nyy yanks (copies) the entire line the cursor is on, including line breaks. you can also use 2yy to yank multiple lines at once (in this case, 2 lines). indent selection (\u0026gt; or \u0026lt;):\nto indent a selection, you can use the \u0026gt; command. in visual mode (v or v), you can select a block of text and then use \u0026gt; to indent the entire block. to un-indent, use \u0026lt;. undo and redo:\nu: undo the last change. ctrl+r: redo the undone change. combining commands with count prefixes: you can also prefix commands with numbers to apply them a certain number of times.\nexample: 5dd: deletes 5 lines starting from the cursor\u0026rsquo;s current position. example: 3w: moves the cursor forward 3 words. this technique of combining commands and using prefixes significantly enhances vim\u0026rsquo;s efficiency, making it easier to manipulate text with fewer keystrokes.\nthe :set command here are examples of the :set command in vim, showcasing how to customize the editor\u0026rsquo;s behavior and appearance:\n1. enable line numbers absolute line numbers:\n:set number displays line numbers on the left-hand side of the screen.\nrelative line numbers:\n:set relativenumber shows line numbers relative to the current cursor position, making it easier to navigate using commands like 5j or 10k.\ndisable line numbers:\n:set nonumber :set norelativenumber disables both absolute and relative line numbers.\n2. highlight search results enable search highlighting:\n:set hlsearch highlights all search matches in the document.\ndisable search highlighting:\n:set nohlsearch turns off the search highlighting after completing a search.\nenable incremental search:\n:set incsearch shows search results as you type, instead of waiting until you press enter.\ndisable incremental search:\n:set noincsearch 3. auto-indentation enable auto-indentation:\n:set smartindent automatically indents new lines based on the previous line\u0026rsquo;s indentation (useful for programming).\nenable syntax-based indentation:\n:set filetype=python :set smarttab :set autoindent :set tabstop=4 :set shiftwidth=4 customizes indentation rules for a specific file type, such as python. these settings ensure consistent indentation using 4 spaces.\ndisable auto-indentation:\n:set noautoindent :set nosmartindent 4. tab and space settings set tab width:\n:set tabstop=4 sets the width of a tab character to 4 spaces.\nset indentation width:\n:set shiftwidth=4 sets the number of spaces to use for indentation when pressing \u0026gt; or \u0026lt;.\nuse spaces instead of tabs:\n:set expandtab converts tab characters to spaces (commonly used in python and other languages).\nuse tabs instead of spaces:\n:set noexpandtab ensures that tabs are inserted when the tab key is pressed, rather than spaces.\n5. line wrapping enable line wrapping:\n:set wrap enables text wrapping, so lines that extend past the screen width are wrapped onto the next line.\ndisable line wrapping:\n:set nowrap disables text wrapping, and long lines will scroll horizontally instead of wrapping.\n6. search case sensitivity case-insensitive search:\n:set ignorecase makes searches case-insensitive (e.g., searching for \u0026ldquo;apple\u0026rdquo; will match \u0026ldquo;apple\u0026rdquo;, \u0026ldquo;apple\u0026rdquo;, etc.).\ncase-sensitive search:\n:set noignorecase ensures searches are case-sensitive.\nsmart case search:\n:set smartcase makes searches case-insensitive unless you use an uppercase letter in the search query. for example, searching for \u0026ldquo;apple\u0026rdquo; will match all cases, but searching for \u0026ldquo;apple\u0026rdquo; will only match \u0026ldquo;apple\u0026rdquo;.\n7. auto-completion enable file completion:\n:set wildmenu enhances the command-line completion feature with a graphical menu-like interface.\nenable path completion:\n:set wildmode=list:longest enables more intuitive file path completion on the command line.\n8. backup and swap files disable swap files:\n:set noswapfile disables the creation of swap files. swap files are used for recovering unsaved changes in case of a crash.\nenable backup files:\n:set backup :set backupdir=~/vim-backups enables creating backup files when saving a file and specifies the directory for backups.\ndisable backup files:\n:set nobackup 9. status line customization enable the status line:\n:set laststatus=2 always shows the status line at the bottom of the vim window.\ndisable the status line:\n:set laststatus=0 10. show line and column number enable line and column number display: :set ruler displays the current line and column number in the status line, so you always know your position in the file. 11. mouse support enable mouse support:\n:set mouse=a enables mouse support for selecting text and resizing windows inside vim.\ndisable mouse support:\n:set mouse= 12. vim colorscheme set a colorscheme: :colorscheme desert sets the colorscheme to \u0026ldquo;desert\u0026rdquo; (you can replace desert with any other installed colorscheme like elflord, morning, or industry). 13. line break characters display non-printing characters:\n:set list :set listchars=tab:»·,trail:· this shows special characters like tabs (») and trailing spaces (·), which can be useful for cleaning up your text.\nhide non-printing characters:\n:set nolist these :set commands let you tweak vim to match your workflow and preferences, from simple appearance changes to more advanced features like auto-indentation or search behaviors. once you’ve customized your settings, you can even save them in your .vimrc file to make these changes permanent across sessions.\n.vimrc file the .vimrc file is a configuration file that vim loads at startup, allowing you to customize vim’s behavior. location of the .vimrc file: ~/.vimrc\nbasic structure the .vimrc file contains vim commands for settings, keybindings, and other customizations.\n\u0026#34; enable line numbers set number \u0026#34; enable syntax highlighting syntax enable \u0026#34; set color scheme to \u0026#39;desert\u0026#39; colorscheme desert \u0026#34; enable smart indentation, set tab width and spaces for indentation set smartindent \u0026#34; automatically indent new lines set shiftwidth=4 \u0026#34; indentation width for new lines set tabstop=4 \u0026#34; number of spaces a tab is equal to set expandtab \u0026#34; convert tabs to spaces \u0026#34; ignore case during search and highlight search results set ignorecase \u0026#34; ignore case in searches set hlsearch \u0026#34; highlight search matches \u0026#34; enable mouse support in all modes set mouse=a \u0026#34; mouse can be used in all modes (normal, insert, visual, etc.) \u0026#34; enable backup files and specify backup directory set backup \u0026#34; enable backup files set backupdir=~/vim-backups \u0026#34; set the directory for backup files \u0026#34; automatically set the filetype to python for .py files autocmd bufread,bufnewfile *.py set filetype=python \u0026#34; map \u0026#39;jj\u0026#39; to escape insert mode (useful for avoiding the esc key) inoremap jj \u0026lt;esc\u0026gt; \u0026#34; press \u0026#39;jj\u0026#39; to exit insert mode explanation of comments: line numbers: displays line numbers for easier navigation. syntax highlighting: enables syntax color coding for better readability. color scheme: sets a predefined color scheme for the editor. indentation: configures tab and space behavior to match the desired coding style. search settings: makes searches case-insensitive and highlights matching results. mouse support: allows using the mouse in all vim modes. backup files: enables backups and sets the directory where backup files will be stored. filetype settings: automatically applies file-specific settings based on file extension (e.g., python for .py files). key mapping: allows custom key mappings, such as pressing jj to exit insert mode. waypoints in vim waypoints are useful for marking specific places in your file to quickly return to. this can be especially helpful when navigating through large files. in vim, waypoints are often referred to as marks.\nsetting and using marks: set a mark: to set a mark, press m followed by a letter (a-z). for example, ma sets a mark named a at the current cursor position. jump to a mark: to jump to a specific mark, press ' followed by the mark\u0026rsquo;s letter. for example, 'a takes you to the position where mark a was set. view all marks: you can see a list of all active marks by typing :marks. example: move to a specific line, say line 10. set a mark with ma (mark \u0026ldquo;a\u0026rdquo;). continue editing elsewhere. return to the mark by typing 'a. marks allow you to quickly navigate between important points in your file without needing to rely on line numbers or searching.\nthe :reg command the :reg command in vim allows you to view and manage the contents of vim\u0026rsquo;s registers. registers are temporary storage areas where text is stored when you cut, copy, or paste in vim. this command helps you access these stored texts, allowing for easy retrieval and reuse.\nviewing registers to view the contents of all registers, type :reg and press enter. this will display a list of registers and their contents. using specific registers you can access specific registers by typing :reg followed by the register name. for example, :reg a shows the contents of register a. types of registers: unnamed register (\u0026quot;\u0026quot;): stores text that was last yanked or deleted. named registers (a-z): these are registers that you can explicitly specify when yanking or deleting. you can yank or delete to a specific register with \u0026quot;a, \u0026quot;b, etc. numbered registers (0-9): automatically store text from the most recent yank or delete operations, with 0 holding the most recent yank. special registers: \u0026quot;%: the current file name. \u0026quot;#: the name of the alternate file. \u0026quot;* and \u0026quot;+: access to the system clipboard (if supported). macro registers (q-z): these registers are used to store macros (sequences of commands). by recording a macro, you can save a sequence of commands to a register and replay them later. examples: copying to a register: \u0026quot;ayw: yank a word into register a. pasting from a register: \u0026quot;ap: paste the content of register a. viewing register contents: :reg a: view the contents of register a. saving a macro to a register: press q followed by any register letter (e.g., qa) to start recording a macro into register a perform the desired actions. press q again to stop recording. playing a macro from a register: press @a to replay the macro stored in register a. the :reg command, along with macro functionality, gives you powerful tools to manage and reuse text and commands in vim, enhancing your productivity and workflow.\n","title":"Learning VIM"},{"date":"2024-12-04","image":"","imageAlt":"","link":"/posts/download-vs-code-on-linux/","summary":"This guide explains downloading and installing Visual Studio Code on Linux using a `.deb` file. It includes navigating the website, terminal commands for installation, and a lighthearted waiting tip.","tags":["linux"],"text":" visit the visual studio code download page. download the appropriate .deb file for your system.\nonce the download is complete, open a terminal and run the following command to install it:\nsudo dpkg -i ./the-vscode-.deb-file (replace ./the-vscode-.deb-file with the actual file name you downloaded.)\nthe installation process might take a while, so feel free to grab a snack while it completes.\n","title":"Download VS-Code on Linux"}]
}

