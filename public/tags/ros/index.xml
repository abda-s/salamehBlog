<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>ROS on Abdullah Salameh&#39;s Blog</title>
    <link>/tags/ros/</link>
    <description>Recent content in ROS on Abdullah Salameh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ros/index.xml" rel="self" type="application/rss+xml" /><icon>/logo.svg</icon>
    
    
    <item>
      <title>ROS 2 Cheat Sheets</title>
      <link>/posts/ros-2-cheat-sheets/</link>
      <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/ros-2-cheat-sheets/</guid>
      <description><![CDATA[<p>{{ .TableOfContents }}</p>
<h3 id="ros-2-environment-configuration-cheat-sheet">ROS 2 Environment Configuration Cheat Sheet</h3>
<hr>
<h4 id="commands-and-explanations">Commands and Explanations</h4>
<h4 id="1-source-the-setup-files">1. Source the Setup Files</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>source /opt/ros/&lt;distro&gt;/setup.bash
</span></span></code></pre></div><ul>
<li>Activates ROS 2 in the current shell session by setting necessary environment variables.</li>
<li>Replace <code>&lt;distro&gt;</code> with the name of your installed ROS 2 distribution (e.g., <code>humble</code>, <code>galactic</code>, <code>jazzy</code>).</li>
</ul>
<h4 id="2-add-sourcing-to-shell-startup-script">2. Add Sourcing to Shell Startup Script</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;source /opt/ros/&lt;distro&gt;/setup.bash&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><ul>
<li>Automatically sources ROS 2 every time you open a new shell.</li>
<li>Modify <code>~/.bashrc</code> to include the source command.</li>
</ul>
<p>Undo this step:</p>
<ul>
<li>Edit the <code>~/.bashrc</code> file manually to remove the line added.</li>
</ul>
<h4 id="3-check-environment-variables">3. Check Environment Variables</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>printenv | grep -i ROS
</span></span></code></pre></div><ul>
<li>Verifies if ROS environment variables are correctly set (e.g., <code>ROS_DISTRO</code>, <code>ROS_VERSION</code>).</li>
</ul>
<h4 id="4-set-the-ros_domain_id-variable">4. Set the ROS_DOMAIN_ID Variable</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export ROS_DOMAIN_ID<span style="color:#f92672">=</span>&lt;your_domain_id&gt;
</span></span></code></pre></div><ul>
<li>Sets a unique domain ID for communication between ROS 2 nodes.</li>
<li>Add to <code>~/.bashrc</code> for persistence:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;export ROS_DOMAIN_ID=&lt;your_domain_id&gt;&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><h4 id="5-set-the-ros_automatic_discovery_range-variable">5. Set the ROS_AUTOMATIC_DISCOVERY_RANGE Variable</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export ROS_AUTOMATIC_DISCOVERY_RANGE<span style="color:#f92672">=</span>&lt;range_value&gt;
</span></span></code></pre></div><ul>
<li>Limits ROS 2 discovery range, useful in environments with multiple robots.</li>
<li>Add to <code>~/.bashrc</code> for persistence:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;export ROS_AUTOMATIC_DISCOVERY_RANGE=&lt;range_value&gt;&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><h3 id="turtlesim-and-ros2-cheat-sheet">Turtlesim and ROS2 Cheat Sheet</h3>
<hr>
<h4 id="1-install-turtlesim">1. Install Turtlesim</h4>
<ul>
<li>Install Turtlesim:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt update
</span></span><span style="display:flex;"><span>sudo apt install ros-&lt;ros2-distro&gt;-turtlesim
</span></span></code></pre></div><ul>
<li>Check installed executables:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 pkg executables turtlesim
</span></span></code></pre></div><hr>
<h4 id="2-start-turtlesim">2. Start Turtlesim</h4>
<ul>
<li>Launch the turtlesim node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><hr>
<h4 id="3-control-the-turtle">3. Control the Turtle</h4>
<ul>
<li>Launch the teleop node to control the turtle:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtle_teleop_key
</span></span></code></pre></div><p>Additional ROS2 commands:</p>
<ul>
<li>List active nodes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node list
</span></span></code></pre></div><ul>
<li>List available topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>List available services:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><ul>
<li>List available actions:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action list
</span></span></code></pre></div><hr>
<h4 id="4-install-and-use-rqt">4. Install and Use RQT</h4>
<ul>
<li>Install RQT and plugins:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt update
</span></span><span style="display:flex;"><span>sudo apt install <span style="color:#e6db74">&#39;~nros-&lt;ros2-distro&gt;-rqt*&#39;</span>
</span></span></code></pre></div><ul>
<li>Launch RQT:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rqt
</span></span></code></pre></div><hr>
<h4 id="5-use-rqt-service-caller">5. Use RQT Service Caller</h4>
<ul>
<li>Select the Service Caller plugin:
<ul>
<li>Navigate to: Plugins &gt; Services &gt; Service Caller</li>
</ul>
</li>
<li>Refresh services:
<ul>
<li>Click on the Refresh button.</li>
</ul>
</li>
</ul>
<hr>
<h4 id="6-spawn-a-new-turtle-service-call">6. Spawn a New Turtle (Service Call)</h4>
<ul>
<li>Call the <code>/spawn</code> service (in RQT Service Caller):
<ul>
<li>Name: <code>turtle2</code></li>
<li>Coordinates: <code>x = 1.0</code>, <code>y = 1.0</code></li>
<li>Click Call to spawn a new turtle.</li>
</ul>
</li>
</ul>
<hr>
<h4 id="7-change-pen-settings-service-call">7. Change Pen Settings (Service Call)</h4>
<ul>
<li>Call the <code>/set_pen</code> service (in RQT Service Caller):
<ul>
<li><code>r = 255</code> (red)</li>
<li><code>width = 5</code></li>
<li>Click Call.</li>
</ul>
</li>
</ul>
<hr>
<h4 id="8-remap-topics-for-multiple-turtles">8. Remap Topics for Multiple Turtles</h4>
<ul>
<li>Remap the <code>cmd_vel</code> topic for turtle2:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:<span style="color:#f92672">=</span>turtle2/cmd_vel
</span></span></code></pre></div><hr>
<h4 id="9-stop-turtlesim">9. Stop Turtlesim</h4>
<ul>
<li>Stop the turtlesim node:
<ul>
<li>Press Ctrl + C in the <code>turtlesim_node</code> terminal.</li>
</ul>
</li>
<li>Stop the teleop node:
<ul>
<li>Press q in the <code>turtle_teleop_key</code> terminal.</li>
</ul>
</li>
</ul>
<h3 id="understanding-nodes-in-ros-2-cheat-sheet">Understanding Nodes in ROS 2 Cheat Sheet</h3>
<hr>
<h4 id="the-ros-2-graph">The ROS 2 Graph</h4>
<p>The ROS 2 graph represents the network of ROS 2 elements (nodes, topics, services, etc.) interacting in real-time. A robot system can be visualized as multiple nodes processing data together. Each node in ROS 2 serves a specific modular function (e.g., controlling motors or publishing sensor data).</p>
<hr>
<h4 id="nodes-in-ros-2">Nodes in ROS 2</h4>
<ul>
<li>
<p>What is a Node?<br>
A node is an executable responsible for a specific task (e.g., controlling motors, publishing sensor data) and communicates with other nodes via topics, services, actions, or parameters.</p>
</li>
<li>
<p>Single or Multiple Nodes per Executable:<br>
A single ROS 2 executable (written in C++ or Python) can contain multiple nodes.</p>
</li>
</ul>
<p><img src="/images/Pasted%20image%2020241215001625.png" alt="Image Description"></p>
<hr>
<h4 id="1-ros2-run">1. ros2 run</h4>
<p>The <code>ros2 run</code> command is used to run an executable from a specific package.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run &lt;package_name&gt; &lt;executable_name&gt;
</span></span></code></pre></div><ul>
<li>Example to run the turtlesim:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><p>This will open a window with a turtle in it.</p>
<h4 id="2-ros2-node-list">2. ros2 node list</h4>
<p>To list all active nodes in the ROS 2 system:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node list
</span></span></code></pre></div><h4 id="3-ros2-node-info">3. ros2 node info</h4>
<p>The <code>ros2 node info &lt;node_name&gt;</code> command provides detailed information about a node’s publishers, subscribers, services, and actions.</p>
<ul>
<li>Example to get info about the <code>/turtlesim</code> node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info /turtlesim
</span></span></code></pre></div><h4 id="31-remapping-node-names-and-topics">3.1 Remapping Node Names and Topics</h4>
<ul>
<li>Remap the node name using <code>--ros-args --remap</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --remap __node:<span style="color:#f92672">=</span>my_turtle
</span></span></code></pre></div><ul>
<li>This will rename <code>/turtlesim</code> to <code>/my_turtle</code>. If you run <code>ros2 node list</code>, you will see:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/my_turtle
</span></span><span style="display:flex;"><span>/teleop_turtle
</span></span></code></pre></div><h3 id="ros-2-topic-commands-cheat-sheet">ROS 2 Topic Commands Cheat Sheet</h3>
<hr>
<h4 id="topics-in-ros2">Topics in ROS2</h4>
<ul>
<li>What is a topic
A topic in ROS 2 is a communication channel through which nodes can publish and subscribe to messages, enabling data exchange between them.</li>
</ul>
<p><img src="/images/Pasted%20image%2020241215005244.png" alt="Image Description"></p>
<hr>
<h4 id="1-rqt_graph-graphical-tool">1. rqt_graph (Graphical Tool):</h4>
<ul>
<li>Run rqt_graph to visualize the nodes and topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rqt_graph
</span></span></code></pre></div><ul>
<li>Open via GUI: <code>rqt &gt; Plugins &gt; Introspection &gt; Node Graph</code>.</li>
</ul>
<h4 id="2-ros2-topic-list">2. ros2 topic list:</h4>
<ul>
<li>List all active topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>List topics with types:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list -t
</span></span></code></pre></div><h4 id="3-ros2-topic-echo">3. ros2 topic echo:</h4>
<ul>
<li>Display the data being published on a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: To see <code>/turtle1/cmd_vel</code> data:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo /turtle1/cmd_vel
</span></span></code></pre></div><h4 id="4-ros2-topic-info">4. ros2 topic info:</h4>
<ul>
<li>Get info about a specific topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic info &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Info about <code>/turtle1/cmd_vel</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic info /turtle1/cmd_vel
</span></span></code></pre></div><h4 id="5-ros2-interface-show">5. ros2 interface show:</h4>
<ul>
<li>Show the structure of a message type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show &lt;msg_type&gt;
</span></span></code></pre></div><ul>
<li>Example: For <code>geometry_msgs/msg/Twist</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show geometry_msgs/msg/Twist
</span></span></code></pre></div><h4 id="6-ros2-topic-pub">6. ros2 topic pub:</h4>
<ul>
<li>Publish data to a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub &lt;topic_name&gt; &lt;msg_type&gt; <span style="color:#e6db74">&#34;&lt;args&gt;&#34;</span>
</span></span></code></pre></div><ul>
<li>Example: To continuously move the turtle:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist <span style="color:#e6db74">&#34;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}&#34;</span>
</span></span></code></pre></div><ul>
<li>Publish once:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> ros2 topic pub --once &lt;topic_name&gt; &lt;msg_type&gt; <span style="color:#e6db74">&#34;&lt;args&gt;&#34;</span>
</span></span></code></pre></div><h4 id="7-ros2-topic-hz">7. ros2 topic hz:</h4>
<ul>
<li>View the rate of data publishing:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic hz &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Check the rate for <code>/turtle1/pose</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic hz /turtle1/pose
</span></span></code></pre></div><h4 id="8-ros2-topic-bw">8. ros2 topic bw:</h4>
<ul>
<li>Check bandwidth usage for a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic bw &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Check bandwidth for <code>/turtle1/pose</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic bw /turtle1/pose
</span></span></code></pre></div><h4 id="9-ros2-topic-find">9. ros2 topic find:</h4>
<ul>
<li>Find topics by message type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic find &lt;msg_type&gt;
</span></span></code></pre></div><ul>
<li>Example: Find topics with <code>geometry_msgs/msg/Twist</code> type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic find geometry_msgs/msg/Twist
</span></span></code></pre></div><h3 id="ros-2-services-cheat-sheet">ROS 2 Services Cheat Sheet</h3>
<hr>
<h4 id="services-in-ros2">Services in ROS2:</h4>
<p>Services in ROS 2 follow a call-and-response model, where nodes request data from a service and receive a response. Unlike topics, services only provide data when specifically called by a client.</p>
<p><img src="/images/Pasted%20image%2020241215010056.png" alt="Image Description"></p>
<hr>
<h4 id="1-list-active-services">1. List Active Services:</h4>
<ul>
<li>View all active services in ROS 2:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><h4 id="2-service-type">2. Service Type:</h4>
<ul>
<li>Check the type of a service (e.g., <code>/clear</code>):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service type /clear
</span></span></code></pre></div><h4 id="3-service-info">3. Service Info:</h4>
<ul>
<li>Get info about a service (e.g., <code>/clear</code>):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service info /clear
</span></span></code></pre></div><h4 id="4-find-services-by-type">4. Find Services by Type:</h4>
<ul>
<li>Find services of a specific type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service find std_srvs/srv/Empty
</span></span></code></pre></div><h4 id="5-show-service-interface">5. Show Service Interface:</h4>
<ul>
<li>View the request/response structure of a service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show turtlesim/srv/Spawn
</span></span></code></pre></div><h4 id="6-call-a-service">6. Call a Service:</h4>
<ul>
<li>Call a service with or without arguments:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service call /clear std_srvs/srv/Empty
</span></span><span style="display:flex;"><span>ros2 service call /spawn turtlesim/srv/Spawn <span style="color:#e6db74">&#34;{x: 2, y: 2, theta: 0.2, name: &#39;&#39;}&#34;</span>
</span></span></code></pre></div><h4 id="7-echo-service-data">7. Echo Service Data:</h4>
<ul>
<li>View service communication (request/response):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service echo /add_two_ints
</span></span></code></pre></div><p>Here is the content with the requested headings formatted as <code>####</code>:</p>
<hr>
<h3 id="ros-2-parameters-cheat-sheet">ROS 2 Parameters Cheat Sheet</h3>
<h4 id="parameters-in-ros2">Parameters in ROS2:</h4>
<p>Parameters in ROS 2 are configuration values for nodes, like settings that can be integers, floats, booleans, strings, and lists. Each node can maintain its own parameters.</p>
<h4 id="1-ros2-param-list">1. ros2 param list</h4>
<ul>
<li>List all parameters for all nodes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param list
</span></span></code></pre></div><ul>
<li>Example output:</li>
</ul>
<pre tabindex="0"><code>/teleop_turtle:
	scale_angular
	scale_linear
	use_sim_time
/turtlesim:
	background_b
	background_g
    background_r
    use_sim_time
</code></pre><h4 id="2-ros2-param-get">2. ros2 param get</h4>
<ul>
<li>Get the value and type of a parameter:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param get &lt;node_name&gt; &lt;parameter_name&gt;
</span></span></code></pre></div><ul>
<li>Example to get the value of <code>/turtlesim background_g</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param get /turtlesim background_g
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Integer value is: 86
</code></pre><h4 id="3-ros2-param-set">3. ros2 param set</h4>
<ul>
<li>Change a parameter’s value:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param set &lt;node_name&gt; &lt;parameter_name&gt; &lt;value&gt;
</span></span></code></pre></div><ul>
<li>Example to change <code>/turtlesim background_r</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param set /turtlesim background_r <span style="color:#ae81ff">150</span>
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Set parameter successful
</code></pre><h4 id="4-ros2-param-dump">4. ros2 param dump</h4>
<ul>
<li>View and save a node&rsquo;s parameters to a file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param dump &lt;node_name&gt; &gt; &lt;file_name&gt;.yaml
</span></span></code></pre></div><ul>
<li>Example for <code>/turtlesim</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param dump /turtlesim &gt; turtlesim.yaml
</span></span></code></pre></div><h4 id="5-ros2-param-load">5. ros2 param load</h4>
<ul>
<li>Load parameters from a file into a node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param load &lt;node_name&gt; &lt;parameter_file&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param load /turtlesim turtlesim.yaml
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Set parameter background_b successful
Set parameter background_g successful
Set parameter background_r successful
</code></pre><h4 id="6-load-parameter-file-on-node-startup">6. Load Parameter File on Node Startup</h4>
<ul>
<li>Start a node with saved parameters:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run &lt;package_name&gt; &lt;executable_name&gt; --ros-args --params-file &lt;file_name&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml
</span></span></code></pre></div><p>Here&rsquo;s the version without any tabs before the code blocks:</p>
<hr>
<h3 id="ros-2-actions-cheat-sheet">ROS 2 Actions Cheat Sheet</h3>
<h4 id="overview-of-actions">Overview of Actions</h4>
<ul>
<li>Actions in ROS 2 are for long-running tasks that can be canceled and provide feedback.</li>
<li>Actions are a combination of Goal, Feedback, and Result.</li>
<li>They use a client-server model similar to topics but allow steady feedback and cancellation.</li>
<li>Action Client sends goals to the Action Server, which processes the goal and sends feedback/results.
<img src="/images/Pasted%20image%2020241215011642.png" alt="Image Description"></li>
</ul>
<hr>
<h4 id="1-ros2-node-info">1. ros2 node info</h4>
<ul>
<li>View a node&rsquo;s information, including its actions:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info &lt;node_name&gt;
</span></span></code></pre></div><ul>
<li>Example for <code>/turtlesim</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info /turtlesim
</span></span></code></pre></div><p>This shows the Action Servers and Action Clients for the node.</p>
<h4 id="2-ros2-action-list">2. ros2 action list</h4>
<ul>
<li>List all actions in the ROS graph:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action list
</span></span></code></pre></div><p>This will return available actions such as <code>/turtle1/rotate_absolute</code>.</p>
<h4 id="3-ros2-action-type">3. ros2 action type</h4>
<ul>
<li>Check the action type for a specific action:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action type /turtle1/rotate_absolute
</span></span></code></pre></div><ul>
<li>Output example:</li>
</ul>
<pre tabindex="0"><code>turtlesim/action/RotateAbsolute
</code></pre><h4 id="4-ros2-action-info">4. ros2 action info</h4>
<ul>
<li>View detailed information about an action:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action info /turtle1/rotate_absolute
</span></span></code></pre></div><ul>
<li>Example output:</li>
</ul>
<pre tabindex="0"><code>Action: /turtle1/rotate_absolute
Action clients: 1
    /teleop_turtle
Action servers: 1
    /turtlesim
</code></pre><h4 id="5-ros2-interface-show-1">5. ros2 interface show</h4>
<ul>
<li>Inspect the structure of the action type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show turtlesim/action/RotateAbsolute
</span></span></code></pre></div><ul>
<li>This will show the structure of the goal, result, and feedback:</li>
</ul>
<pre tabindex="0"><code>The desired heading in radians
float32 theta
---
The angular displacement in radians to the starting position
float32 delta
---
The remaining rotation in radians
float32 remaining
</code></pre><h4 id="6-ros2-action-send_goal">6. ros2 action send_goal</h4>
<ul>
<li>Send a goal to an action server:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal &lt;action_name&gt; &lt;action_type&gt; &lt;values&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute <span style="color:#e6db74">&#34;{theta: 1.57}&#34;</span>
</span></span></code></pre></div><ul>
<li>Add <code>--feedback</code> to receive feedback during goal execution:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute <span style="color:#e6db74">&#34;{theta: -1.57}&#34;</span> --feedback
</span></span></code></pre></div><p>Here is the content with only the commands formatted without tabs:</p>
<h3 id="usingrqt_consoleto-view-logs">Using <code>rqt_console</code> to view logs</h3>
<hr>
<h4 id="1-setup">1. Setup</h4>
<p>Start rqt_console in a new terminal with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run rqt_console rqt_console
</span></span></code></pre></div><p>Now, start turtlesim in a new terminal with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><h4 id="2-messages-on-rqt_console">2. Messages on rqt_console</h4>
<p>To produce log messages for rqt_console to display, let’s have the turtle run into the wall. In a new terminal, enter the ros2 topic pub command below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub -r <span style="color:#ae81ff">1</span> /turtle1/cmd_vel geometry_msgs/msg/Twist <span style="color:#e6db74">&#34;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}&#34;</span>
</span></span></code></pre></div><p>Press <code>Ctrl+C</code> in the terminal where you ran the ros2 topic pub command to stop your turtle from running into the wall.</p>
<h4 id="3-set-the-default-logger-level">3. Set the Default Logger Level</h4>
<p>You can set the default logger level when you first run the <code>/turtlesim</code> node using remapping. Enter the following command in your terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --log-level WARN
</span></span></code></pre></div><p>Here is a cheat sheet for recording and playing back data using <code>ros2 bag</code>, excluding the previously mentioned commands:</p>
<h3 id="recording-and-playing-back-data-in-ros-2">Recording and Playing Back Data in ROS 2</h3>
<hr>
<h4 id="managing-topic-data">Managing Topic Data</h4>
<h5 id="1-setup-1">1. Setup</h5>
<ul>
<li>Start the <code>/turtlesim</code> and <code>/teleop_turtle</code> nodes.</li>
<li>Create a directory for saving recordings.</li>
</ul>
<h5 id="2-choose-a-topic">2. Choose a Topic</h5>
<ul>
<li>To list available topics in your system, run:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>To inspect the data of a topic, run:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo &lt;topic_name&gt;
</span></span></code></pre></div><h5 id="3-record-topics">3. Record Topics</h5>
<ul>
<li>Single Topic:<br>
Record a single topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Multiple Topics:<br>
Record multiple topics and specify a custom bag file name:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record -o &lt;file_name&gt; &lt;topic1&gt; &lt;topic2&gt; ...
</span></span></code></pre></div><ul>
<li>Record All Topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record -a
</span></span></code></pre></div><h5 id="4-inspect-topic-data">4. Inspect Topic Data</h5>
<ul>
<li>To see details about a recorded bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag info &lt;bag_file_name&gt;
</span></span></code></pre></div><h5 id="5-play-topic-data">5. Play Topic Data</h5>
<ul>
<li>To replay a bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag play &lt;bag_file_name&gt;
</span></span></code></pre></div><hr>
<h4 id="managing-service-data">Managing Service Data</h4>
<h5 id="1-setup-2">1. Setup</h5>
<ul>
<li>Start the <code>introspection_service</code> and <code>introspection_client</code> nodes with Service Introspection enabled.</li>
</ul>
<h5 id="2-check-service-availability">2. Check Service Availability</h5>
<ul>
<li>List all available services:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><ul>
<li>To check if Service Introspection is enabled on a specific service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service echo --flow-style &lt;service_name&gt;
</span></span></code></pre></div><h5 id="3-record-services">3. Record Services</h5>
<ul>
<li>Record a Specific Service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record --service &lt;service_name&gt;
</span></span></code></pre></div><ul>
<li>Record All Services:</li>
</ul>
<pre tabindex="0"><code>ros2 bag record --all-services
</code></pre><h5 id="4-inspect-service-data">4. Inspect Service Data</h5>
<ul>
<li>To inspect a recorded service data bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag info &lt;bag_file_name&gt;
</span></span></code></pre></div><h5 id="5-play-service-data">5. Play Service Data</h5>
<ul>
<li>To replay service data from the bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag play --publish-service-requests &lt;bag_file_name&gt;
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
  </channel>
</rss>
