<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Posts on Abdullah Salameh&#39;s Blog</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Abdullah Salameh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" /><icon>/logo.svg</icon>
    
    
    <item>
      <title>How to Open Bluetooth Devices with Win &#43; Shift &#43; B Using AutoHotkey</title>
      <link>/posts/how-to-open-bluetooth-devices-with-win-&#43;-shift-&#43;-b-using-autohotkey/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-to-open-bluetooth-devices-with-win-&#43;-shift-&#43;-b-using-autohotkey/</guid>
      <description><![CDATA[<p>If you&rsquo;re looking to streamline your workflow and access Bluetooth settings quickly, using <strong>Win + Shift + B</strong> to open Bluetooth devices is a fantastic shortcut! Here’s a step-by-step guide on how to set it up with <strong>AutoHotkey (AHK)</strong>.</p>
<hr>
<h3 id="step-1-install-autohotkey">Step 1: Install AutoHotkey</h3>
<p>First, you&rsquo;ll need to install AutoHotkey on your system.</p>
<ol>
<li>Go to the <a href="https://www.autohotkey.com/">AutoHotkey website</a> and download the installer.</li>
<li>Follow the instructions to install AutoHotkey on your computer.</li>
</ol>
<hr>
<h3 id="step-2-create-the-autohotkey-script">Step 2: Create the AutoHotkey Script</h3>
<p>Now that you have AutoHotkey installed, you’ll need to create a script that maps the <strong>Win + Shift + B</strong> keyboard shortcut to open Bluetooth settings.</p>
<ol>
<li>
<p><strong>Right-click on your Desktop</strong>, select <strong>New</strong>, and then <strong>AutoHotkey Script</strong>.</p>
</li>
<li>
<p>Name the script <strong>BluetoothShortcut.ahk</strong>.</p>
</li>
<li>
<p><strong>Right-click</strong> the newly created file and select <strong>Edit Script</strong>.</p>
</li>
<li>
<p>Delete any default content inside the file, and paste the following code:</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ahk" data-lang="ahk"><span style="display:flex;"><span>#+b::Run, ms<span style="color:#f92672">-</span>settings<span style="color:#f92672">:</span>bluetooth<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>return<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p><strong>Explanation:</strong>
- <code>#</code> = Win key
- <code>+</code> = Shift key
- <code>b</code> = B key	
This line of code tells AutoHotkey to open Bluetooth settings when <strong>Win + Shift + B</strong> is pressed.</p>
<ol start="5">
<li><strong>Save the file</strong> and <strong>double-click</strong> it to run the script.</li>
</ol>
<p>After this, pressing <strong>Win + Shift + B</strong> will instantly open Bluetooth settings on your Windows machine.</p>
<hr>
<h3 id="step-3-optional-run-on-startup">Step 3 (Optional): Run on Startup</h3>
<p>If you want the script to run automatically every time you boot your computer, you can add it to your startup folder:</p>
<ol>
<li>Press <strong>Win + R</strong>, type <code>shell:startup</code>, and hit <strong>Enter</strong>.</li>
<li>Copy your <strong>BluetoothShortcut.ahk</strong> script file into the <strong>Startup</strong> folder.</li>
</ol>
<p>Now, every time you start Windows, the Bluetooth shortcut will be ready to use! 🎉</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Understanding Incremental Rotary Encoders</title>
      <link>/posts/understanding-incremental-rotary-encoders/</link>
      <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/understanding-incremental-rotary-encoders/</guid>
      <description><![CDATA[<p>A <strong>rotary encoder</strong> is a device that converts the angular position of a shaft into analog or digital output signals. These encoders are commonly used in industrial automation, robotics, and consumer electronics.</p>
<h2 id="types-of-rotary-encoders">Types of Rotary Encoders</h2>
<p>There are two main types of rotary encoders:</p>
<h3 id="absolute-encoders">Absolute Encoders</h3>
<p>An <strong>absolute encoder</strong> maintains position information even when power is removed. It provides the current angular position of the shaft at any given moment.</p>
<h3 id="incremental-encoders">Incremental Encoders</h3>
<p>An <strong>incremental encoder</strong>, on the other hand, does not retain position information when powered off. It provides motion data based on changes from an initial reference point. To determine an absolute position, the system must first move to a known reference angle.</p>
<p>In this article, we will focus on <strong>incremental encoders</strong> and provide a simple ESP32 code to interface with them.</p>
<h2 id="how-incremental-encoders-work">How Incremental Encoders Work</h2>
<p>Incremental encoders have two main output signals:</p>
<ul>
<li><strong>A (Channel A)</strong></li>
<li><strong>B (Channel B)</strong></li>
</ul>
<p>These signals indicate movement and direction when the shaft rotates. Some encoders also include a third signal, <strong>Z</strong>, which serves as a reference point for position calibration.</p>
<h3 id="signal-representation">Signal Representation</h3>
<p>Here is an image illustrating signals <strong>A</strong>, <strong>B</strong>, and <strong>Z</strong>:</p>
<p><img src="/images/moving_disc_with_slits-1771498052.png" alt="Image Description"></p>
<h2 id="quadrature-outputs">Quadrature Outputs</h2>
<p>Incremental encoders employ a <strong>quadrature encoder</strong> to generate their <em>A</em> and <em>B</em> output signals. The pulses from these outputs are quadrature-encoded, meaning that <em>A</em> and <em>B</em> are phase-shifted by 90 degrees when the encoder moves at a constant speed.</p>
<p><img src="/images/Quadrature_Diagram.psd.png" alt="Image Description"></p>
<p>At any given moment, the phase difference between the <em>A</em> and <em>B</em> signals indicates the encoder&rsquo;s rotation direction:</p>
<ul>
<li>
<p>A phase difference of <strong>+90°</strong> corresponds to <strong>clockwise rotation</strong>.</p>
</li>
<li>
<p>A phase difference of <strong>−90°</strong> corresponds to <strong>counterclockwise rotation</strong>.</p>
</li>
</ul>
<p><img src="/images/quadrature-969270470.jpg" alt="Image Description"></p>
<p><img src="/images/Incremental_directional_encoder.gif" alt="Image Description"></p>
<h3 id="quadrature-encoding-table">Quadrature Encoding Table</h3>
<table>
  <thead>
      <tr>
          <th>Step</th>
          <th><code>outputA</code></th>
          <th><code>outputB</code></th>
          <th>Rotation Direction</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>LOW</td>
          <td>LOW</td>
          <td>Start Position</td>
      </tr>
      <tr>
          <td>2</td>
          <td>HIGH</td>
          <td>LOW</td>
          <td>Clockwise</td>
      </tr>
      <tr>
          <td>3</td>
          <td>HIGH</td>
          <td>HIGH</td>
          <td>Clockwise</td>
      </tr>
      <tr>
          <td>4</td>
          <td>LOW</td>
          <td>HIGH</td>
          <td>Clockwise</td>
      </tr>
      <tr>
          <td>5</td>
          <td>LOW</td>
          <td>LOW</td>
          <td>Next Step</td>
      </tr>
      <tr>
          <td>6</td>
          <td>LOW</td>
          <td>HIGH</td>
          <td>Counterclockwise</td>
      </tr>
      <tr>
          <td>7</td>
          <td>HIGH</td>
          <td>HIGH</td>
          <td>Counterclockwise</td>
      </tr>
      <tr>
          <td>8</td>
          <td>HIGH</td>
          <td>LOW</td>
          <td>Counterclockwise</td>
      </tr>
      <tr>
          <td>9</td>
          <td>LOW</td>
          <td>LOW</td>
          <td>Next Step</td>
      </tr>
  </tbody>
</table>
<h2 id="resolution-of-an-incremental-encoder">Resolution of an Incremental Encoder</h2>
<p>The <strong>resolution</strong> of an incremental encoder determines its precision. It is specified as:</p>
<ul>
<li><strong>Pulses per Revolution (PPR)</strong> for rotary encoders.</li>
<li><strong>Pulses per Unit Distance (e.g., mm)</strong> for linear encoders.</li>
</ul>
<p>Each signal edge (rising and falling transitions of <em>A</em> and <em>B</em>) represents a detected position change. Since each full cycle has four edges (rising <em>A</em>, rising <em>B</em>, falling <em>A</em>, falling <em>B</em>), the measurement resolution is <strong>one-fourth of a full <em>A</em> or <em>B</em> output cycle</strong>.</p>
<p>For example, a <strong>1000 pulse-per-revolution (PPR) rotary encoder</strong> has:</p>
<ul>
<li>Per-cycle measurement resolution = <strong>360° / 1000 cycles = 0.36° per pulse</strong></li>
<li>Effective resolution = <strong>0.36° / 4 = 0.09° per edge</strong></li>
</ul>
<h2 id="esp32-code-for-incremental-encoder">ESP32 Code for Incremental Encoder</h2>
<p>Below is a simple <strong>ESP32 Arduino</strong> code to read an incremental rotary encoder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#define outputA 17
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define outputB 16
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">volatile</span> <span style="color:#66d9ef">int</span> counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">volatile</span> <span style="color:#66d9ef">int</span> aLastState;  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> IRAM_ATTR <span style="color:#a6e22e">handleEncoder</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> aState <span style="color:#f92672">=</span> digitalRead(outputA);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (aState <span style="color:#f92672">!=</span> aLastState) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (digitalRead(outputB) <span style="color:#f92672">!=</span> aState) {
</span></span><span style="display:flex;"><span>      counter<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      counter<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  aLastState <span style="color:#f92672">=</span> aState;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setup</span>() {
</span></span><span style="display:flex;"><span>  pinMode(outputA, INPUT);
</span></span><span style="display:flex;"><span>  pinMode(outputB, INPUT);
</span></span><span style="display:flex;"><span>  Serial.begin(<span style="color:#ae81ff">9600</span>);
</span></span><span style="display:flex;"><span>  aLastState <span style="color:#f92672">=</span> digitalRead(outputA);
</span></span><span style="display:flex;"><span>  attachInterrupt(digitalPinToInterrupt(outputA), handleEncoder, CHANGE);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">loop</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> lastCounter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (lastCounter <span style="color:#f92672">!=</span> counter) {
</span></span><span style="display:flex;"><span>    Serial.print(<span style="color:#e6db74">&#34;Position: &#34;</span>);
</span></span><span style="display:flex;"><span>    Serial.println(counter);
</span></span><span style="display:flex;"><span>    lastCounter <span style="color:#f92672">=</span> counter;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="why-use-an-interrupt-instead-of-digitalread-in-the-loop">Why Use an Interrupt Instead of <code>digitalRead</code> in the Loop?</h3>
<p>Using an <strong>interrupt function</strong> (<code>attachInterrupt</code>) allows the microcontroller to <strong>immediately detect</strong> changes in the encoder signal without continuously checking in the <code>loop()</code>. If we used <code>digitalRead</code> in the loop, we might miss some pulses, especially if the encoder rotates quickly. Interrupts ensure <strong>real-time response</strong> to changes in the encoder&rsquo;s state, leading to more accurate readings.</p>
<h3 id="understanding-volatile-and-iram_attr">Understanding <code>volatile</code> and <code>IRAM_ATTR</code></h3>
<ul>
<li>
<p><strong><code>volatile</code></strong>: This keyword tells the compiler that a variable can be modified by an interrupt, preventing optimization that might lead to incorrect behavior.</p>
</li>
<li>
<p><strong><code>IRAM_ATTR</code></strong>: This attribute ensures that the interrupt handler function (<code>handleEncoder</code>) is stored in <strong>IRAM (Instruction RAM)</strong> for faster execution, which is crucial for real-time processing.</p>
</li>
</ul>
<h3 id="why-cant-we-use-serialprint-in-handleencoder">Why Can&rsquo;t We Use <code>Serial.print</code> in <code>handleEncoder</code>?</h3>
<p>The <code>handleEncoder</code> function is an <strong>Interrupt Service Routine (ISR)</strong>, which should execute as quickly as possible. Using <code>Serial.print</code> inside an ISR can cause issues because:</p>
<ul>
<li><strong>Serial communication is slow</strong> compared to ISR execution speed.</li>
<li><strong>Serial functions use interrupts internally</strong>, which may conflict with the encoder ISR.</li>
<li><strong>Delays in ISR execution can cause missed pulses</strong>, leading to inaccurate readings.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Incremental rotary encoders are fundamental in position and motion sensing applications. Understanding how they generate quadrature signals allows precise control and tracking of rotary motion. With an ESP32 and a simple interrupt-driven approach, you can easily integrate an incremental encoder into your projects.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://howtomechatronics.com/tutorials/arduino/rotary-encoder-works-use-arduino/">https://howtomechatronics.com/tutorials/arduino/rotary-encoder-works-use-arduino/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Rotary_encoder">https://en.wikipedia.org/wiki/Rotary_encoder</a></li>
<li><a href="https://en.wikipedia.org/wiki/Incremental_encoder">https://en.wikipedia.org/wiki/Incremental_encoder</a></li>
<li><a href="https://esp32io.com/tutorials/esp32-rotary-encoder">https://esp32io.com/tutorials/esp32-rotary-encoder</a></li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Charging the BYD Seagull: How 8A and 32A Chargers Impact Its LFP Battery</title>
      <link>/posts/charging-the-byd-seagull-how-8a-and-32a-chargers-impact-its-lfp-battery/</link>
      <pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/charging-the-byd-seagull-how-8a-and-32a-chargers-impact-its-lfp-battery/</guid>
      <description><![CDATA[<p>The BYD Seagull is a compact electric vehicle equipped with lithium iron phosphate (LFP) batteries, known for their durability and thermal stability. Understanding how different charging rates affect these batteries is crucial for optimizing both vehicle performance and battery longevity.</p>
<h2 id="byd-seagulls-charging-capabilities">BYD Seagull&rsquo;s Charging Capabilities</h2>
<p>The Seagull offers two battery options: a 30.08 kWh LFP battery and a 38.88 kWh LFP BYD Blade battery. Its charging infrastructure supports:</p>
<ul>
<li><strong>AC Charging</strong>: Up to 6.6 kW</li>
<li><strong>DC Fast Charging</strong>: 30 kW or 40 kW</li>
</ul>
<p>These specifications indicate that the Seagull is designed to handle various charging scenarios, from standard home charging to faster public charging stations.</p>
<h2 id="understanding-c-rates-and-their-impact">Understanding C-Rates and Their Impact</h2>
<p>The C-rate measures the rate at which a battery is charged or discharged relative to its capacity. A 1C rate means charging the entire battery in one hour. For the Seagull&rsquo;s 30.08 kWh battery:</p>
<ul>
<li><strong>1C Rate</strong>: 30.08 kW</li>
<li><strong>0.5C Rate</strong>: 15.04 kW</li>
</ul>
<h2 id="charging-with-an-8a-charger">Charging with an 8A Charger</h2>
<p>An 8-ampere (A) charger operating at 230 volts (V) delivers approximately 1.84 kW (8A × 230V). This translates to a C-rate of about 0.061 for the 30.08 kWh battery (1.84 kW ÷ 30.08 kWh). Such a low C-rate is considered gentle on the battery, minimizing stress and potentially extending its lifespan.</p>
<h2 id="charging-with-a-32a-charger">Charging with a 32A Charger</h2>
<p>A 32A charger at 230V provides around 7.36 kW (32A × 230V). For the 30.08 kWh battery, this results in a C-rate of approximately 0.245 (7.36 kW ÷ 30.08 kWh). This rate is still within the battery&rsquo;s designed AC charging capacity of 6.6 kW, meaning the vehicle’s onboard charger will regulate the charging power accordingly.</p>
<h2 id="research-insights-on-lfp-batteries-and-charging-rates">Research Insights on LFP Batteries and Charging Rates</h2>
<p>Studies have shown that LFP batteries exhibit resilience to higher charging rates. For instance, research indicates that charging at rates up to 4C does not significantly impact the battery&rsquo;s lifespan. Specifically, capacity degradation was 15% at a 1C rate and 17% at a 4C rate after 4,000 cycles, with similar degradation observed up to 1,000 cycles.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The BYD Seagull&rsquo;s onboard charger supports a maximum AC charging power of 6.6 kW. This means that when using a 32A charger at 230V (which can provide up to approximately 7.36 kW), the vehicle&rsquo;s charging system will limit the power to 6.6 kW to stay within its designed capacity. Charging at this rate aligns with the vehicle&rsquo;s specifications and should not adversely affect the longevity of its lithium iron phosphate (LFP) battery. Therefore, utilizing a 32A charger is considered safe and appropriate for maintaining the battery&rsquo;s health.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/BYD_Seagull">https://en.wikipedia.org/wiki/BYD_Seagull</a></li>
<li><a href="https://findingspress.org/api/v1/articles/21459-impact-of-charging-rates-on-electric-vehicle-battery-life.pdf">https://findingspress.org/api/v1/articles/21459-impact-of-charging-rates-on-electric-vehicle-battery-life.pdf</a></li>
<li><a href="https://moscow.sci-hub.ru/5155/011d5b81780c4ac3e787a937c78bd05a/10.1016@j.jpowsour.2016.04.140.pdf">https://moscow.sci-hub.ru/5155/011d5b81780c4ac3e787a937c78bd05a/10.1016@j.jpowsour.2016.04.140.pdf</a></li>
<li><a href="https://acmobility.ph/news/byd-seagull-launch">https://acmobility.ph/news/byd-seagull-launch</a></li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Fixing My Ethernet Cable Issue</title>
      <link>/posts/fixing-my-ethernet-cable-issue/</link>
      <pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/fixing-my-ethernet-cable-issue/</guid>
      <description><![CDATA[<h2 id="the-setup">The Setup</h2>
<p>My father brought an electrician home to wire an Ethernet cable from the router to my room. He ran the cable inside the wall, and everything seemed fine at first. However, when he crimped the RJ-45 connectors, he messed up, and the cable wasn’t working on my laptop. That meant I had to fix it myself.</p>
<p>To do this, I needed:</p>
<ul>
<li>An Ethernet cable tester</li>
<li>An Ethernet crimper</li>
<li>RJ-45 plugs</li>
</ul>
<p>Here’s a photo of each item:</p>
<p><img src="/images/Drawing%202025-02-28%2005.37.43.excalidraw.png" alt="Image Description"></p>
<h2 id="understanding-the-ethernet-cable-tester">Understanding the Ethernet Cable Tester</h2>
<p>Before jumping in, I had to figure out how the Ethernet cable tester actually works. I watched a few YouTube videos and learned that it’s just a connectivity tester. An Ethernet cable has eight wires, and the tester checks each one sequentially. If the wire is properly connected, its corresponding LED blinks. If an LED doesn’t blink, that wire isn’t connected properly, meaning the cable is faulty.</p>
<p>To get comfortable with the tester, I tried it on an already working cable.</p>
<p><img src="/images/IMG-20250228-WA0021.jpg" alt="Image Description"></p>
<p>The LED numbers correspond to the pin numbers in the RJ-45 plug. Here’s an image showing the correct pin numbering:</p>
<p><img src="/images/wmremove-transformed.png" alt="Image Description"></p>
<h2 id="diagnosing-the-issue">Diagnosing the Issue</h2>
<p>Now that I understood how the tester works, I tested the cable the electrician installed. I connected the first part of the tester in the living room and the second part in my bedroom.</p>
<p><img src="/images/Pasted%20image%2020250228061200.png" alt="Image Description"></p>
<p>Here’s a video showing that all LEDs turned on except for number 7. That’s why the cable wasn’t working.</p>
<p><img src="/images/Timeline%201%201.gif" alt="Image Description"></p>
<h2 id="fixing-the-ethernet-cable">Fixing the Ethernet Cable</h2>
<p>To fix the issue, I had to replace the RJ-45 connectors on both ends of the cable. Initially, I only replaced the end in the living room and tested it again. If that fixed the issue, I wouldn’t need to replace the bedroom end. But in the end, I had to change both.</p>
<p>Here’s the YouTube video that helped me with the process: <a href="https://youtu.be/T1Cp9F8qto8?si=mocguZS7ddZXiqb7">Watch it here</a>.</p>
<h3 id="replacing-the-rj-45-plug">Replacing the RJ-45 Plug</h3>
<h4 id="step-1-cutting-the-old-rj-45-plug">Step 1: Cutting the Old RJ-45 Plug</h4>
<p><img src="/images/IMG-20250228-WA0011.jpg" alt="Image Description"></p>
<h4 id="step-2-removing-the-outer-plastic-sheath">Step 2: Removing the Outer Plastic Sheath</h4>
<p><img src="/images/IMG-20250228-WA0007.jpg" alt="Image Description"></p>
<h4 id="step-3-untwisting-the-wires-and-cutting-excess-plastic">Step 3: Untwisting the Wires and Cutting Excess Plastic</h4>
<p><img src="/images/IMG-20250228-WA0006.jpg" alt="Image Description"></p>
<h4 id="step-4-arranging-the-wires-in-the-correct-order">Step 4: Arranging the Wires in the Correct Order</h4>
<p>The correct color order follows the T568A standard:</p>
<p><img src="/images/T568Aworking-3434845376.png" alt="Image Description"></p>
<p>Here’s how it looked after arranging them:</p>
<p><img src="/images/IMG-20250228-WA0004.jpg" alt="Image Description"></p>
<h4 id="step-5-cutting-and-crimping-the-wires">Step 5: Cutting and Crimping the Wires</h4>
<p>After cutting the wires to the correct length, I used the crimper to attach the new RJ-45 plug.</p>
<p>Here’s the final result:</p>
<p><img src="/images/IMG-20250228-WA0001.jpg" alt="Image Description"></p>
<p>I repeated the same process in my bedroom:</p>
<p><img src="/images/IMG-20250228-WA0002.jpg" alt="Image Description"></p>
<h2 id="testing-the-fixed-cable">Testing the Fixed Cable</h2>
<p>I tested the cable again using the tester.</p>
<p>Now, it was time for the moment of truth. I tested the cable one more time using the Ethernet tester, and…</p>
<p><img src="/images/Timeline%202.gif" alt="Image Description"></p>
<p>Success! The tester confirmed that all the LEDs were lighting up correctly.</p>
<p>To be completely sure, I connected one end to the router and the other to my laptop. It worked!</p>
<p><img src="/images/WhatsApp%20Image%202025-02-28%20at%2006.57.16_a9c1cdcd.jpg" alt="Image Description"></p>
<h3 id="conclusion">Conclusion</h3>
<p>This was a fun hands-on experience, and I learned a lot about networking cables, testers, and crimping RJ-45 connectors. Hopefully, this helps anyone dealing with similar issues!</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>SpotX – No Ads on Spotify for Windows</title>
      <link>/posts/spotx--no-ads-on-spotify-for-windows/</link>
      <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/spotx--no-ads-on-spotify-for-windows/</guid>
      <description><![CDATA[<h3 id="-all-the-files-you-need-spotify-client--spotx-are-here">🔗 All the files you need (Spotify client + SpotX) are here:</h3>
<p>📂 <a href="https://drive.google.com/drive/folders/1eZp5y4L_wD7y1c9HiHbB6wscSIWAAx1p?usp=sharing">Google Drive Link</a></p>
<p>If the SpotX GitHub repo is ever down, you can still install everything from this link!</p>
<h2 id="-how-to-install">🚀 How to Install</h2>
<ol>
<li>
<p><strong>Get the Spotify Client</strong></p>
<ul>
<li>Download it from this <strong><a href="https://docs.google.com/spreadsheets/d/1wztO1L4zvNykBRw7X4jxP8pvo11oQjT0O5DvZ_-S4Ok/edit?gid=803394557#gid=803394557">Google Sheets link</a></strong>.</li>
<li>Or grab it from the <a href="https://drive.google.com/drive/folders/1eZp5y4L_wD7y1c9HiHbB6wscSIWAAx1p?usp=sharing">Google Drive</a>.
<img src="/images/Pasted%20image%2020250214232044.png" alt="Image Description"></li>
</ul>
</li>
<li>
<p><strong>Close Spotify</strong> (if it&rsquo;s running).</p>
</li>
<li>
<p><strong>Download SpotX</strong></p>
<ul>
<li>From the <a href="https://drive.google.com/drive/folders/1eZp5y4L_wD7y1c9HiHbB6wscSIWAAx1p?usp=sharing">Google Drive link</a>.</li>
<li>Or get it from the <strong>official repo:</strong> <a href="https://github.com/SpotX-Official/SpotX">GitHub Repo</a>.</li>
</ul>
</li>
<li>
<p><strong>Run the Installer</strong></p>
<ul>
<li>Right-click <code>Install_Auto.bat</code> → <strong>Run as administrator</strong>.</li>
<li>It’ll patch Spotify automatically. Just let it do its thing.
<img src="/images/Pasted%20image%2020250214232212.png" alt="Image Description"></li>
</ul>
</li>
<li>
<p><strong>Open Spotify</strong> and enjoy no ads! 🎶</p>
</li>
</ol>
<h2 id="-extra-info">🔥 Extra Info</h2>
<ul>
<li>Works only with the <strong>desktop</strong> version of Spotify (NOT the Microsoft Store version).</li>
<li>Blocks ads, disables tracking, and enables extra features.</li>
</ul>
<p>That’s it! Enjoy ad-free Spotify. 🚀</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Understanding UART and Serial Communication</title>
      <link>/posts/understanding-uart-and-serial-communication/</link>
      <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/understanding-uart-and-serial-communication/</guid>
      <description><![CDATA[<h1 id="data-transmission">Data Transmission</h1>
<p>Data transmission can be categorized into two main types: <strong>Serial</strong> and <strong>Parallel</strong>. Serial communication, in particular, has several subtypes, including <strong>Asynchronous</strong>, <strong>Synchronous</strong>, and <strong>Isochronous</strong>. In this post, we’ll focus on <strong>UART (Universal Asynchronous Receiver-Transmitter)</strong>, which is an asynchronous method of communication. Unlike synchronous communication, UART does not require devices to share the same clock cycles or be synchronized.</p>
<p><img src="/images/Data%20transmission.png" alt="Image Description"></p>
<hr>
<h2 id="serial-vs-parallel-transmission">Serial vs. Parallel Transmission</h2>
<ul>
<li>
<p><strong>Serial Transmission</strong>: Data is sent one bit at a time over a single communication channel. This method is simpler and more cost-effective but can be slower compared to parallel transmission.</p>
</li>
<li>
<p><strong>Parallel Transmission</strong>: Data is sent in groups of 8 bits (a byte) simultaneously over multiple channels. While faster, it is more complex and expensive due to the need for multiple communication lines.</p>
</li>
</ul>
<p>Both methods enable devices to communicate, but they differ in their approach. Serial transmission is often preferred for its simplicity and lower cost, while parallel transmission is used when speed is critical.</p>
<p><img src="/images/parallel%20vs%20serail.png" alt="Image Description"></p>
<h3 id="key-terms">Key Terms:</h3>
<ul>
<li><strong>MSB (Most Significant Bit)</strong>: The bit with the highest value in a byte (e.g., 2^7).</li>
<li><strong>LSB (Least Significant Bit)</strong>: The bit with the lowest value in a byte (e.g., 2^0).</li>
</ul>
<hr>
<h2 id="serial-transmission">Serial Transmission</h2>
<p>In serial transmission, bits are sent one after another over a single communication channel. This reduces the cost of transmission compared to parallel methods, which require multiple channels. Serial transmission can be implemented in three ways: <strong>asynchronous</strong>, <strong>synchronous</strong>, and <strong>isochronous</strong>.</p>
<hr>
<h3 id="asynchronous-transmission-uart">Asynchronous Transmission (UART)</h3>
<p>Asynchronous transmission does not rely on a shared clock signal between devices. Instead, it uses agreed-upon patterns to communicate data. Each byte of data is framed with a <strong>start bit</strong> and one or more <strong>stop bits</strong>, allowing the receiver to identify the beginning and end of each byte.</p>
<ul>
<li><strong>Start Bit</strong>: A single bit (usually 0) that signals the start of a byte.</li>
<li><strong>Stop Bit(s)</strong>: One or more bits (usually 1s) that signal the end of a byte.</li>
</ul>
<p>Between bytes, there may be a gap or idle time, which helps the receiver prepare for the next byte. The receiver synchronizes with the incoming data stream at the start of each byte, ensuring accurate data interpretation.</p>
<blockquote>
<p><strong>Note</strong>: Asynchronous transmission is &ldquo;asynchronous at the byte level,&rdquo; but the bits within each byte are still synchronized.</p>
</blockquote>
<p><img src="/images/serial%20byte.png" alt="Image Description"></p>
<hr>
<h2 id="uart-universal-asynchronous-receiver-transmitter">UART: Universal Asynchronous Receiver-Transmitter</h2>
<p>UART is a hardware device that facilitates asynchronous serial communication. It uses two wires:</p>
<ul>
<li><strong>Tx (Transmit)</strong>: Sends data from the transmitting device.</li>
<li><strong>Rx (Receive)</strong>: Receives data at the receiving device.</li>
</ul>
<p><img src="/images/Pasted%20image%2020250215052600.png" alt="Image Description"></p>
<p>The communication speed, known as the <strong>baud rate</strong>, must be agreed upon by both devices.</p>
<hr>
<h3 id="baud-rate-how-it-works">Baud Rate: How It Works</h3>
<p>The <strong>baud rate</strong> is a critical parameter in serial communication, especially in UART. It defines the speed at which data is transmitted and received, measured in <strong>bits per second (bps)</strong>. Here’s how it works:</p>
<ol>
<li>
<p><strong>Definition</strong>: The baud rate represents the number of signal changes (symbols) per second. In UART, each symbol typically corresponds to one bit, so the baud rate is often equal to the bit rate.</p>
</li>
<li>
<p><strong>Synchronization</strong>: Both the transmitter and receiver must be configured to use the same baud rate. If they are not synchronized, data will be misinterpreted, leading to communication errors.</p>
</li>
<li>
<p><strong>Common Baud Rates</strong>: Some standard baud rates include 9600, 19200, 38400, 57600, and 115200 bps. Lower baud rates are used for longer distances or noisy environments, while higher baud rates are used for faster communication over shorter distances.</p>
</li>
<li>
<p><strong>Calculation</strong>: The baud rate determines the duration of each bit. For example, at 9600 bps, each bit lasts approximately 104 microseconds (1 second / 9600 bits).</p>
</li>
<li>
<p><strong>Error Tolerance</strong>: The receiver samples the incoming data at the midpoint of each bit. If the baud rates of the transmitter and receiver are slightly mismatched, the sampling point may drift, causing errors. Therefore, precise baud rate configuration is essential.</p>
</li>
</ol>
<hr>
<h3 id="ttl-vs-rs-232">TTL vs. RS-232</h3>
<h4 id="ttl-transistor-transistor-logic">TTL (Transistor-Transistor Logic):</h4>
<ul>
<li>Operates at 5V.</li>
<li>Commonly used in short-range communication.</li>
<li>Not a protocol but refers to the voltage level used by UART.</li>
<li>Example: USB-to-TTL converters.</li>
</ul>
<p><img src="/images/TTL.png" alt="Image Description"></p>
<h4 id="rs-232">RS-232:</h4>
<ul>
<li>Uses higher voltage levels (+/- 12V) for long-range communication.</li>
<li>Voltage levels:
<ul>
<li>-3V to -15V represents a &ldquo;1&rdquo; bit.</li>
<li>+3V to +15V represents a &ldquo;0&rdquo; bit.</li>
</ul>
</li>
<li>Active low logic.</li>
</ul>
<p><img src="/images/RS232.png" alt="Image Description"></p>
<hr>
<h3 id="references">References:</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=JuvWbRhhpdI">YouTube: UART Communication Explained</a></li>
<li><a href="https://www.youtube.com/watch?v=IyGwvGzrqp8">YouTube: Serial vs. Parallel Communication</a></li>
<li><a href="https://www.youtube.com/watch?v=V6m2skVlsQI">YouTube: TTL and RS-232 Explained</a></li>
<li><a href="https://www.youtube.com/watch?v=4xBjrE9csxg">YouTube: Asynchronous Transmission</a></li>
<li><a href="https://www.youtube.com/watch?v=Z-O6PkvYXXs">YouTube: UART Protocol Deep Dive</a></li>
<li><a href="https://dpvipracollege.in/wp-content/uploads/2023/01/Data-Communications-and-Networking-By-Behrouz-A.Forouzan.pdf">Data Communications and Networking by Behrouz A. Forouzan</a></li>
<li><a href="https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter">Wikipedia: Universal Asynchronous Receiver-Transmitter</a></li>
</ul>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Understanding Capacitor Charging and the Concept of Full Charge</title>
      <link>/posts/understanding-capacitor-charging-and-the-concept-of-full-charge/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/understanding-capacitor-charging-and-the-concept-of-full-charge/</guid>
      <description><![CDATA[<p>While taking a <a href="https://youtube.com/playlist?list=PLww54WQ2wa5qVh1p8iPi7HspX7N9hbvbc&amp;si=9h1KH2NZG2lSLsaB">course with Walid Issa</a>, we explored the fascinating behavior of capacitors. During one of the experiments, an interesting observation about capacitor charging sparked my curiosity. My friend <a href="https://www.linkedin.com/in/ahmad-awad-36b481301/">Ahmad Awad</a> and I decided to dive deeper into the topic, conducting research that ultimately led to this blog.</p>
<p>When analyzing capacitors, we often hear that a capacitor is &ldquo;fully charged&rdquo; when the elapsed time equals 5 times the time constant (“5τ”). However, upon closer look, this statement needs some clarification. Let&rsquo;s dive into the theory, practical observations, and what &ldquo;fully charged&rdquo; really means.</p>
<h2 id="observations-from-the-simulation">Observations from the Simulation</h2>
<p><img src="/images/Pasted%20image%2020250121022953.png" alt="Image Description">
<img src="/images/Pasted%20image%2020250121023020.png" alt="Image Description"></p>
<p>In a recent calculation, the capacitor was expected to be fully charged in 0.25 seconds. However, the voltage across the capacitor at this point was 11.923 V instead of the expected 12 V. The error was calculated as:</p>
<p>$$ \frac{12 - 11.923}{12} \times 100 = 0.6% $$</p>
<p>This raised the question: Why is there an error when the capacitor is supposed to be fully charged at 5τ?</p>
<h2 id="the-truth-about-5τ">The Truth About 5τ</h2>
<p>The value of 5τ does not mean the capacitor is 100% charged. Instead, it means the capacitor has reached about 99.3% of its maximum voltage. Using the data from the simulation, we can confirm this:</p>
<p>$$ \frac{11.923}{12} \times 100 = 99.33% $$</p>
<p>This matches the theoretical prediction. While the capacitor seems nearly charged at 5τ, it never fully reaches 100% because of the exponential nature of its charging curve.</p>
<h2 id="theoretical-explanation">Theoretical Explanation</h2>
<p><img src="/images/Pasted%20image%2020250121015614.png" alt="Image Description"></p>
<p>The voltage across a charging capacitor is given by the equation:</p>
<p>$$ V(t) = V_{\text{max}} \left( 1 - e^{-\frac{t}{RC}} \right) $$</p>
<p>where:</p>
<ul>
<li>Vmax is the maximum voltage the capacitor can charge to (12 V in this case).</li>
<li>t is the time elapsed.</li>
<li>RC is the time constant of the circuit.</li>
</ul>
<p>As time passes, $$e^{-t/RC}$$ gets closer to zero.</p>
<p><img src="/images/Pasted%20image%2020250121015737.png" alt="Image Description">
This means it would take infinite time for the capacitor to reach exactly Vmax. In practice, we consider the capacitor &ldquo;fully charged&rdquo; when it’s close enough to Vmax, such as 99.3% at 5τ.</p>
<h2 id="the-simulation-discrepancy">The Simulation Discrepancy</h2>
<p><img src="/images/Pasted%20image%2020250121020039.png" alt="Image Description"></p>
<p>Interestingly, the simulation showed the capacitor reaching exactly 12 V, which seems to go against the theory. Why did this happen?</p>
<ol>
<li><strong>Oscilloscope Precision:</strong> Oscilloscopes show voltages with limited precision. If the capacitor voltage is extremely close to the maximum (e.g., 11.999999 V), the oscilloscope rounds it to 12 V.</li>
<li><strong>Rounding Effects:</strong> The actual voltage might still be slightly below 12 V, but the measuring device’s resolution hides these small differences. Higher-resolution equipment would show the tiny gap.</li>
</ol>
<h2 id="key-takeaways">Key Takeaways</h2>
<ul>
<li>At 5τ, a capacitor is 99.3% charged, not 100%.</li>
<li>It would take infinite time for a capacitor to reach exactly $Vmax$.</li>
<li>Simulations and measurements often show Vmax due to rounding and device limitations.</li>
<li>This approximation is fine for real-world use, as the difference is too small to matter.</li>
</ul>
<p>Understanding these details gives a clearer picture of how capacitors behave and avoids common misunderstandings about what &ldquo;fully charged&rdquo; means.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Setting up ESP32</title>
      <link>/posts/installing-esp32-boards/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/installing-esp32-boards/</guid>
      <description><![CDATA[<ol>
<li>In your Arduino IDE, go to File&gt; Preferences
<img src="/images/cb01610af34d69ff1a3188871c335dcb.png" alt="Image Description"></li>
<li>Enter the following into the “Additional Board Manager URLs” field:</li>
</ol>
<pre tabindex="0"><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
</code></pre><p>Then, click the “OK” button:
<img src="/images/f7abe2e74e2ffe95efd890f0edf59f5a.png" alt="Image Description"></p>
<p><strong>Note</strong>:if you already have the ESP8266 boards URL, you can separate the URLs with a comma as follows</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json
</span></span></code></pre></div><ol start="3">
<li>
<p>Open the Boards Manager. Go to Tools &gt; Board &gt; Boards Manager…
<img src="/images/52d1a8a26fe7b9561762c910a3ec0a93.png" alt="Image Description"></p>
</li>
<li>
<p>Search for ESP32 and press install button for the “ESP32 by Espressif Systems“:
<img src="/images/dd29c64227718cbc1cbccf3384af0775.png" alt="Image Description"></p>
</li>
<li>
<p>That’s it. It should be installed after a few seconds.
<img src="/images/b45bcc6dbf1e890d6af528b697911467.png" alt="Image Description"></p>
</li>
<li>
<p>and don&rsquo;t forget to download the <a href="https://drive.google.com/file/d/1TCEtkAoYKrJs-ypomD6y4LwpcRnMuvAK/view?usp=sharing">drivers</a> for windows</p>
</li>
</ol>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>ROS 2 Cheat Sheets</title>
      <link>/posts/ros-2-cheat-sheets/</link>
      <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/ros-2-cheat-sheets/</guid>
      <description><![CDATA[<h2 id="ros-2-environment-configuration-cheat-sheet">ROS 2 Environment Configuration Cheat Sheet</h2>
<hr>
<h3 id="commands-and-explanations">Commands and Explanations</h3>
<h3 id="1-source-the-setup-files">1. Source the Setup Files</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>source /opt/ros/&lt;distro&gt;/setup.bash
</span></span></code></pre></div><ul>
<li>Activates ROS 2 in the current shell session by setting necessary environment variables.</li>
<li>Replace <code>&lt;distro&gt;</code> with the name of your installed ROS 2 distribution (e.g., <code>humble</code>, <code>galactic</code>, <code>jazzy</code>).</li>
</ul>
<h3 id="2-add-sourcing-to-shell-startup-script">2. Add Sourcing to Shell Startup Script</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;source /opt/ros/&lt;distro&gt;/setup.bash&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><ul>
<li>Automatically sources ROS 2 every time you open a new shell.</li>
<li>Modify <code>~/.bashrc</code> to include the source command.</li>
</ul>
<p>Undo this step:</p>
<ul>
<li>Edit the <code>~/.bashrc</code> file manually to remove the line added.</li>
</ul>
<h3 id="3-check-environment-variables">3. Check Environment Variables</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>printenv | grep -i ROS
</span></span></code></pre></div><ul>
<li>Verifies if ROS environment variables are correctly set (e.g., <code>ROS_DISTRO</code>, <code>ROS_VERSION</code>).</li>
</ul>
<h3 id="4-set-the-ros_domain_id-variable">4. Set the ROS_DOMAIN_ID Variable</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export ROS_DOMAIN_ID<span style="color:#f92672">=</span>&lt;your_domain_id&gt;
</span></span></code></pre></div><ul>
<li>Sets a unique domain ID for communication between ROS 2 nodes.</li>
<li>Add to <code>~/.bashrc</code> for persistence:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;export ROS_DOMAIN_ID=&lt;your_domain_id&gt;&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><h3 id="5-set-the-ros_automatic_discovery_range-variable">5. Set the ROS_AUTOMATIC_DISCOVERY_RANGE Variable</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export ROS_AUTOMATIC_DISCOVERY_RANGE<span style="color:#f92672">=</span>&lt;range_value&gt;
</span></span></code></pre></div><ul>
<li>Limits ROS 2 discovery range, useful in environments with multiple robots.</li>
<li>Add to <code>~/.bashrc</code> for persistence:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;export ROS_AUTOMATIC_DISCOVERY_RANGE=&lt;range_value&gt;&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><h2 id="turtlesim-and-ros2-cheat-sheet">Turtlesim and ROS2 Cheat Sheet</h2>
<hr>
<h3 id="1-install-turtlesim">1. Install Turtlesim</h3>
<ul>
<li>Install Turtlesim:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt update
</span></span><span style="display:flex;"><span>sudo apt install ros-&lt;ros2-distro&gt;-turtlesim
</span></span></code></pre></div><ul>
<li>Check installed executables:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 pkg executables turtlesim
</span></span></code></pre></div><h3 id="2-start-turtlesim">2. Start Turtlesim</h3>
<ul>
<li>Launch the turtlesim node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><h3 id="3-control-the-turtle">3. Control the Turtle</h3>
<ul>
<li>Launch the teleop node to control the turtle:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtle_teleop_key
</span></span></code></pre></div><p>Additional ROS2 commands:</p>
<ul>
<li>List active nodes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node list
</span></span></code></pre></div><ul>
<li>List available topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>List available services:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><ul>
<li>List available actions:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action list
</span></span></code></pre></div><h3 id="4-install-and-use-rqt">4. Install and Use RQT</h3>
<ul>
<li>Install RQT and plugins:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt update
</span></span><span style="display:flex;"><span>sudo apt install <span style="color:#e6db74">&#39;~nros-&lt;ros2-distro&gt;-rqt*&#39;</span>
</span></span></code></pre></div><ul>
<li>Launch RQT:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rqt
</span></span></code></pre></div><h3 id="5-use-rqt-service-caller">5. Use RQT Service Caller</h3>
<ul>
<li>Select the Service Caller plugin:
<ul>
<li>Navigate to: Plugins &gt; Services &gt; Service Caller</li>
</ul>
</li>
<li>Refresh services:
<ul>
<li>Click on the Refresh button.</li>
</ul>
</li>
</ul>
<h3 id="6-spawn-a-new-turtle-service-call">6. Spawn a New Turtle (Service Call)</h3>
<ul>
<li>Call the <code>/spawn</code> service (in RQT Service Caller):
<ul>
<li>Name: <code>turtle2</code></li>
<li>Coordinates: <code>x = 1.0</code>, <code>y = 1.0</code></li>
<li>Click Call to spawn a new turtle.</li>
</ul>
</li>
</ul>
<h3 id="7-change-pen-settings-service-call">7. Change Pen Settings (Service Call)</h3>
<ul>
<li>Call the <code>/set_pen</code> service (in RQT Service Caller):
<ul>
<li><code>r = 255</code> (red)</li>
<li><code>width = 5</code></li>
<li>Click Call.</li>
</ul>
</li>
</ul>
<h3 id="8-remap-topics-for-multiple-turtles">8. Remap Topics for Multiple Turtles</h3>
<ul>
<li>Remap the <code>cmd_vel</code> topic for turtle2:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:<span style="color:#f92672">=</span>turtle2/cmd_vel
</span></span></code></pre></div><h3 id="9-stop-turtlesim">9. Stop Turtlesim</h3>
<ul>
<li>Stop the turtlesim node:
<ul>
<li>Press Ctrl + C in the <code>turtlesim_node</code> terminal.</li>
</ul>
</li>
<li>Stop the teleop node:
<ul>
<li>Press q in the <code>turtle_teleop_key</code> terminal.</li>
</ul>
</li>
</ul>
<h2 id="understanding-nodes-in-ros-2-cheat-sheet">Understanding Nodes in ROS 2 Cheat Sheet</h2>
<hr>
<h3 id="the-ros-2-graph">The ROS 2 Graph</h3>
<p>The ROS 2 graph represents the network of ROS 2 elements (nodes, topics, services, etc.) interacting in real-time. A robot system can be visualized as multiple nodes processing data together. Each node in ROS 2 serves a specific modular function (e.g., controlling motors or publishing sensor data).</p>
<hr>
<h3 id="nodes-in-ros-2">Nodes in ROS 2</h3>
<ul>
<li>
<p>What is a Node?<br>
A node is an executable responsible for a specific task (e.g., controlling motors, publishing sensor data) and communicates with other nodes via topics, services, actions, or parameters.</p>
</li>
<li>
<p>Single or Multiple Nodes per Executable:<br>
A single ROS 2 executable (written in C++ or Python) can contain multiple nodes.</p>
</li>
</ul>
<p><img src="Pasted%20image%2020241215001625.png" alt="Image Description"></p>
<hr>
<h3 id="1-ros2-run">1. ros2 run</h3>
<p>The <code>ros2 run</code> command is used to run an executable from a specific package.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run &lt;package_name&gt; &lt;executable_name&gt;
</span></span></code></pre></div><ul>
<li>Example to run the turtlesim:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><p>This will open a window with a turtle in it.</p>
<h3 id="2-ros2-node-list">2. ros2 node list</h3>
<p>To list all active nodes in the ROS 2 system:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node list
</span></span></code></pre></div><h3 id="3-ros2-node-info">3. ros2 node info</h3>
<p>The <code>ros2 node info &lt;node_name&gt;</code> command provides detailed information about a node’s publishers, subscribers, services, and actions.</p>
<ul>
<li>Example to get info about the <code>/turtlesim</code> node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info /turtlesim
</span></span></code></pre></div><h3 id="31-remapping-node-names-and-topics">3.1 Remapping Node Names and Topics</h3>
<ul>
<li>Remap the node name using <code>--ros-args --remap</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --remap __node:<span style="color:#f92672">=</span>my_turtle
</span></span></code></pre></div><ul>
<li>This will rename <code>/turtlesim</code> to <code>/my_turtle</code>. If you run <code>ros2 node list</code>, you will see:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/my_turtle
</span></span><span style="display:flex;"><span>/teleop_turtle
</span></span></code></pre></div><h2 id="ros-2-topic-commands-cheat-sheet">ROS 2 Topic Commands Cheat Sheet</h2>
<hr>
<h3 id="topics-in-ros2">Topics in ROS2</h3>
<ul>
<li>What is a topic
A topic in ROS 2 is a communication channel through which nodes can publish and subscribe to messages, enabling data exchange between them.</li>
</ul>
<p><img src="Pasted%20image%2020241215005244.png" alt="Image Description"></p>
<hr>
<h3 id="1-rqt_graph-graphical-tool">1. rqt_graph (Graphical Tool):</h3>
<ul>
<li>Run rqt_graph to visualize the nodes and topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rqt_graph
</span></span></code></pre></div><ul>
<li>Open via GUI: <code>rqt &gt; Plugins &gt; Introspection &gt; Node Graph</code>.</li>
</ul>
<h3 id="2-ros2-topic-list">2. ros2 topic list:</h3>
<ul>
<li>List all active topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>List topics with types:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list -t
</span></span></code></pre></div><h3 id="3-ros2-topic-echo">3. ros2 topic echo:</h3>
<ul>
<li>Display the data being published on a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: To see <code>/turtle1/cmd_vel</code> data:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo /turtle1/cmd_vel
</span></span></code></pre></div><h3 id="4-ros2-topic-info">4. ros2 topic info:</h3>
<ul>
<li>Get info about a specific topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic info &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Info about <code>/turtle1/cmd_vel</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic info /turtle1/cmd_vel
</span></span></code></pre></div><h3 id="5-ros2-interface-show">5. ros2 interface show:</h3>
<ul>
<li>Show the structure of a message type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show &lt;msg_type&gt;
</span></span></code></pre></div><ul>
<li>Example: For <code>geometry_msgs/msg/Twist</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show geometry_msgs/msg/Twist
</span></span></code></pre></div><h3 id="6-ros2-topic-pub">6. ros2 topic pub:</h3>
<ul>
<li>Publish data to a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub &lt;topic_name&gt; &lt;msg_type&gt; <span style="color:#e6db74">&#34;&lt;args&gt;&#34;</span>
</span></span></code></pre></div><ul>
<li>Example: To continuously move the turtle:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist <span style="color:#e6db74">&#34;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}&#34;</span>
</span></span></code></pre></div><ul>
<li>Publish once:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> ros2 topic pub --once &lt;topic_name&gt; &lt;msg_type&gt; <span style="color:#e6db74">&#34;&lt;args&gt;&#34;</span>
</span></span></code></pre></div><h3 id="7-ros2-topic-hz">7. ros2 topic hz:</h3>
<ul>
<li>View the rate of data publishing:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic hz &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Check the rate for <code>/turtle1/pose</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic hz /turtle1/pose
</span></span></code></pre></div><h3 id="8-ros2-topic-bw">8. ros2 topic bw:</h3>
<ul>
<li>Check bandwidth usage for a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic bw &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Check bandwidth for <code>/turtle1/pose</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic bw /turtle1/pose
</span></span></code></pre></div><h3 id="9-ros2-topic-find">9. ros2 topic find:</h3>
<ul>
<li>Find topics by message type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic find &lt;msg_type&gt;
</span></span></code></pre></div><ul>
<li>Example: Find topics with <code>geometry_msgs/msg/Twist</code> type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic find geometry_msgs/msg/Twist
</span></span></code></pre></div><h2 id="ros-2-services-cheat-sheet">ROS 2 Services Cheat Sheet</h2>
<hr>
<h3 id="services-in-ros2">Services in ROS2:</h3>
<p>Services in ROS 2 follow a call-and-response model, where nodes request data from a service and receive a response. Unlike topics, services only provide data when specifically called by a client.</p>
<p><img src="Pasted%20image%2020241215010056.png" alt="Image Description"></p>
<hr>
<h3 id="1-list-active-services">1. List Active Services:</h3>
<ul>
<li>View all active services in ROS 2:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><h3 id="2-service-type">2. Service Type:</h3>
<ul>
<li>Check the type of a service (e.g., <code>/clear</code>):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service type /clear
</span></span></code></pre></div><h3 id="3-service-info">3. Service Info:</h3>
<ul>
<li>Get info about a service (e.g., <code>/clear</code>):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service info /clear
</span></span></code></pre></div><h3 id="4-find-services-by-type">4. Find Services by Type:</h3>
<ul>
<li>Find services of a specific type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service find std_srvs/srv/Empty
</span></span></code></pre></div><h3 id="5-show-service-interface">5. Show Service Interface:</h3>
<ul>
<li>View the request/response structure of a service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show turtlesim/srv/Spawn
</span></span></code></pre></div><h3 id="6-call-a-service">6. Call a Service:</h3>
<ul>
<li>Call a service with or without arguments:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service call /clear std_srvs/srv/Empty
</span></span><span style="display:flex;"><span>ros2 service call /spawn turtlesim/srv/Spawn <span style="color:#e6db74">&#34;{x: 2, y: 2, theta: 0.2, name: &#39;&#39;}&#34;</span>
</span></span></code></pre></div><h3 id="7-echo-service-data">7. Echo Service Data:</h3>
<ul>
<li>View service communication (request/response):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service echo /add_two_ints
</span></span></code></pre></div><p>Here is the content with the requested headings formatted as <code>####</code>:</p>
<hr>
<h2 id="ros-2-parameters-cheat-sheet">ROS 2 Parameters Cheat Sheet</h2>
<h3 id="parameters-in-ros2">Parameters in ROS2:</h3>
<p>Parameters in ROS 2 are configuration values for nodes, like settings that can be integers, floats, booleans, strings, and lists. Each node can maintain its own parameters.</p>
<h3 id="1-ros2-param-list">1. ros2 param list</h3>
<ul>
<li>List all parameters for all nodes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param list
</span></span></code></pre></div><ul>
<li>Example output:</li>
</ul>
<pre tabindex="0"><code>/teleop_turtle:
	scale_angular
	scale_linear
	use_sim_time
/turtlesim:
	background_b
	background_g
    background_r
    use_sim_time
</code></pre><h3 id="2-ros2-param-get">2. ros2 param get</h3>
<ul>
<li>Get the value and type of a parameter:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param get &lt;node_name&gt; &lt;parameter_name&gt;
</span></span></code></pre></div><ul>
<li>Example to get the value of <code>/turtlesim background_g</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param get /turtlesim background_g
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Integer value is: 86
</code></pre><h3 id="3-ros2-param-set">3. ros2 param set</h3>
<ul>
<li>Change a parameter’s value:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param set &lt;node_name&gt; &lt;parameter_name&gt; &lt;value&gt;
</span></span></code></pre></div><ul>
<li>Example to change <code>/turtlesim background_r</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param set /turtlesim background_r <span style="color:#ae81ff">150</span>
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Set parameter successful
</code></pre><h3 id="4-ros2-param-dump">4. ros2 param dump</h3>
<ul>
<li>View and save a node&rsquo;s parameters to a file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param dump &lt;node_name&gt; &gt; &lt;file_name&gt;.yaml
</span></span></code></pre></div><ul>
<li>Example for <code>/turtlesim</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param dump /turtlesim &gt; turtlesim.yaml
</span></span></code></pre></div><h3 id="5-ros2-param-load">5. ros2 param load</h3>
<ul>
<li>Load parameters from a file into a node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param load &lt;node_name&gt; &lt;parameter_file&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param load /turtlesim turtlesim.yaml
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Set parameter background_b successful
Set parameter background_g successful
Set parameter background_r successful
</code></pre><h3 id="6-load-parameter-file-on-node-startup">6. Load Parameter File on Node Startup</h3>
<ul>
<li>Start a node with saved parameters:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run &lt;package_name&gt; &lt;executable_name&gt; --ros-args --params-file &lt;file_name&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml
</span></span></code></pre></div><p>Here&rsquo;s the version without any tabs before the code blocks:</p>
<hr>
<h2 id="ros-2-actions-cheat-sheet">ROS 2 Actions Cheat Sheet</h2>
<h3 id="overview-of-actions">Overview of Actions</h3>
<ul>
<li>Actions in ROS 2 are for long-running tasks that can be canceled and provide feedback.</li>
<li>Actions are a combination of Goal, Feedback, and Result.</li>
<li>They use a client-server model similar to topics but allow steady feedback and cancellation.</li>
<li>Action Client sends goals to the Action Server, which processes the goal and sends feedback/results.
<img src="Pasted%20image%2020241215011642.png" alt="Image Description"></li>
</ul>
<hr>
<h3 id="1-ros2-node-info">1. ros2 node info</h3>
<ul>
<li>View a node&rsquo;s information, including its actions:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info &lt;node_name&gt;
</span></span></code></pre></div><ul>
<li>Example for <code>/turtlesim</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info /turtlesim
</span></span></code></pre></div><p>This shows the Action Servers and Action Clients for the node.</p>
<h3 id="2-ros2-action-list">2. ros2 action list</h3>
<ul>
<li>List all actions in the ROS graph:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action list
</span></span></code></pre></div><p>This will return available actions such as <code>/turtle1/rotate_absolute</code>.</p>
<h3 id="3-ros2-action-type">3. ros2 action type</h3>
<ul>
<li>Check the action type for a specific action:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action type /turtle1/rotate_absolute
</span></span></code></pre></div><ul>
<li>Output example:</li>
</ul>
<pre tabindex="0"><code>turtlesim/action/RotateAbsolute
</code></pre><h3 id="4-ros2-action-info">4. ros2 action info</h3>
<ul>
<li>View detailed information about an action:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action info /turtle1/rotate_absolute
</span></span></code></pre></div><ul>
<li>Example output:</li>
</ul>
<pre tabindex="0"><code>Action: /turtle1/rotate_absolute
Action clients: 1
    /teleop_turtle
Action servers: 1
    /turtlesim
</code></pre><h3 id="5-ros2-interface-show-1">5. ros2 interface show</h3>
<ul>
<li>Inspect the structure of the action type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show turtlesim/action/RotateAbsolute
</span></span></code></pre></div><ul>
<li>This will show the structure of the goal, result, and feedback:</li>
</ul>
<pre tabindex="0"><code>The desired heading in radians
float32 theta
---
The angular displacement in radians to the starting position
float32 delta
---
The remaining rotation in radians
float32 remaining
</code></pre><h3 id="6-ros2-action-send_goal">6. ros2 action send_goal</h3>
<ul>
<li>Send a goal to an action server:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal &lt;action_name&gt; &lt;action_type&gt; &lt;values&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute <span style="color:#e6db74">&#34;{theta: 1.57}&#34;</span>
</span></span></code></pre></div><ul>
<li>Add <code>--feedback</code> to receive feedback during goal execution:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute <span style="color:#e6db74">&#34;{theta: -1.57}&#34;</span> --feedback
</span></span></code></pre></div><p>Here is the content with only the commands formatted without tabs:</p>
<h2 id="usingrqt_consoleto-view-logs">Using <code>rqt_console</code> to view logs</h2>
<hr>
<h3 id="1-setup">1. Setup</h3>
<p>Start rqt_console in a new terminal with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run rqt_console rqt_console
</span></span></code></pre></div><p>Now, start turtlesim in a new terminal with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><h3 id="2-messages-on-rqt_console">2. Messages on rqt_console</h3>
<p>To produce log messages for rqt_console to display, let’s have the turtle run into the wall. In a new terminal, enter the ros2 topic pub command below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub -r <span style="color:#ae81ff">1</span> /turtle1/cmd_vel geometry_msgs/msg/Twist <span style="color:#e6db74">&#34;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}&#34;</span>
</span></span></code></pre></div><p>Press <code>Ctrl+C</code> in the terminal where you ran the ros2 topic pub command to stop your turtle from running into the wall.</p>
<h3 id="3-set-the-default-logger-level">3. Set the Default Logger Level</h3>
<p>You can set the default logger level when you first run the <code>/turtlesim</code> node using remapping. Enter the following command in your terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --log-level WARN
</span></span></code></pre></div><p>Here is a cheat sheet for recording and playing back data using <code>ros2 bag</code>, excluding the previously mentioned commands:</p>
<h2 id="recording-and-playing-back-data-in-ros-2">Recording and Playing Back Data in ROS 2</h2>
<hr>
<h3 id="managing-topic-data">Managing Topic Data</h3>
<h4 id="1-setup-1">1. Setup</h4>
<ul>
<li>Start the <code>/turtlesim</code> and <code>/teleop_turtle</code> nodes.</li>
<li>Create a directory for saving recordings.</li>
</ul>
<h4 id="2-choose-a-topic">2. Choose a Topic</h4>
<ul>
<li>To list available topics in your system, run:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>To inspect the data of a topic, run:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo &lt;topic_name&gt;
</span></span></code></pre></div><h4 id="3-record-topics">3. Record Topics</h4>
<ul>
<li>Single Topic:<br>
Record a single topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Multiple Topics:<br>
Record multiple topics and specify a custom bag file name:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record -o &lt;file_name&gt; &lt;topic1&gt; &lt;topic2&gt; ...
</span></span></code></pre></div><ul>
<li>Record All Topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record -a
</span></span></code></pre></div><h4 id="4-inspect-topic-data">4. Inspect Topic Data</h4>
<ul>
<li>To see details about a recorded bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag info &lt;bag_file_name&gt;
</span></span></code></pre></div><h4 id="5-play-topic-data">5. Play Topic Data</h4>
<ul>
<li>To replay a bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag play &lt;bag_file_name&gt;
</span></span></code></pre></div><hr>
<h3 id="managing-service-data">Managing Service Data</h3>
<h4 id="1-setup-2">1. Setup</h4>
<ul>
<li>Start the <code>introspection_service</code> and <code>introspection_client</code> nodes with Service Introspection enabled.</li>
</ul>
<h4 id="2-check-service-availability">2. Check Service Availability</h4>
<ul>
<li>List all available services:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><ul>
<li>To check if Service Introspection is enabled on a specific service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service echo --flow-style &lt;service_name&gt;
</span></span></code></pre></div><h4 id="3-record-services">3. Record Services</h4>
<ul>
<li>Record a Specific Service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record --service &lt;service_name&gt;
</span></span></code></pre></div><ul>
<li>Record All Services:</li>
</ul>
<pre tabindex="0"><code>ros2 bag record --all-services
</code></pre><h4 id="4-inspect-service-data">4. Inspect Service Data</h4>
<ul>
<li>To inspect a recorded service data bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag info &lt;bag_file_name&gt;
</span></span></code></pre></div><h4 id="5-play-service-data">5. Play Service Data</h4>
<ul>
<li>To replay service data from the bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag play --publish-service-requests &lt;bag_file_name&gt;
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Setting up ESP8266</title>
      <link>/posts/setting-up-esp8266/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/setting-up-esp8266/</guid>
      <description><![CDATA[<h1 id="esp8266-diagram">esp8266 Diagram</h1>
<p><img src="/images/8a1901b6b834b9f702bc8b98f1865959.png" alt="Image Description"></p>
<ol>
<li>
<p>In your Arduino IDE, go to File&gt; Preferences
<img src="/images/25c1dcb22468c322c64fae03eeb38268.png" alt="Image Description"></p>
</li>
<li>
<p>Enter the following into the “Additional Board Manager URLs” field:</p>
</li>
</ol>
<pre tabindex="0"><code> http://arduino.esp8266.com/stable/package_esp8266com_index.json
</code></pre><p>click the “OK” button:
<img src="/images/cb2a6a5bc38d8fb0ed3c738c7666fb57.png" alt="Image Description">
<strong>Note</strong>:if you already have the ESP8266 boards URL, you can separate the URLs with a comma as follows</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>https://dl.espressif.com/dl/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json
</span></span></code></pre></div><ol start="3">
<li>
<p>Open the Boards Manager. Go to Tools &gt; Board &gt; Boards Manager…
<img src="/images/dca58c790d2582c1a35485c0f4eeb457.png" alt="Image Description"></p>
</li>
<li>
<p>Search for ESP8266 and press install button for the “ESP32 by Espressif Systems“:
<img src="/images/4cf3bafdc181e501c758294e42974b24.png" alt="Image Description"></p>
</li>
<li>
<p>That’s it. It should be installed after a few seconds.
<img src="/images/aa1a8bef9d8e750951f1346f42f92aed.png" alt="Image Description"></p>
</li>
</ol>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>A Beginner&#39;s Guide to Object-Oriented Programming (OOP) in Python</title>
      <link>/posts/oop-in-python/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/oop-in-python/</guid>
      <description><![CDATA[<h3 id="a-beginners-guide-to-object-oriented-programming-oop-in-python">A Beginner&rsquo;s Guide to Object-Oriented Programming (OOP) in Python</h3>
<p>Object-oriented programming (OOP) is a cornerstone programming paradigm in Python. It allows developers to create reusable and modular code by organizing functionality into objects, which are instances of classes. In this guide, we’ll walk you through the basics of OOP, including key concepts like inheritance and the <code>super()</code> function, and provide practical examples to help you get started.</p>
<hr>
<h3 id="what-are-objects">What Are Objects?</h3>
<p>Objects are the building blocks of OOP. In Python, <strong>everything is an object</strong>, from simple data types like integers and strings to complex data structures and functions. When you create a variable, you&rsquo;re actually creating an object of a specific type (or class).</p>
<h4 id="example-numbers-and-strings-as-objects">Example: Numbers and Strings as Objects</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>print(type(x))  <span style="color:#75715e"># Output: &lt;class &#39;int&#39;&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>greeting <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello&#34;</span>
</span></span><span style="display:flex;"><span>print(type(greeting))  <span style="color:#75715e"># Output: &lt;class &#39;str&#39;&gt;</span>
</span></span></code></pre></div><p>Even collections like lists are objects:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>print(type(numbers))  <span style="color:#75715e"># Output: &lt;class &#39;list&#39;&gt;</span>
</span></span></code></pre></div><hr>
<h3 id="built-in-methods">Built-in Methods</h3>
<p>Each object type in Python comes with its own set of methods—functions that can be used to manipulate or interact with the object. These methods are accessed using dot notation.</p>
<h4 id="example-string-methods">Example: String Methods</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>greeting <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello&#34;</span>
</span></span><span style="display:flex;"><span>print(greeting<span style="color:#f92672">.</span>upper())  <span style="color:#75715e"># Output: HELLO</span>
</span></span></code></pre></div><h4 id="example-list-methods">Example: List Methods</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>numbers<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>print(numbers)  <span style="color:#75715e"># Output: [1, 2, 3, 4]</span>
</span></span></code></pre></div><p>However, methods are type-specific. Trying to call a string method on an integer will result in an error:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>print(x<span style="color:#f92672">.</span>upper())  <span style="color:#75715e"># Raises AttributeError</span>
</span></span></code></pre></div><hr>
<h3 id="creating-custom-classes">Creating Custom Classes</h3>
<p>Python lets you define your own classes to create custom objects tailored to your needs. A class serves as a blueprint for creating objects, and each object is an instance of that class.</p>
<h4 id="example-defining-a-simple-class">Example: Defining a Simple Class</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bark</span>(self):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Woof!&#34;</span>)
</span></span></code></pre></div><p>You can create an instance (object) of the <code>Dog</code> class and use its method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>my_dog <span style="color:#f92672">=</span> Dog()
</span></span><span style="display:flex;"><span>my_dog<span style="color:#f92672">.</span>bark()  <span style="color:#75715e"># Output: Woof!</span>
</span></span></code></pre></div><hr>
<h3 id="attributes-and-methods">Attributes and Methods</h3>
<p>Classes can have attributes (data) and methods (functions). These define the properties and behaviors of objects created from the class. To initialize attributes, you use the special <code>__init__</code> method, which is automatically called when an object is created.</p>
<h4 id="example-adding-attributes-with-__init__">Example: Adding Attributes with <code>__init__</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, name, age):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>age <span style="color:#f92672">=</span> age
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bark</span>(self):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74"> says Woof!&#34;</span>)
</span></span></code></pre></div><p>Here’s how you can use this class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>my_dog <span style="color:#f92672">=</span> Dog(<span style="color:#e6db74">&#34;Buddy&#34;</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>print(my_dog<span style="color:#f92672">.</span>name)  <span style="color:#75715e"># Output: Buddy</span>
</span></span><span style="display:flex;"><span>print(my_dog<span style="color:#f92672">.</span>age)   <span style="color:#75715e"># Output: 3</span>
</span></span><span style="display:flex;"><span>my_dog<span style="color:#f92672">.</span>bark()       <span style="color:#75715e"># Output: Buddy says Woof!</span>
</span></span></code></pre></div><hr>
<h3 id="inheritance-and-the-super-function">Inheritance and the <code>super()</code> Function</h3>
<p>Inheritance allows one class (child class) to derive attributes and methods from another class (parent class). This is particularly useful for code reuse and extension.</p>
<p>When a child class overrides the <code>__init__</code> method, it’s important to ensure that the parent class’s <code>__init__</code> method is called. This is done using the <code>super().__init__()</code> function.</p>
<h4 id="example-using-super__init__-in-a-subclass">Example: Using <code>super().__init__()</code> in a Subclass</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, species):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>species <span style="color:#f92672">=</span> species
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span>(Animal):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, name, age, species<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Dog&#34;</span>):
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(species)  <span style="color:#75715e"># Initialize parent class attributes</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>age <span style="color:#f92672">=</span> age
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bark</span>(self):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">, the </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>species<span style="color:#e6db74">}</span><span style="color:#e6db74">, says Woof!&#34;</span>)
</span></span></code></pre></div><p>Here’s how it works:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>my_dog <span style="color:#f92672">=</span> Dog(<span style="color:#e6db74">&#34;Buddy&#34;</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>print(my_dog<span style="color:#f92672">.</span>species)  <span style="color:#75715e"># Output: Dog</span>
</span></span><span style="display:flex;"><span>my_dog<span style="color:#f92672">.</span>bark()          <span style="color:#75715e"># Output: Buddy, the Dog, says Woof!</span>
</span></span></code></pre></div><p>In this example:</p>
<ul>
<li>The <code>Animal</code> class serves as the parent class.</li>
<li>The <code>Dog</code> class extends <code>Animal</code> and adds its own attributes (<code>name</code> and <code>age</code>).</li>
<li>The <code>super().__init__(species)</code> call ensures the <code>species</code> attribute from <code>Animal</code> is properly initialized.</li>
</ul>
<hr>
<h3 id="class-and-static-methods">Class and Static Methods</h3>
<p>In addition to instance methods, Python supports class methods and static methods:</p>
<ul>
<li><strong>Class methods</strong> work at the class level and are defined using the <code>@classmethod</code> decorator.</li>
<li><strong>Static methods</strong> don’t access class or instance attributes and are defined with the <code>@staticmethod</code> decorator.</li>
</ul>
<h4 id="example-class-method">Example: Class Method</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span>:
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, name):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>        Animal<span style="color:#f92672">.</span>count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@classmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_count</span>(cls):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> cls<span style="color:#f92672">.</span>count
</span></span></code></pre></div><p>Usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>a1 <span style="color:#f92672">=</span> Animal(<span style="color:#e6db74">&#34;Cat&#34;</span>)
</span></span><span style="display:flex;"><span>a2 <span style="color:#f92672">=</span> Animal(<span style="color:#e6db74">&#34;Dog&#34;</span>)
</span></span><span style="display:flex;"><span>print(Animal<span style="color:#f92672">.</span>get_count())  <span style="color:#75715e"># Output: 2</span>
</span></span></code></pre></div><h4 id="example-static-method">Example: Static Method</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MathUtil</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@staticmethod</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add</span>(x, y):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x <span style="color:#f92672">+</span> y
</span></span></code></pre></div><p>Usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>result <span style="color:#f92672">=</span> MathUtil<span style="color:#f92672">.</span>add(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>print(result)  <span style="color:#75715e"># Output: 15</span>
</span></span></code></pre></div><hr>
<h3 id="why-use-oop">Why Use OOP?</h3>
<p>Object-oriented programming provides numerous benefits:</p>
<ol>
<li><strong>Encapsulation</strong>: Keeps related data and methods together.</li>
<li><strong>Reusability</strong>: Inheritance allows you to extend existing code.</li>
<li><strong>Readability</strong>: Code mirrors real-world entities and relationships.</li>
</ol>
<hr>
<h3 id="real-world-example-employee-management-system">Real-World Example: Employee Management System</h3>
<p>Let’s create a simple system for managing employees using OOP concepts.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Employee</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, name, position):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>position <span style="color:#f92672">=</span> position
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">describe</span>(self):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74"> works as a </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>position<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Manager</span>(Employee):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, name, position, department):
</span></span><span style="display:flex;"><span>        super()<span style="color:#f92672">.</span>__init__(name, position)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>department <span style="color:#f92672">=</span> department
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">describe</span>(self):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74"> is a Manager of the </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>department<span style="color:#e6db74">}</span><span style="color:#e6db74"> department.&#34;</span>)
</span></span></code></pre></div><p>Usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>e1 <span style="color:#f92672">=</span> Employee(<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;Developer&#34;</span>)
</span></span><span style="display:flex;"><span>m1 <span style="color:#f92672">=</span> Manager(<span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Manager&#34;</span>, <span style="color:#e6db74">&#34;Engineering&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e1<span style="color:#f92672">.</span>describe()  <span style="color:#75715e"># Output: Alice works as a Developer</span>
</span></span><span style="display:flex;"><span>m1<span style="color:#f92672">.</span>describe()  <span style="color:#75715e"># Output: Bob is a Manager of the Engineering department.</span>
</span></span></code></pre></div><hr>
<h3 id="conclusion">Conclusion</h3>
<p>Object-oriented programming in Python enables developers to build organized, reusable, and scalable applications. Key concepts like inheritance, the <code>super()</code> function, and different types of methods (instance, class, and static) make OOP powerful and flexible.</p>
<p>Start small by creating simple classes and gradually explore inheritance and method overriding. For practice, try creating a library system, a school management system, or a banking application. With consistent practice, you’ll master the art of OOP in Python!</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>VirtualBox Clipboard Issues on Ubuntu</title>
      <link>/posts/virtualbox-clipboard-issues-on-ubuntu/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/virtualbox-clipboard-issues-on-ubuntu/</guid>
      <description><![CDATA[<p>I&rsquo;m running Ubuntu on VirtualBox on a Windows host. Despite setting up everything I could think of, the clipboard functionality refuses to cooperate. Here’s a breakdown of my situation and the steps I’ve tried so far.</p>
<h4 id="whats-set-up">What’s Set Up:</h4>
<ol>
<li>
<p><strong>Guest Additions Installed</strong>:<br>
The <code>vbox_GAs_6.1.36</code> icon appears correctly, and shared folders between the VirtualBox guest and the Windows host work without a hitch.</p>
</li>
<li>
<p><strong>Extension Pack Installed</strong>:<br>
I’ve installed <code>Oracle_VM_VirtualBox_Extension_Pack.vbox-extpack-6.1.36a</code>.</p>
</li>
<li>
<p><strong>Clipboard Settings</strong>:<br>
Clipboard sharing is set to <em>Bidirectional</em> under the <strong>Devices</strong> menu.</p>
</li>
<li>
<p><strong>Drag and Drop</strong>:<br>
Set to <em>Bidirectional</em> as well, but it doesn’t work either.</p>
</li>
</ol>
<h4 id="the-problem">The Problem:</h4>
<ul>
<li>Copying text from Google Chrome on the host and pasting it into Firefox within the VirtualBox guest doesn’t work.</li>
<li>Copying text from Notepad on the host and pasting it into LibreOffice Writer on the guest also fails.</li>
</ul>
<h4 id="what-ive-tried">What I’ve Tried:</h4>
<p>I’ve double-checked all settings and even reinstalled Guest Additions, but the clipboard issue persists.</p>
<h4 id="possible-solution">Possible Solution:</h4>
<p>If you’re facing a similar problem, the following commands might resolve it:</p>
<ol>
<li>
<p><strong>Update and Install Necessary Packages</strong><br>
Run the following commands in your Ubuntu terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>sudo apt-get install virtualbox-guest-x11
</span></span><span style="display:flex;"><span>sudo apt install linux-headers-<span style="color:#66d9ef">$(</span>uname -r<span style="color:#66d9ef">)</span> build-essential dkms
</span></span></code></pre></div></li>
<li>
<p><strong>Enable Clipboard Support</strong><br>
Once the above packages are installed, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo VBoxClient --clipboard
</span></span></code></pre></div><p>Then, restart your virtual machine, after restarting the VM if it still does not work do the same command again and it will work inshallah:</p>
</li>
</ol>
<p>These steps should enable clipboard functionality. If it still doesn’t work, double-check that the Guest Additions installation was successful and matches your VirtualBox version.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Starting a blog</title>
      <link>/posts/starting-a-blog/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/starting-a-blog/</guid>
      <description><![CDATA[<p>This image illustrates the workflow of this blog.</p>
<p><img src="/images/Starting%20a%20blog%20with%20Hugo.png" alt="Image Description"></p>
<h2 id="setting-up">Setting Up</h2>
<p>Before starting, ensure that you have <strong>Git</strong>, <strong>Go</strong> and <strong>Python</strong> installed on your system.</p>
<h2 id="create-folder-for-posts">Create Folder for Posts</h2>
<p>First, create a folder in your Obsidian vault named <code>posts</code>.</p>
<p><img src="/images/Pasted%20image%2020241206164602.png" alt="Image Description"></p>
<h2 id="install-hugo">Install Hugo</h2>
<p>Next, install Hugo and add it to your environment variables.
Link: <a href="https://gohugo.io/installation/">https://gohugo.io/installation/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e">## Verify Hugo works</span>
</span></span><span style="display:flex;"><span>hugo version
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Create a new site </span>
</span></span><span style="display:flex;"><span>hugo new site websitename
</span></span><span style="display:flex;"><span>cd websitename
</span></span></code></pre></div><h2 id="initialize-git-repository">Initialize Git Repository</h2>
<p>After creating your Hugo site, initialize a Git repository:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git init
</span></span></code></pre></div><h2 id="download-a-hugo-theme">Download a Hugo Theme</h2>
<p>Go to <a href="https://themes.gohugo.io/">Hugo Themes</a> and download a theme of your choice. For this example, we’ll use the theme <strong>Hugo Ficurinia</strong> from <a href="https://gitlab.com/gabmus/hugo-ficurinia">GitLab</a>.</p>
<p>Use the following command to add the Hugo theme to your site:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git submodule add <span style="color:#f92672">-f</span> [<span style="color:#66d9ef">the repo link of the theme</span>] themes/[<span style="color:#66d9ef">name of the theme</span>]
</span></span></code></pre></div><p>For me I did this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git submodule add <span style="color:#f92672">-f</span> https<span style="color:#960050;background-color:#1e0010">:</span>//gitlab.com/gabmus/hugo-ficurinia.git themes/hugo-ficurinia
</span></span></code></pre></div><h2 id="example-theme-configuration">Example Theme Configuration</h2>
<p>Most themes come with an example configuration, which is typically the best way to get started. For the <strong>hugo-ficurinia</strong> theme:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">baseURL</span> = <span style="color:#e6db74">&#34;/&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">theme</span> = <span style="color:#e6db74">&#34;hugo-ficurinia&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#34;Abdullah Salameh&#39;s Blog&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">languageCode</span> = <span style="color:#e6db74">&#34;en&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">defaultContentLanguage</span> = <span style="color:#e6db74">&#34;en&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># this will be included in the footer after the current year the site is last</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># built, followed by the (c) symbol</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># you can use markdown inside this field</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">paginate</span> = <span style="color:#ae81ff">5</span>  <span style="color:#75715e"># number of articles per page in the index</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">summaryLength</span> = <span style="color:#ae81ff">50</span>  <span style="color:#75715e"># number of words for article summaries</span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">params</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">author</span> = <span style="color:#e6db74">&#34;Abdullah Salameh&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">description</span> = <span style="color:#e6db74">&#34;A description for my website&#34;</span>  <span style="color:#75715e"># this will be added as metadata</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">posts</span> = <span style="color:#e6db74">&#34;posts&#34;</span>  <span style="color:#75715e"># content directory where to find home page posts; default searches in &#34;posts&#34; and &#34;post&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">showPostsLink</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># show or hide the link to the simple post list</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">extraContentDirs</span> = []  <span style="color:#75715e"># other content directories to render similarly to the home page</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">showcaseDir</span> = <span style="color:#e6db74">&#34;showcase&#34;</span>  <span style="color:#75715e"># create a content directory that shows a special showcase section in the home page</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># shows a specified single page as a home page, instead of the traditional articles list</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># requires setting `homeSinglePage`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># goes well with extraContentDirs</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">showSinglePageAsHome</span> = <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">homeSinglePage</span> = <span style="color:#e6db74">&#34;/home&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># It&#39;s best to put these icons in the &#34;static&#34; folder of your site</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">logo</span> = <span style="color:#e6db74">&#34;/logo.svg&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">favicon</span> = <span style="color:#e6db74">&#34;/favicon.png&#34;</span>  <span style="color:#75715e"># 32x32</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">faviconIco</span> = <span style="color:#e6db74">&#34;/favicon.ico&#34;</span>  <span style="color:#75715e"># 32x32</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">appletouch</span> = <span style="color:#e6db74">&#34;/apple-touch-icon.png&#34;</span>  <span style="color:#75715e"># 180x180</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">svgicon</span> = <span style="color:#e6db74">&#34;/logo.svg&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">icon512</span> = <span style="color:#e6db74">&#34;/icon512.png&#34;</span>  <span style="color:#75715e"># 512x512 png image</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">logoRightOfTitle</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># positions the logo to the right of the title; default: false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">showTags</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># show the Tags menu item; default true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">showRss</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># show the link for the RSS feed; default true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">imageInArticlePreview</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># show images in article preview; default false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fitImageInArticlePreview</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># make article preview images fit the article preview instead of getting cropped</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">articleSummary</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># show a summary in article preview; default true</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fontFamily</span> = <span style="color:#e6db74">&#34;JetBrains Mono&#34;</span>  <span style="color:#75715e"># changes the font, default &#34;JetBrains Mono&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">titleFontFamily</span> = <span style="color:#e6db74">&#34;JetBrains Mono&#34;</span>  <span style="color:#75715e"># font used for titles and headings</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">monospaceFontFamily</span> = <span style="color:#e6db74">&#34;JetBrains Mono&#34;</span>  <span style="color:#75715e"># changes the monospace font for code, default &#34;JetBrains Mono&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># multipliers applied to font sizes, useful for custom fonts that may be too big or too small</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">titleFontSizeMultiplier</span> = <span style="color:#ae81ff">1.0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mainFontSizeMultiplier</span> = <span style="color:#ae81ff">1.0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">monoFontSizeMultiplier</span> = <span style="color:#ae81ff">1.0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">contentWidth</span> = <span style="color:#e6db74">&#34;1000px&#34;</span>  <span style="color:#75715e"># maximum width of the site content, css syntax</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">paperCards</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># enable paper card style; default false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">buttonTags</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># enable button tag style; default false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tagsInArticlePreview</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># enable tags list in the article preview card</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">gridView</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># show post list as a grid. goes well with paperCards</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bigArticleTitle</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># makes the title in the single article view bigger</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">navtype</span> = <span style="color:#e6db74">&#34;standard&#34;</span>  <span style="color:#75715e"># changes the style of the pagination, available styles are: &#34;standard&#34;, &#34;circles&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">enableShadow</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># shows a shadow around some elements</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">menuStyle</span> = <span style="color:#e6db74">&#34;buttons&#34;</span>  <span style="color:#75715e"># changes the style of the main site navigation menu, available styles are: &#34;standard&#34;, &#34;buttons&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">inputStyle</span> = <span style="color:#e6db74">&#34;standard&#34;</span> <span style="color:#75715e"># changes the style of inputs (like the searchbar), available styles are: &#34;standard&#34;, &#34;buttons&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">enableSearch</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># enable search page</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">searchbarEverywhere</span> = <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># if the searchbar should be shown in every page; requires enableSearch</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">searchMenuLink</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># add a search link to the navigation menu; requires enableSearch</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mobileHamburgerNav</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># alternative hamburger menu layout for the main nav menu when screen is small</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">enableFeatured</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># enable a particular view for articles marked as featured (featured: true in the article frontmatter)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">underlineTitleLinks</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># show an underline also for links that are titles</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># enable comments support with commento using the script from your server</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">commento</span> = <span style="color:#e6db74">&#34;https://example.com/js/commento.js&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># enable comments support with cactus comments (cactus.chat)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cactusCommentsSiteName</span> = <span style="color:#e6db74">&#34;example.com&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cactusCommentsServerName</span> = <span style="color:#e6db74">&#34;cactus.chat&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cactusCommentsHomeserver</span> = <span style="color:#e6db74">&#34;https://matrix.cactus.chat:8448&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># enable analytics using Plausible</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">plausibleScriptUrl</span> = <span style="color:#e6db74">&#34;https://something.com/...&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">plausibleDomain</span> = <span style="color:#e6db74">&#34;example.com&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># enable analytics using Umami</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">umamiScriptUrl</span> = <span style="color:#e6db74">&#34;https://something.com/...&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">umamiWebsiteId</span> = <span style="color:#e6db74">&#34;example-tracking-code&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">enableShareOnFediverse</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># enable a button at the end of an article to share it on the fediverse</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tocBeforeImage</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># show the table of contents before the main article image; default false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># WARNING: deprecated! Use [[menu.icons]] instead, look below</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># links = [</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#     [&#34;GitLab&#34;, &#34;https://gitlab.com/gabmus&#34;],</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#     [&#34;GNOME&#34;, &#34;https://gitlab.gnome.org/gabmus&#34;],</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#     [&#34;YouTube&#34;, &#34;https://youtube.com/TechPillsNet&#34;]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># you can customize all of the colors in this theme</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Colors are defined in data/colors.yml</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># alternative sidebar layout</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">enableSidebarLayout</span> = <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tocInSidebar</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># if the sidebar is enbabled, show the TOC in the sidebar</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># redirect to baseURL if current URL host doesn&#39;t match</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># useful if deploying in gitlab pages with custom domain and don&#39;t want</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># the username.gitlab.io/website url to persist</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># this requires you to set baseURL (see above)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">forceRedirect</span> = <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">infiniteScrolling</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># activates infinite scrolling instead of regular pagination</span>
</span></span><span style="display:flex;"><span>                               <span style="color:#75715e"># NOTE: you need to enable JSON output for this to work!</span>
</span></span><span style="display:flex;"><span>                               <span style="color:#75715e">#       look at the [outputs] section below</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">enableFooterColumns</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># activates footer columns, as described below</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">enableJumbotron</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># enables jumbotron, as described below</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># related articles will be selected randomly based on tags and shown at</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># the bottom of the article, after the comments</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">enableRelatedArticles</span> = <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">relatedArticlesNum</span> = <span style="color:#ae81ff">2</span>  <span style="color:#75715e"># how many related articles to show</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">randomRelated</span> = <span style="color:#66d9ef">false</span>  <span style="color:#75715e"># sorts related articles in random order (randomized at built time)</span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">menu</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># these links will be added to the main navigation menu, sorted by weight</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># other elements in this menu are added automatically from the &#34;pages&#34; folder</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># the folder it will look into can be customized with the pages variable</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># in params above</span>
</span></span><span style="display:flex;"><span>    [[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;about&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;About&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;/about/&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># these links (menu.icons) will be added as icon links below the main nav</span>
</span></span><span style="display:flex;"><span>    [[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">icons</span>]]
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;github&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Github&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/abda-s&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>    [[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">icons</span>]]
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;linkedin&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;LinkedIn&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://www.linkedin.com/in/abdullah-salameh/&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># this section is necessary if you want infinite scrolling</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># it allows to output the article list as paged JSON so that &#34;pages&#34; can be retrieved via javascript</span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">outputs</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">home</span> = [<span style="color:#e6db74">&#34;HTML&#34;</span>, <span style="color:#e6db74">&#34;JSON&#34;</span>]
</span></span></code></pre></div><p>you can use the previous configuration in your <code>hugo.toml</code> file:</p>
<p><img src="/images/Pasted%20image%2020241206143800.png" alt="Image Description"></p>
<h2 id="test-the-hugo-site-locally">Test the Hugo Site Locally</h2>
<p>Run the Hugo server to test if everything is set up correctly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>hugo server -t [<span style="color:#66d9ef">themename</span>]
</span></span></code></pre></div><p>It&rsquo;s working but there isn&rsquo;t any posts <img src="/images/Pasted%20image%2020241206144110.png" alt="Image Description"></p>
<h2 id="add-posts">Add Posts</h2>
<p>If everything is working but you don’t see any posts, create a <code>posts</code> folder inside the <code>content</code> directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>cd content
</span></span><span style="display:flex;"><span>mkdir posts
</span></span></code></pre></div><h2 id="sync-obsidian-notes-with-hugo-posts">Sync Obsidian Notes with Hugo Posts</h2>
<p>To sync your Obsidian notes with the Hugo posts folder, use the <code>robocopy</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>robocopy [<span style="color:#66d9ef">sourcepath] [destination</span>] /mir
</span></span></code></pre></div><p><img src="/images/Pasted%20image%2020241206144306.png" alt="Image Description"></p>
<h2 id="add-metadata-for-new-posts">Add Metadata for New Posts</h2>
<p>When starting a new post, make sure to add the following metadata at the top of your markdown file:</p>
<pre tabindex="0"><code>---
title: blogtitle
date: 2024-11-06
draft: false
tags:
  - tag1
  - tag2
---
</code></pre><p><img src="/images/Pasted%20image%2020241206175820.png" alt="Image Description"></p>
<h2 id="add-images-to-hugo">Add Images to Hugo</h2>
<p>When you add images to your Obsidian notes, they won’t appear in the Hugo site because the image source is only in Obsidian. To fix this, use the following Python script to copy the images to the Hugo static folder.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> shutil
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Paths (using raw strings to handle Windows backslashes correctly)</span>
</span></span><span style="display:flex;"><span>posts_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;C:\Users\3adas\Documents\salamehBlog\content\posts&#34;</span>
</span></span><span style="display:flex;"><span>attachments_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;C:\Users\3adas\OneDrive\Notes\files&#34;</span>
</span></span><span style="display:flex;"><span>static_images_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;C:\Users\3adas\Documents\salamehBlog\static\images&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 1: Process each markdown file in the posts directory</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> filename <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir(posts_dir):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> filename<span style="color:#f92672">.</span>endswith(<span style="color:#e6db74">&#34;.md&#34;</span>):
</span></span><span style="display:flex;"><span>        filepath <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(posts_dir, filename)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> open(filepath, <span style="color:#e6db74">&#34;r&#34;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>            content <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Step 2: Find all image links in the format ![[image.extension]]</span>
</span></span><span style="display:flex;"><span>        images <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\[\[([^]]+\.(png|jpg|jpeg|gif|bmp|webp|svg))\]\]&#39;</span>, content, re<span style="color:#f92672">.</span>IGNORECASE)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Step 3: Replace image links and ensure URLs are correctly formatted</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> image, _ <span style="color:#f92672">in</span> images:  <span style="color:#75715e"># `_` is unused, it contains the extension from the regex group</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Prepare the Markdown-compatible link with %20 replacing spaces</span>
</span></span><span style="display:flex;"><span>            markdown_image <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;![Image Description](/images/</span><span style="color:#e6db74">{</span>image<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;%20&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74">)&#34;</span>
</span></span><span style="display:flex;"><span>            content <span style="color:#f92672">=</span> content<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;![[</span><span style="color:#e6db74">{</span>image<span style="color:#e6db74">}</span><span style="color:#e6db74">]]&#34;</span>, markdown_image)
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Step 4: Copy the image to the Hugo static/images directory if it exists</span>
</span></span><span style="display:flex;"><span>            image_source <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(attachments_dir, image)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(image_source):
</span></span><span style="display:flex;"><span>                shutil<span style="color:#f92672">.</span>copy(image_source, static_images_dir)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Step 5: Write the updated content back to the markdown file</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> open(filepath, <span style="color:#e6db74">&#34;w&#34;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>            file<span style="color:#f92672">.</span>write(content)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Markdown files processed and images copied successfully.&#34;</span>)
</span></span></code></pre></div><h3 id="run-the-python-script">Run the Python Script</h3>
<p>Save the above Python script as <code>images.py</code> in the root folder of your Hugo site. Run the script using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>python images.py
</span></span></code></pre></div><h2 id="upload-the-code-to-github">Upload the Code to GitHub</h2>
<p>To upload your Hugo site to GitHub, follow these steps:</p>
<h3 id="step-1-create-a-new-repository">Step 1: Create a New Repository</h3>
<ol>
<li>
<p>Click the <strong>plus icon</strong> in GitHub.<br>
<img src="/images/Pasted%20image%2020241206145729.png" alt="Image Description"></p>
</li>
<li>
<p>Select <strong>New repository</strong> from the dropdown menu.<br>
<img src="/images/Pasted%20image%2020241206145803.png" alt="Image Description"></p>
</li>
<li>
<p>Name your repository. For example, you could use <code>salamehBlog</code>, Set the repository to <strong>Public</strong>.
<img src="/images/Pasted%20image%2020241206150019.png" alt="Image Description"></p>
</li>
<li>
<p>Click <strong>Create repository</strong>.<br>
<img src="/images/Pasted%20image%2020241206150113.png" alt="Image Description"></p>
</li>
</ol>
<hr>
<h3 id="step-2-push-your-code-to-github">Step 2: Push Your Code to GitHub</h3>
<ol>
<li>Add the remote origin for your repository:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git remote add origin https<span style="color:#960050;background-color:#1e0010">:</span>//github.com/username/salamehBlog.git
</span></span></code></pre></div><ol start="2">
<li>Build the website:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>hugo
</span></span></code></pre></div><ol start="3">
<li>Add all files to the staging area:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git add .
</span></span></code></pre></div><ol start="4">
<li>Commit your changes:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Initial commit&#34;</span>
</span></span></code></pre></div><ol start="5">
<li>Push the code to GitHub:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git push -u origin main
</span></span></code></pre></div><ol start="6">
<li>Create a new branch for GitHub pages to deploy from</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>git subtree split --prefix public -b gh-pages-deploy
</span></span><span style="display:flex;"><span>git push origin gh-pages-deploy:gh-pages --force
</span></span><span style="display:flex;"><span>git branch -D gh-pages-deploy
</span></span></code></pre></div><p>After completing these steps, your Hugo website will be successfully uploaded to GitHub and ready for deployment.</p>
<h2 id="deployment">Deployment</h2>
<ol>
<li>
<p>Navigate to the <strong>Settings</strong> of your GitHub repository.</p>
</li>
<li>
<p>Select <strong>Pages</strong> from the left-hand menu.</p>
</li>
<li>
<p>Choose the <code>gh-pages</code> branch and set your custom domain.<br>
<img src="/images/Pasted%20image%2020241206182531.png" alt="Image Description"></p>
</li>
<li>
<p>In the <code>public</code> folder of your Hugo project, create a file named <code>CNAME</code>.
<img src="/images/Pasted%20image%2020241206182922.png" alt="Image Description"></p>
</li>
<li>
<p>Add your custom domain (e.g., <code>blog.salameh.top</code>) inside the <code>CNAME</code> file.</p>
</li>
</ol>
<h2 id="automation-script">Automation Script</h2>
<p>Now that everything is set up, we need to address the challenge of running multiple commands each time we want to publish a post. This process is prone to human error and can be cumbersome. To streamline this, we’ll create a PowerShell script that automates the entire workflow.</p>
<ol>
<li><strong>Create the Script</strong><br>
In the root folder of your blog, create a new file named <code>updateblog.ps1</code> and paste the following code into it:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># PowerShell Script for Windows</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set variables for Obsidian to Hugo copy</span>
</span></span><span style="display:flex;"><span>$sourcePath = <span style="color:#e6db74">&#34;C:\Users\3adas\OneDrive\Notes\posts&#34;</span>
</span></span><span style="display:flex;"><span>$destinationPath = <span style="color:#e6db74">&#34;C:\Users\3adas\Documents\salamehBlog\content\posts&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set Github repo </span>
</span></span><span style="display:flex;"><span>$myrepo = <span style="color:#e6db74">&#34;reponame&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set error handling</span>
</span></span><span style="display:flex;"><span>$ErrorActionPreference = <span style="color:#e6db74">&#34;Stop&#34;</span>
</span></span><span style="display:flex;"><span>Set-StrictMode -Version Latest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Change to the script&#39;s directory</span>
</span></span><span style="display:flex;"><span>$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
</span></span><span style="display:flex;"><span>Set-Location $ScriptDir
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check for required commands</span>
</span></span><span style="display:flex;"><span>$requiredCommands = @(<span style="color:#e6db74">&#39;git&#39;</span>, <span style="color:#e6db74">&#39;hugo&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check for Python command (python or python3)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (Get-Command <span style="color:#e6db74">&#39;python&#39;</span> -ErrorAction SilentlyContinue) {
</span></span><span style="display:flex;"><span>    $pythonCommand = <span style="color:#e6db74">&#39;python&#39;</span>
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">elseif</span> (Get-Command <span style="color:#e6db74">&#39;python3&#39;</span> -ErrorAction SilentlyContinue) {
</span></span><span style="display:flex;"><span>    $pythonCommand = <span style="color:#e6db74">&#39;python3&#39;</span>
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Python is not installed or not in PATH.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">foreach</span> ($cmd <span style="color:#66d9ef">in</span> $requiredCommands) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">-not</span> (Get-Command $cmd -ErrorAction SilentlyContinue)) {
</span></span><span style="display:flex;"><span>        Write-Error <span style="color:#e6db74">&#34;</span>$cmd<span style="color:#e6db74"> is not installed or not in PATH.&#34;</span>
</span></span><span style="display:flex;"><span>        exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 1: Check if Git is initialized, and initialize if necessary</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">-not</span> (Test-Path <span style="color:#e6db74">&#34;.git&#34;</span>)) {
</span></span><span style="display:flex;"><span>    Write-Host <span style="color:#e6db74">&#34;Initializing Git repository...&#34;</span>
</span></span><span style="display:flex;"><span>    git init
</span></span><span style="display:flex;"><span>    git remote add origin $myrepo
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    Write-Host <span style="color:#e6db74">&#34;Git repository already initialized.&#34;</span>
</span></span><span style="display:flex;"><span>    $remotes = git remote
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">-not</span> ($remotes <span style="color:#f92672">-contains</span> <span style="color:#e6db74">&#39;origin&#39;</span>)) {
</span></span><span style="display:flex;"><span>        Write-Host <span style="color:#e6db74">&#34;Adding remote origin...&#34;</span>
</span></span><span style="display:flex;"><span>        git remote add origin $myrepo
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 2: Sync posts from Obsidian to Hugo content folder using Robocopy</span>
</span></span><span style="display:flex;"><span>Write-Host <span style="color:#e6db74">&#34;Syncing posts from Obsidian...&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">-not</span> (Test-Path $sourcePath)) {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Source path does not exist: </span>$sourcePath<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">-not</span> (Test-Path $destinationPath)) {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Destination path does not exist: </span>$destinationPath<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Use Robocopy to mirror the directories</span>
</span></span><span style="display:flex;"><span>$robocopyOptions = @(<span style="color:#e6db74">&#39;/MIR&#39;</span>, <span style="color:#e6db74">&#39;/Z&#39;</span>, <span style="color:#e6db74">&#39;/W:5&#39;</span>, <span style="color:#e6db74">&#39;/R:3&#39;</span>)
</span></span><span style="display:flex;"><span>$robocopyResult = robocopy $sourcePath $destinationPath @robocopyOptions
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ($LASTEXITCODE <span style="color:#f92672">-ge</span> <span style="color:#ae81ff">8</span>) {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Robocopy failed with exit code </span>$LASTEXITCODE<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 3: Process Markdown files with Python script to handle image links</span>
</span></span><span style="display:flex;"><span>Write-Host <span style="color:#e6db74">&#34;Processing image links in Markdown files...&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">-not</span> (Test-Path <span style="color:#e6db74">&#34;images.py&#34;</span>)) {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Python script images.py not found.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Execute the Python script</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    &amp; $pythonCommand images.py
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Failed to process image links.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 4: Build the Hugo site</span>
</span></span><span style="display:flex;"><span>Write-Host <span style="color:#e6db74">&#34;Building the Hugo site...&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    hugo
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Hugo build failed.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 5: Add changes to Git, including handling deletions</span>
</span></span><span style="display:flex;"><span>Write-Host <span style="color:#e6db74">&#34;Staging changes for Git...&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Detect changes and include deletions</span>
</span></span><span style="display:flex;"><span>$gitStatus = git status --porcelain
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">-not</span> $gitStatus) {
</span></span><span style="display:flex;"><span>    Write-Host <span style="color:#e6db74">&#34;No changes to stage.&#34;</span>
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Stage all changes, including deletions</span>
</span></span><span style="display:flex;"><span>    Write-Host <span style="color:#e6db74">&#34;Staging all changes, including deletions...&#34;</span>
</span></span><span style="display:flex;"><span>    git add --all
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 6: Commit changes with a dynamic message</span>
</span></span><span style="display:flex;"><span>$commitMessage = <span style="color:#e6db74">&#34;synced posts on </span>$(Get-Date -Format <span style="color:#e6db74">&#39;yyyy-MM-dd HH:mm:ss&#39;</span>)<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>$hasStagedChanges = (git diff --cached --name-only) <span style="color:#f92672">-ne</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">-not</span> $hasStagedChanges) {
</span></span><span style="display:flex;"><span>    Write-Host <span style="color:#e6db74">&#34;No changes to commit.&#34;</span>
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    Write-Host <span style="color:#e6db74">&#34;Committing changes...&#34;</span>
</span></span><span style="display:flex;"><span>    git commit -m <span style="color:#e6db74">&#34;</span>$commitMessage<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 7: Push all changes to the main branch</span>
</span></span><span style="display:flex;"><span>Write-Host <span style="color:#e6db74">&#34;Deploying to GitHub Master...&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    git push origin master
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Failed to push to Master branch.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step 8: Push the public folder to the gh-pages branch using subtree split and force push</span>
</span></span><span style="display:flex;"><span>Write-Host <span style="color:#e6db74">&#34;Deploying to GitHub pages...&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if the temporary branch exists and delete it</span>
</span></span><span style="display:flex;"><span>$branchExists = git branch --list <span style="color:#e6db74">&#34;gh-pages-deploy&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ($branchExists) {
</span></span><span style="display:flex;"><span>    git branch -D gh-pages-deploy
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Perform subtree split</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    git subtree split --prefix public -b gh-pages-deploy
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Subtree split failed.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Push to gh-pages branch with force</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    git push origin gh-pages-deploy:gh-pages --force
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>    Write-Error <span style="color:#e6db74">&#34;Failed to push to hostinger branch.&#34;</span>
</span></span><span style="display:flex;"><span>    git branch -D gh-pages-deploy
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Delete the temporary branch</span>
</span></span><span style="display:flex;"><span>git branch -D gh-pages-deploy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Write-Host <span style="color:#e6db74">&#34;All done! Site synced, processed, committed, built, and deployed.&#34;</span>
</span></span></code></pre></div><ol start="2">
<li><strong>Run the Script</strong><br>
Each time you want to sync or upload a new post, simply execute the script:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>.\updateblog.ps1
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Learning VIM</title>
      <link>/posts/learning-vim/</link>
      <pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/learning-vim/</guid>
      <description><![CDATA[<p>Everything is based on this <a href="https://youtu.be/RZ4p-saaQkc">video</a>.</p>
<h2 id="installing-vim">Installing VIM</h2>
<p>First, check if it’s installed by typing <code>vi</code> or <code>vim</code> in the terminal. If you see the following output:
<img src="/images/Pasted%20image%2020241205183304.png" alt="Image Description">
it means the program is installed. Otherwise, you’ll need to install it using your Linux package manager.</p>
<p>If you&rsquo;re on Ubuntu, use the following commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo apt install vi 
</span></span></code></pre></div><p>or</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo apt install vim 
</span></span></code></pre></div><h2 id="understanding-vim-modes">Understanding vim Modes</h2>
<p>Vim has several modes, each designed for specific tasks. Vim’s modes are its core strength, allowing efficient text manipulation and navigation. Each mode has a specific purpose, and transitioning between them is seamless.</p>
<hr>
<h3 id="1-normal-mode">1. Normal Mode</h3>
<p><strong>Purpose:</strong> The default mode for navigating and executing commands.<br>
<strong>How to Enter:</strong> Press <code>Esc</code> from any mode.</p>
<h4 id="features-in-normal-mode">Features in Normal Mode:</h4>
<ul>
<li><strong>Cursor Navigation:</strong>
<ul>
<li>Use <code>h</code> (left), <code>j</code> (down), <code>k</code> (up), and <code>l</code> (right).</li>
<li>Jump words with <code>w</code> (next word) or <code>b</code> (back a word).</li>
<li>Jump to start/end of the line with <code>^</code>/<code>$</code>.</li>
</ul>
</li>
<li><strong>Editing Commands:</strong>
<ul>
<li><code>dd</code>: Delete a line.</li>
<li><code>yy</code>: Copy (yank) a line.</li>
<li><code>p</code>: Paste copied/cut text.</li>
<li><code>u</code>: Undo the last change.</li>
</ul>
</li>
<li><strong>Search &amp; Replace:</strong>
<ul>
<li><code>/the-thing-you-want</code>: Search forward for &ldquo;the-thing-you-want&rdquo;.</li>
<li><code>?the-thing-you-want</code>: Search backward for &ldquo;the-thing-you-want&rdquo;.</li>
</ul>
</li>
</ul>
<h4 id="exiting-normal-mode">Exiting Normal Mode:</h4>
<p>You&rsquo;re always in Normal Mode unless you&rsquo;ve entered another mode. Press <code>Esc</code> to ensure you&rsquo;re back.</p>
<hr>
<h3 id="2-insert-mode">2. Insert Mode</h3>
<p><strong>Purpose:</strong> To insert text into the file.<br>
In Vim, <strong>capitalized versions of commands often extend or modify the behavior of their lowercase counterparts</strong>, typically operating on a <strong>larger scope</strong> or providing a <strong>slightly different action</strong>. Here’s how capitalized versions of <code>i</code>, <code>a</code>, and <code>o</code> behave and differ from their lowercase equivalents:</p>
<h4 id="i-vs-i">i vs. I</h4>
<ul>
<li><strong><code>i</code> (Insert Mode)</strong>:
<ul>
<li>Enters <strong>Insert Mode</strong> at the <strong>current cursor position</strong>.</li>
<li>You can begin inserting text immediately before the character where the cursor is located.</li>
</ul>
</li>
<li><strong><code>I</code> (Insert at Start of Line)</strong>:
<ul>
<li>Enters <strong>Insert Mode</strong> at the <strong>beginning of the current line</strong>, skipping over any leading whitespace or indentation.</li>
<li>This is useful for quickly editing or appending text at the start of a line without manually navigating there.</li>
</ul>
</li>
</ul>
<h5 id="example">Example:</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>   This is a sentence.  (Cursor on the &#34;T&#34;)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Pressing `i`:  Insert before &#34;T&#34;.
</span></span><span style="display:flex;"><span>Pressing `I`:  Insert at the very start of the line (before the &#34;T&#34; and leading spaces).
</span></span></code></pre></div><h4 id="a-vs-a">a vs. A</h4>
<ul>
<li><strong><code>a</code> (Append Mode)</strong>:
<ul>
<li>Enters <strong>Insert Mode</strong> immediately <strong>after the current cursor position</strong>.</li>
<li>Allows you to append text to the current character.</li>
</ul>
</li>
<li><strong><code>A</code> (Append at End of Line)</strong>:
<ul>
<li>Enters <strong>Insert Mode</strong> at the <strong>end of the current line</strong>, regardless of the cursor’s current position.</li>
<li>Ideal for quickly adding text at the end of a line.</li>
</ul>
</li>
</ul>
<h5 id="example-1">Example:</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>   This is a sentence.  (Cursor on &#34;T&#34;)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Pressing `a`:  Append after &#34;T&#34;.
</span></span><span style="display:flex;"><span>Pressing `A`:  Jump to the end of the line and begin inserting.
</span></span></code></pre></div><h4 id="o-vs-o">o vs. O</h4>
<ul>
<li><strong><code>o</code> (Open Below)</strong>:
<ul>
<li>Opens a <strong>new line below the current line</strong> and enters <strong>Insert Mode</strong>.</li>
<li>Convenient for adding new lines after the current one.</li>
</ul>
</li>
<li><strong><code>O</code> (Open Above)</strong>:
<ul>
<li>Opens a <strong>new line above the current line</strong> and enters <strong>Insert Mode</strong>.</li>
<li>Useful for quickly inserting new lines before the current line.</li>
</ul>
</li>
</ul>
<h5 id="example-2">Example:</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>   Line 1
</span></span><span style="display:flex;"><span>   Line 2 (Cursor here)
</span></span><span style="display:flex;"><span>   Line 3
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Pressing `o`:  Opens a new line below &#34;Line 2&#34;.
</span></span><span style="display:flex;"><span>Pressing `O`:  Opens a new line above &#34;Line 2&#34;.
</span></span></code></pre></div><h4 id="why-capitalization-matters">Why Capitalization Matters</h4>
<p>Capitalized commands like <code>I</code>, <code>A</code>, and <code>O</code> are shortcuts for actions that would otherwise require additional steps or motions:</p>
<ul>
<li><strong><code>I</code> saves time</strong> by avoiding manual navigation to the start of the line.</li>
<li><strong><code>A</code> avoids navigating to the end of the line</strong> before appending.</li>
<li>**<code>O</code> and <code>o</code> make it easy to insert blank lines without leaving the current context.</li>
</ul>
<p>This behavior reflects Vim&rsquo;s philosophy of providing <strong>shortcuts for repetitive or common editing tasks</strong> while maintaining efficient text editing workflows. By mastering these commands, you can significantly improve your productivity in Vim.</p>
<h4 id="features-in-insert-mode">Features in Insert Mode:</h4>
<ul>
<li>Type as you would in a regular text editor.</li>
<li>Use arrow keys to navigate (though it&rsquo;s better to return to Normal Mode for navigation).</li>
</ul>
<h4 id="exiting-insert-mode">Exiting Insert Mode:</h4>
<p>Press <code>Esc</code> to return to Normal Mode.</p>
<hr>
<h3 id="3-visual-mode">3. Visual Mode</h3>
<p><strong>Purpose:</strong> To select text for manipulation.<br>
<strong>How to Enter:</strong></p>
<ul>
<li><code>v</code>: Character-wise selection.</li>
<li><code>V</code>: Line-wise selection.</li>
<li><code>Ctrl+v</code>: Block/column-wise selection.</li>
</ul>
<h4 id="features-in-visual-mode">Features in Visual Mode:</h4>
<ul>
<li>Highlight text with cursor movement.</li>
<li>Perform actions like:
<ul>
<li><code>d</code>: Cut (delete) selection.</li>
<li><code>y</code>: Copy (yank) selection.</li>
<li><code>&gt;</code>/<code>&lt;</code>: Indent or unindent selection. <em>It&rsquo;s like pressing <code>TAB</code></em></li>
<li><code>U</code>/<code>u</code>: Convert selection to uppercase/lowercase.</li>
</ul>
</li>
</ul>
<h4 id="exiting-visual-mode">Exiting Visual Mode:</h4>
<p>Press <code>Esc</code> to return to Normal Mode.</p>
<hr>
<h3 id="4-command-line-mode">4. Command-Line Mode</h3>
<p><strong>Purpose:</strong> Execute advanced commands like saving, quitting, or search-and-replace.<br>
<strong>How to Enter:</strong></p>
<ul>
<li><code>:</code>: For general commands.</li>
<li><code>/</code>: For forward search.</li>
<li><code>?</code>: For backward search.</li>
</ul>
<h4 id="examples-of-commands">Examples of Commands:</h4>
<ul>
<li><code>:w</code>: Save changes.</li>
<li><code>:q</code>: Quit.</li>
<li><code>:wq</code>: Save and quit.</li>
<li><code>:q!</code>: Quit without saving.</li>
<li><code>:s/old/new/g</code>: Replace &ldquo;old&rdquo; with &ldquo;new&rdquo; in the current line.</li>
</ul>
<h4 id="exiting-command-line-mode">Exiting Command-Line Mode:</h4>
<p>Press <code>Esc</code> to cancel the current command or after executing it.</p>
<hr>
<p>These modes make Vim incredibly versatile, catering to diverse editing needs and workflows. By mastering them, you unlock Vim&rsquo;s full potential for efficient text editing.</p>
<h2 id="combining-multiple-commands">Combining Multiple Commands</h2>
<p>In Vim, you can combine multiple commands to perform actions in sequence on text or the file you&rsquo;re editing. This allows for powerful, efficient editing without needing to switch modes repeatedly.</p>
<h3 id="commands-cheat-sheet">Commands Cheat Sheet</h3>
<p><img src="/images/Pasted%20image%2020241205211919.png" alt="Image Description"></p>
<h3 id="using-command-combinations">Using Command Combinations</h3>
<p>You can combine commands by using <strong>command prefixes</strong>, which allow you to perform multiple actions in a single command.</p>
<h3 id="examples-of-command-combinations">Examples of Command Combinations:</h3>
<ol>
<li>
<p><strong>Delete Word (<code>diw</code>)</strong>:</p>
<ul>
<li>
<p>The command <code>diw</code> combines two commands:</p>
<ul>
<li><code>d</code>: Delete</li>
<li><code>iw</code>: Inner word (selects the word under the cursor).</li>
</ul>
</li>
<li>
<p>This deletes the word under the cursor without deleting the space after it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>The quick brown fox
</span></span></code></pre></div><p>If the cursor is on &ldquo;quick&rdquo;, pressing <code>diw</code> will delete &ldquo;quick&rdquo;, leaving &ldquo;The brown fox&rdquo;.</p>
</li>
</ul>
</li>
<li>
<p><strong>Change Word (<code>ciw</code>)</strong>:</p>
<ul>
<li>
<p><code>ciw</code> stands for &ldquo;change inner word&rdquo;.</p>
<ul>
<li><code>c</code>: Change (deletes and enters insert mode)</li>
<li><code>iw</code>: Inner word (selects the word under the cursor).</li>
</ul>
</li>
<li>
<p>This command deletes the word and enters Insert Mode for you to type a new word.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>The quick brown fox
</span></span></code></pre></div><p>If the cursor is on &ldquo;quick&rdquo;, pressing <code>ciw</code> will delete &ldquo;quick&rdquo; and place the cursor in Insert Mode to type a new word.</p>
</li>
</ul>
</li>
<li>
<p><strong>Delete Inside Brackets (<code>di(</code>)</strong>:</p>
<ul>
<li>
<p><code>di(</code> combines <code>d</code> (delete) and <code>i(</code> (inner parentheses).</p>
</li>
<li>
<p>It deletes the contents inside parentheses, but leaves the parentheses themselves intact.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>This is (sample text) inside parentheses.
</span></span></code></pre></div><p>If the cursor is inside the parentheses, pressing <code>di(</code> will delete &ldquo;sample text&rdquo; but leave the parentheses.</p>
</li>
</ul>
</li>
<li>
<p><strong>Yank Line (<code>yy</code>)</strong>:</p>
<ul>
<li><code>yy</code> yanks (copies) the entire line the cursor is on, including line breaks.</li>
<li>You can also use <code>2yy</code> to yank multiple lines at once (in this case, 2 lines).</li>
</ul>
</li>
<li>
<p><strong>Indent Selection (<code>&gt;</code> or <code>&lt;</code>)</strong>:</p>
<ul>
<li>To indent a selection, you can use the <code>&gt;</code> command.
<ul>
<li>In Visual Mode (<code>v</code> or <code>V</code>), you can select a block of text and then use <code>&gt;</code> to indent the entire block.</li>
</ul>
</li>
<li>To un-indent, use <code>&lt;</code>.</li>
</ul>
</li>
<li>
<p><strong>Undo and Redo</strong>:</p>
<ul>
<li><code>u</code>: Undo the last change.</li>
<li><code>Ctrl+r</code>: Redo the undone change.</li>
</ul>
</li>
</ol>
<h3 id="combining-commands-with-count-prefixes">Combining Commands with Count Prefixes:</h3>
<p>You can also prefix commands with numbers to apply them a certain number of times.</p>
<ul>
<li><strong>Example: <code>5dd</code></strong>:
<ul>
<li>Deletes 5 lines starting from the cursor&rsquo;s current position.</li>
</ul>
</li>
<li><strong>Example: <code>3w</code></strong>:
<ul>
<li>Moves the cursor forward 3 words.</li>
</ul>
</li>
</ul>
<p>This technique of combining commands and using prefixes significantly enhances Vim&rsquo;s efficiency, making it easier to manipulate text with fewer keystrokes.</p>
<h2 id="the-set-command">The <code>:set</code> Command</h2>
<p>Here are examples of the <code>:set</code> command in Vim, showcasing how to customize the editor&rsquo;s behavior and appearance:</p>
<h3 id="1-enable-line-numbers">1. Enable Line Numbers</h3>
<ul>
<li>
<p><strong>Absolute Line Numbers</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">number</span>
</span></span></code></pre></div><p>Displays line numbers on the left-hand side of the screen.</p>
</li>
<li>
<p><strong>Relative Line Numbers</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">relativenumber</span>
</span></span></code></pre></div><p>Shows line numbers relative to the current cursor position, making it easier to navigate using commands like <code>5j</code> or <code>10k</code>.</p>
</li>
<li>
<p><strong>Disable Line Numbers</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">nonumber</span>
</span></span><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">norelativenumber</span>
</span></span></code></pre></div><p>Disables both absolute and relative line numbers.</p>
</li>
</ul>
<hr>
<h3 id="2-highlight-search-results">2. <strong>Highlight Search Results</strong></h3>
<ul>
<li>
<p><strong>Enable Search Highlighting</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">hlsearch</span>
</span></span></code></pre></div><p>Highlights all search matches in the document.</p>
</li>
<li>
<p><strong>Disable Search Highlighting</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">nohlsearch</span>
</span></span></code></pre></div><p>Turns off the search highlighting after completing a search.</p>
</li>
<li>
<p><strong>Enable Incremental Search</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">incsearch</span>
</span></span></code></pre></div><p>Shows search results as you type, instead of waiting until you press <code>Enter</code>.</p>
</li>
<li>
<p><strong>Disable Incremental Search</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">noincsearch</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h3 id="3-auto-indentation">3. Auto-Indentation</h3>
<ul>
<li>
<p><strong>Enable Auto-Indentation</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">smartindent</span>
</span></span></code></pre></div><p>Automatically indents new lines based on the previous line&rsquo;s indentation (useful for programming).</p>
</li>
<li>
<p><strong>Enable Syntax-based Indentation</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#66d9ef">filetype</span>=<span style="color:#a6e22e">python</span>
</span></span><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">smarttab</span>
</span></span><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">autoindent</span>
</span></span><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">tabstop</span>=<span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">shiftwidth</span>=<span style="color:#ae81ff">4</span>
</span></span></code></pre></div><p>Customizes indentation rules for a specific file type, such as Python. These settings ensure consistent indentation using 4 spaces.</p>
</li>
<li>
<p><strong>Disable Auto-Indentation</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">noautoindent</span>
</span></span><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">nosmartindent</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h3 id="4-tab-and-space-settings">4. Tab and Space Settings</h3>
<ul>
<li>
<p><strong>Set Tab Width</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">tabstop</span>=<span style="color:#ae81ff">4</span>
</span></span></code></pre></div><p>Sets the width of a tab character to 4 spaces.</p>
</li>
<li>
<p><strong>Set Indentation Width</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">shiftwidth</span>=<span style="color:#ae81ff">4</span>
</span></span></code></pre></div><p>Sets the number of spaces to use for indentation when pressing <code>&gt;</code> or <code>&lt;</code>.</p>
</li>
<li>
<p><strong>Use Spaces Instead of Tabs</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">expandtab</span>
</span></span></code></pre></div><p>Converts tab characters to spaces (commonly used in Python and other languages).</p>
</li>
<li>
<p><strong>Use Tabs Instead of Spaces</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">noexpandtab</span>
</span></span></code></pre></div><p>Ensures that tabs are inserted when the Tab key is pressed, rather than spaces.</p>
</li>
</ul>
<hr>
<h3 id="5-line-wrapping">5. Line Wrapping</h3>
<ul>
<li>
<p><strong>Enable Line Wrapping</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">wrap</span>
</span></span></code></pre></div><p>Enables text wrapping, so lines that extend past the screen width are wrapped onto the next line.</p>
</li>
<li>
<p><strong>Disable Line Wrapping</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">nowrap</span>
</span></span></code></pre></div><p>Disables text wrapping, and long lines will scroll horizontally instead of wrapping.</p>
</li>
</ul>
<hr>
<h3 id="6-search-case-sensitivity">6. Search Case Sensitivity</h3>
<ul>
<li>
<p><strong>Case-Insensitive Search</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">ignorecase</span>
</span></span></code></pre></div><p>Makes searches case-insensitive (e.g., searching for &ldquo;apple&rdquo; will match &ldquo;Apple&rdquo;, &ldquo;APPLE&rdquo;, etc.).</p>
</li>
<li>
<p><strong>Case-Sensitive Search</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">noignorecase</span>
</span></span></code></pre></div><p>Ensures searches are case-sensitive.</p>
</li>
<li>
<p><strong>Smart Case Search</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">smartcase</span>
</span></span></code></pre></div><p>Makes searches case-insensitive unless you use an uppercase letter in the search query. For example, searching for &ldquo;apple&rdquo; will match all cases, but searching for &ldquo;Apple&rdquo; will only match &ldquo;Apple&rdquo;.</p>
</li>
</ul>
<hr>
<h3 id="7-auto-completion">7. Auto-Completion</h3>
<ul>
<li>
<p><strong>Enable File Completion</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">wildmenu</span>
</span></span></code></pre></div><p>Enhances the command-line completion feature with a graphical menu-like interface.</p>
</li>
<li>
<p><strong>Enable Path Completion</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">wildmode</span>=<span style="color:#a6e22e">list</span>:<span style="color:#a6e22e">longest</span>
</span></span></code></pre></div><p>Enables more intuitive file path completion on the command line.</p>
</li>
</ul>
<hr>
<h3 id="8-backup-and-swap-files">8. Backup and Swap Files</h3>
<ul>
<li>
<p><strong>Disable Swap Files</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">noswapfile</span>
</span></span></code></pre></div><p>Disables the creation of swap files. Swap files are used for recovering unsaved changes in case of a crash.</p>
</li>
<li>
<p><strong>Enable Backup Files</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">backup</span>
</span></span><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">backupdir</span>=~/<span style="color:#a6e22e">vim</span>-<span style="color:#a6e22e">backups</span>
</span></span></code></pre></div><p>Enables creating backup files when saving a file and specifies the directory for backups.</p>
</li>
<li>
<p><strong>Disable Backup Files</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">nobackup</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h3 id="9-status-line-customization">9. Status Line Customization</h3>
<ul>
<li>
<p><strong>Enable the Status Line</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">laststatus</span>=<span style="color:#ae81ff">2</span>
</span></span></code></pre></div><p>Always shows the status line at the bottom of the Vim window.</p>
</li>
<li>
<p><strong>Disable the Status Line</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">laststatus</span>=<span style="color:#ae81ff">0</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<h3 id="10-show-line-and-column-number">10. Show Line and Column Number</h3>
<ul>
<li><strong>Enable Line and Column Number Display</strong>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">ruler</span>
</span></span></code></pre></div>Displays the current line and column number in the status line, so you always know your position in the file.</li>
</ul>
<hr>
<h3 id="11-mouse-support">11. Mouse Support</h3>
<ul>
<li>
<p><strong>Enable Mouse Support</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">mouse</span>=<span style="color:#a6e22e">a</span>
</span></span></code></pre></div><p>Enables mouse support for selecting text and resizing windows inside Vim.</p>
</li>
<li>
<p><strong>Disable Mouse Support</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">mouse</span>=
</span></span></code></pre></div></li>
</ul>
<hr>
<h3 id="12-vim-colorscheme">12. Vim Colorscheme</h3>
<ul>
<li><strong>Set a Colorscheme</strong>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">colorscheme</span> <span style="color:#a6e22e">desert</span>
</span></span></code></pre></div>Sets the colorscheme to &ldquo;desert&rdquo; (you can replace <code>desert</code> with any other installed colorscheme like <code>elflord</code>, <code>morning</code>, or <code>industry</code>).</li>
</ul>
<hr>
<h3 id="13-line-break-characters">13. Line Break Characters</h3>
<ul>
<li>
<p><strong>Display Non-printing Characters</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">list</span>
</span></span><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">listchars</span>=<span style="color:#a6e22e">tab</span>:»·,<span style="color:#a6e22e">trail</span>:·
</span></span></code></pre></div><p>This shows special characters like tabs (<code>»</code>) and trailing spaces (<code>·</code>), which can be useful for cleaning up your text.</p>
</li>
<li>
<p><strong>Hide Non-printing Characters</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">nolist</span>
</span></span></code></pre></div></li>
</ul>
<hr>
<p>These <code>:set</code> commands let you tweak Vim to match your workflow and preferences, from simple appearance changes to more advanced features like auto-indentation or search behaviors. Once you’ve customized your settings, you can even save them in your <code>.vimrc</code> file to make these changes permanent across sessions.</p>
<h2 id="vimrc-file"><code>.vimrc</code> File</h2>
<p>The <code>.vimrc</code> file is a configuration file that Vim loads at startup, allowing you to customize Vim’s behavior.
<strong>Location of the <code>.vimrc</code> file</strong>: <code>~/.vimrc</code></p>
<h3 id="basic-structure">Basic Structure</h3>
<p>The <code>.vimrc</code> file contains Vim commands for settings, keybindings, and other customizations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#75715e">&#34; Enable line numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Enable syntax highlighting</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">syntax</span> <span style="color:#a6e22e">enable</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Set color scheme to &#39;desert&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">colorscheme</span> <span style="color:#a6e22e">desert</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Enable smart indentation, set tab width and spaces for indentation</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">smartindent</span>          <span style="color:#75715e">&#34; Automatically indent new lines</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">shiftwidth</span>=<span style="color:#ae81ff">4</span>         <span style="color:#75715e">&#34; Indentation width for new lines</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">tabstop</span>=<span style="color:#ae81ff">4</span>            <span style="color:#75715e">&#34; Number of spaces a tab is equal to</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">expandtab</span>            <span style="color:#75715e">&#34; Convert tabs to spaces</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Ignore case during search and highlight search results</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">ignorecase</span>           <span style="color:#75715e">&#34; Ignore case in searches</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">hlsearch</span>             <span style="color:#75715e">&#34; Highlight search matches</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Enable mouse support in all modes</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">mouse</span>=<span style="color:#a6e22e">a</span>              <span style="color:#75715e">&#34; Mouse can be used in all modes (Normal, Insert, Visual, etc.)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Enable backup files and specify backup directory</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">backup</span>               <span style="color:#75715e">&#34; Enable backup files</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">backupdir</span>=~/<span style="color:#a6e22e">vim</span>-<span style="color:#a6e22e">backups</span>  <span style="color:#75715e">&#34; Set the directory for backup files</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Automatically set the filetype to Python for .py files</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">BufRead</span>,<span style="color:#a6e22e">BufNewFile</span> *.<span style="color:#a6e22e">py</span> <span style="color:#66d9ef">set</span> <span style="color:#66d9ef">filetype</span>=<span style="color:#a6e22e">python</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Map &#39;jj&#39; to escape Insert mode (useful for avoiding the Esc key)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">inoremap</span> <span style="color:#a6e22e">jj</span> &lt;<span style="color:#a6e22e">Esc</span>&gt;        <span style="color:#75715e">&#34; Press &#39;jj&#39; to exit Insert mode</span>
</span></span></code></pre></div><h4 id="explanation-of-comments">Explanation of Comments:</h4>
<ul>
<li><strong>Line Numbers</strong>: Displays line numbers for easier navigation.</li>
<li><strong>Syntax Highlighting</strong>: Enables syntax color coding for better readability.</li>
<li><strong>Color Scheme</strong>: Sets a predefined color scheme for the editor.</li>
<li><strong>Indentation</strong>: Configures tab and space behavior to match the desired coding style.</li>
<li><strong>Search Settings</strong>: Makes searches case-insensitive and highlights matching results.</li>
<li><strong>Mouse Support</strong>: Allows using the mouse in all Vim modes.</li>
<li><strong>Backup Files</strong>: Enables backups and sets the directory where backup files will be stored.</li>
<li><strong>Filetype Settings</strong>: Automatically applies file-specific settings based on file extension (e.g., Python for <code>.py</code> files).</li>
<li><strong>Key Mapping</strong>: Allows custom key mappings, such as pressing <code>jj</code> to exit Insert mode.</li>
</ul>
<h2 id="waypoints-in-vim">Waypoints in Vim</h2>
<p><strong>Waypoints</strong> are useful for marking specific places in your file to quickly return to. This can be especially helpful when navigating through large files. In Vim, waypoints are often referred to as <strong>marks</strong>.</p>
<h3 id="setting-and-using-marks">Setting and Using Marks:</h3>
<ol>
<li><strong>Set a Mark</strong>:
<ul>
<li>To set a mark, press <code>m</code> followed by a letter (a-z). For example, <code>ma</code> sets a mark named <code>a</code> at the current cursor position.</li>
</ul>
</li>
<li><strong>Jump to a Mark</strong>:
<ul>
<li>To jump to a specific mark, press <code>'</code> followed by the mark&rsquo;s letter. For example, <code>'a</code> takes you to the position where mark <code>a</code> was set.</li>
</ul>
</li>
<li><strong>View All Marks</strong>:
<ul>
<li>You can see a list of all active marks by typing <code>:marks</code>.</li>
</ul>
</li>
</ol>
<h3 id="example-3">Example:</h3>
<ol>
<li>Move to a specific line, say line 10.</li>
<li>Set a mark with <code>ma</code> (mark &ldquo;a&rdquo;).</li>
<li>Continue editing elsewhere.</li>
<li>Return to the mark by typing <code>'a</code>.</li>
</ol>
<p>Marks allow you to quickly navigate between important points in your file without needing to rely on line numbers or searching.</p>
<h2 id="the-reg-command">The <code>:reg</code> Command</h2>
<p>The <code>:reg</code> command in Vim allows you to view and manage the contents of Vim&rsquo;s <strong>registers</strong>. Registers are temporary storage areas where text is stored when you cut, copy, or paste in Vim. This command helps you access these stored texts, allowing for easy retrieval and reuse.</p>
<h3 id="viewing-registers"><strong>Viewing Registers</strong></h3>
<ul>
<li>To view the contents of all registers, type <code>:reg</code> and press Enter.</li>
<li>This will display a list of registers and their contents.</li>
</ul>
<h3 id="using-specific-registers"><strong>Using Specific Registers</strong></h3>
<ul>
<li>You can access specific registers by typing <code>:reg</code> followed by the register name. For example, <code>:reg a</code> shows the contents of register <code>a</code>.</li>
</ul>
<h3 id="types-of-registers"><strong>Types of Registers:</strong></h3>
<ol>
<li><strong>Unnamed Register</strong> (<code>&quot;&quot;</code>): Stores text that was last yanked or deleted.</li>
<li><strong>Named Registers</strong> (<code>a-z</code>): These are registers that you can explicitly specify when yanking or deleting. You can yank or delete to a specific register with <code>&quot;a</code>, <code>&quot;b</code>, etc.</li>
<li><strong>Numbered Registers</strong> (<code>0-9</code>): Automatically store text from the most recent yank or delete operations, with <code>0</code> holding the most recent yank.</li>
<li><strong>Special Registers</strong>:
<ul>
<li><code>&quot;%</code>: The current file name.</li>
<li><code>&quot;#</code>: The name of the alternate file.</li>
<li><code>&quot;*</code> and <code>&quot;+</code>: Access to the system clipboard (if supported).</li>
</ul>
</li>
<li><strong>Macro Registers</strong> (<code>q</code>-<code>z</code>): These registers are used to store <strong>macros</strong> (sequences of commands). By recording a macro, you can save a sequence of commands to a register and replay them later.</li>
</ol>
<h3 id="examples"><strong>Examples:</strong></h3>
<ol>
<li><strong>Copying to a Register</strong>:
<ul>
<li><code>&quot;ayw</code>: Yank a word into register <code>a</code>.</li>
</ul>
</li>
<li><strong>Pasting from a Register</strong>:
<ul>
<li><code>&quot;ap</code>: Paste the content of register <code>a</code>.</li>
</ul>
</li>
<li><strong>Viewing Register Contents</strong>:
<ul>
<li><code>:reg a</code>: View the contents of register <code>a</code>.</li>
</ul>
</li>
<li><strong>Saving a Macro to a Register</strong>:
<ul>
<li>Press <code>q</code> followed by any register letter (e.g., <code>qa</code>) to start recording a macro into register <code>a</code></li>
<li>Perform the desired actions.</li>
<li>Press <code>q</code> again to stop recording.</li>
</ul>
</li>
<li><strong>Playing a Macro from a Register</strong>:
<ul>
<li>Press <code>@a</code> to replay the macro stored in register <code>a</code>.</li>
</ul>
</li>
</ol>
<p>The <code>:reg</code> command, along with macro functionality, gives you powerful tools to manage and reuse text and commands in Vim, enhancing your productivity and workflow.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Download VS-Code on Linux</title>
      <link>/posts/download-vs-code-on-linux/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/download-vs-code-on-linux/</guid>
      <description><![CDATA[<ol>
<li>
<p>Visit the <a href="https://code.visualstudio.com/download">Visual Studio Code download page</a>.
<img src="/images/Pasted%20image%2020241202122253.png" alt="Image Description"></p>
</li>
<li>
<p>Download the appropriate <code>.deb</code> file for your system.</p>
</li>
<li>
<p>Once the download is complete, open a terminal and run the following command to install it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo dpkg -i ./the-vscode-.deb-file
</span></span></code></pre></div><p><em>(Replace <code>./the-vscode-.deb-file</code> with the actual file name you downloaded.)</em></p>
<p><img src="/images/daa701f0-5f39-4852-a887-61a7d942ea7d.jpg" alt="Image Description"></p>
</li>
<li>
<p>The installation process might take a while, so feel free to grab a snack while it completes.</p>
</li>
</ol>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
