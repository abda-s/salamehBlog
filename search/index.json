
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-12-07","image":"","imageAlt":"","link":"/about/","summary":"\u003cp\u003eHello, and welcome to my blog! I\u0026rsquo;m an aspiring \u003cstrong\u003eElectrical Engineer\u003c/strong\u003e with a passion for combining creativity, innovation, and technology to solve real-world problems. I recently completed an internship as a \u003cstrong\u003eFull Stack Developer\u003c/strong\u003e at \u003cstrong\u003eInspire for Development Solutions\u003c/strong\u003e, where I honed my skills in modern web development. Currently, I’m an intern at \u003cstrong\u003eHTU Hacker Space\u003c/strong\u003e, focusing on cutting-edge electrical engineering challenges.\u003c/p\u003e","tags":[],"text":"hello, and welcome to my blog! i\u0026rsquo;m an aspiring electrical engineer with a passion for combining creativity, innovation, and technology to solve real-world problems. i recently completed an internship as a full stack developer at inspire for development solutions, where i honed my skills in modern web development. currently, i’m an intern at htu hacker space, focusing on cutting-edge electrical engineering challenges.\na little about my journey with a foundation in electrical engineering, i’ve explored various disciplines, including full-stack development, robotics, and app development. during my time at inspire, i worked extensively with react, redux, node.js, and mongodb, developing impactful solutions. now, i’m diving deeper into the world of electronics and embedded systems at htu hacker space.\nsome highlights from my journey include:\ndeveloping a job portal web application with features like cv building, job posting, and application tracking. designing and building an arduino-based environmental monitoring system with temperature, humidity, and soil sensors. careminder - smart pill dispenser: a smart device integrated with a mobile app to streamline medication management, featuring precision dispensing, real-time notifications, and solidworks-designed components. my tech toolbox here’s a glimpse of the tools and technologies i work with:\nfrontend: react, redux, material-ui (mui), expo backend: node.js, express, mongodb hardware: arduino, esp32, dht11 sensors, lcd modules, custom control circuits design and simulation: solidworks, pcb design beyond work outside of engineering, i love drawing, watching movies and tv shows—two of my favorite series are breaking bad and arcane. in my downtime, i enjoy playing video games, with cyberpunk 2077 and red dead redemption 2 being among the best games i’ve ever played. i’m always excited to learn, collaborate, and build innovative solutions that make a difference.\nfeel free to explore my blog to see more about my projects, thoughts, and journey!\n","title":"About me"},{"date":"2024-12-06","image":"","imageAlt":"","link":"/posts/starting-a-blog/","summary":"Set up a blog with Hugo and Obsidian by installing Hugo, initializing a site, and syncing Obsidian notes. Add themes, configure settings, and integrate images with a Python script.","tags":["linux","obsidian"],"text":"this image illustrates the workflow of this blog.\nsetting up before starting, ensure that you have git, go and python installed on your system.\ncreate folder for posts first, create a folder in your obsidian vault named posts.\ninstall hugo next, install hugo and add it to your environment variables. link: https://gohugo.io/installation/\n## verify hugo works hugo version ## create a new site hugo new site websitename cd websitename initialize git repository after creating your hugo site, initialize a git repository:\ngit init download a hugo theme go to hugo themes and download a theme of your choice. for this example, we’ll use the theme hugo ficurinia from gitlab.\nuse the following command to add the hugo theme to your site:\ngit submodule add -f [the repo link of the theme] themes/[name of the theme] for me i did this:\ngit submodule add -f https://gitlab.com/gabmus/hugo-ficurinia.git themes/hugo-ficurinia example theme configuration most themes come with an example configuration, which is typically the best way to get started. for the hugo-ficurinia theme:\nbaseurl = \u0026#34;/\u0026#34; theme = \u0026#34;hugo-ficurinia\u0026#34; title = \u0026#34;abdullah salameh\u0026#39;s blog\u0026#34; languagecode = \u0026#34;en\u0026#34; defaultcontentlanguage = \u0026#34;en\u0026#34; # this will be included in the footer after the current year the site is last # built, followed by the (c) symbol # you can use markdown inside this field paginate = 5 # number of articles per page in the index summarylength = 50 # number of words for article summaries [params] author = \u0026#34;abdullah salameh\u0026#34; description = \u0026#34;a description for my website\u0026#34; # this will be added as metadata posts = \u0026#34;posts\u0026#34; # content directory where to find home page posts; default searches in \u0026#34;posts\u0026#34; and \u0026#34;post\u0026#34; showpostslink = true # show or hide the link to the simple post list extracontentdirs = [] # other content directories to render similarly to the home page showcasedir = \u0026#34;showcase\u0026#34; # create a content directory that shows a special showcase section in the home page # shows a specified single page as a home page, instead of the traditional articles list # requires setting `homesinglepage` # goes well with extracontentdirs showsinglepageashome = false homesinglepage = \u0026#34;/home\u0026#34; # it\u0026#39;s best to put these icons in the \u0026#34;static\u0026#34; folder of your site logo = \u0026#34;/logo.svg\u0026#34; favicon = \u0026#34;/favicon.png\u0026#34; # 32x32 faviconico = \u0026#34;/favicon.ico\u0026#34; # 32x32 appletouch = \u0026#34;/apple-touch-icon.png\u0026#34; # 180x180 svgicon = \u0026#34;/logo.svg\u0026#34; icon512 = \u0026#34;/icon512.png\u0026#34; # 512x512 png image logorightoftitle = false # positions the logo to the right of the title; default: false showtags = true # show the tags menu item; default true showrss = false # show the link for the rss feed; default true imageinarticlepreview = true # show images in article preview; default false fitimageinarticlepreview = false # make article preview images fit the article preview instead of getting cropped articlesummary = true # show a summary in article preview; default true fontfamily = \u0026#34;jetbrains mono\u0026#34; # changes the font, default \u0026#34;jetbrains mono\u0026#34; titlefontfamily = \u0026#34;jetbrains mono\u0026#34; # font used for titles and headings monospacefontfamily = \u0026#34;jetbrains mono\u0026#34; # changes the monospace font for code, default \u0026#34;jetbrains mono\u0026#34; # multipliers applied to font sizes, useful for custom fonts that may be too big or too small titlefontsizemultiplier = 1.0 mainfontsizemultiplier = 1.0 monofontsizemultiplier = 1.0 contentwidth = \u0026#34;1000px\u0026#34; # maximum width of the site content, css syntax papercards = true # enable paper card style; default false buttontags = false # enable button tag style; default false tagsinarticlepreview = true # enable tags list in the article preview card gridview = true # show post list as a grid. goes well with papercards bigarticletitle = false # makes the title in the single article view bigger navtype = \u0026#34;standard\u0026#34; # changes the style of the pagination, available styles are: \u0026#34;standard\u0026#34;, \u0026#34;circles\u0026#34; enableshadow = false # shows a shadow around some elements menustyle = \u0026#34;buttons\u0026#34; # changes the style of the main site navigation menu, available styles are: \u0026#34;standard\u0026#34;, \u0026#34;buttons\u0026#34; inputstyle = \u0026#34;standard\u0026#34; # changes the style of inputs (like the searchbar), available styles are: \u0026#34;standard\u0026#34;, \u0026#34;buttons\u0026#34; enablesearch = true # enable search page searchbareverywhere = true # if the searchbar should be shown in every page; requires enablesearch searchmenulink = false # add a search link to the navigation menu; requires enablesearch mobilehamburgernav = false # alternative hamburger menu layout for the main nav menu when screen is small enablefeatured = false # enable a particular view for articles marked as featured (featured: true in the article frontmatter) underlinetitlelinks = false # show an underline also for links that are titles # enable comments support with commento using the script from your server commento = \u0026#34;https://example.com/js/commento.js\u0026#34; # enable comments support with cactus comments (cactus.chat) cactuscommentssitename = \u0026#34;example.com\u0026#34; cactuscommentsservername = \u0026#34;cactus.chat\u0026#34; cactuscommentshomeserver = \u0026#34;https://matrix.cactus.chat:8448\u0026#34; # enable analytics using plausible plausiblescripturl = \u0026#34;https://something.com/...\u0026#34; plausibledomain = \u0026#34;example.com\u0026#34; # enable analytics using umami umamiscripturl = \u0026#34;https://something.com/...\u0026#34; umamiwebsiteid = \u0026#34;example-tracking-code\u0026#34; enableshareonfediverse = false # enable a button at the end of an article to share it on the fediverse tocbeforeimage = false # show the table of contents before the main article image; default false # warning: deprecated! use [[menu.icons]] instead, look below # links = [ # [\u0026#34;gitlab\u0026#34;, \u0026#34;https://gitlab.com/gabmus\u0026#34;], # [\u0026#34;gnome\u0026#34;, \u0026#34;https://gitlab.gnome.org/gabmus\u0026#34;], # [\u0026#34;youtube\u0026#34;, \u0026#34;https://youtube.com/techpillsnet\u0026#34;] # ] # you can customize all of the colors in this theme # colors are defined in data/colors.yml # alternative sidebar layout enablesidebarlayout = false tocinsidebar = false # if the sidebar is enbabled, show the toc in the sidebar # redirect to baseurl if current url host doesn\u0026#39;t match # useful if deploying in gitlab pages with custom domain and don\u0026#39;t want # the username.gitlab.io/website url to persist # this requires you to set baseurl (see above) forceredirect = false infinitescrolling = false # activates infinite scrolling instead of regular pagination # note: you need to enable json output for this to work! # look at the [outputs] section below enablefootercolumns = false # activates footer columns, as described below enablejumbotron = false # enables jumbotron, as described below # related articles will be selected randomly based on tags and shown at # the bottom of the article, after the comments enablerelatedarticles = true relatedarticlesnum = 2 # how many related articles to show randomrelated = false # sorts related articles in random order (randomized at built time) [menu] # these links will be added to the main navigation menu, sorted by weight # other elements in this menu are added automatically from the \u0026#34;pages\u0026#34; folder # the folder it will look into can be customized with the pages variable # in params above [[menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;about\u0026#34; url = \u0026#34;/about/\u0026#34; weight = 10 # these links (menu.icons) will be added as icon links below the main nav [[menu.icons]] identifier = \u0026#34;github\u0026#34; name = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/abda-s\u0026#34; weight = 10 [[menu.icons]] identifier = \u0026#34;linkedin\u0026#34; name = \u0026#34;linkedin\u0026#34; url = \u0026#34;https://www.linkedin.com/in/abdullah-salameh/\u0026#34; weight = 20 # this section is necessary if you want infinite scrolling # it allows to output the article list as paged json so that \u0026#34;pages\u0026#34; can be retrieved via javascript [outputs] home = [\u0026#34;html\u0026#34;, \u0026#34;json\u0026#34;] you can use the previous configuration in your hugo.toml file:\ntest the hugo site locally run the hugo server to test if everything is set up correctly:\nhugo server -t [themename] it\u0026rsquo;s working but there isn\u0026rsquo;t any posts add posts if everything is working but you don’t see any posts, create a posts folder inside the content directory:\ncd content mkdir posts sync obsidian notes with hugo posts to sync your obsidian notes with the hugo posts folder, use the robocopy command:\nrobocopy [sourcepath] [destination] /mir add metadata for new posts when starting a new post, make sure to add the following metadata at the top of your markdown file:\n---\rtitle: blogtitle\rdate: 2024-11-06\rdraft: false\rtags:\r- tag1\r- tag2\r--- add images to hugo when you add images to your obsidian notes, they won’t appear in the hugo site because the image source is only in obsidian. to fix this, use the following python script to copy the images to the hugo static folder.\nimport os import re import shutil # paths (using raw strings to handle windows backslashes correctly) posts_dir = r\u0026#34;c:\\users\\3adas\\documents\\salamehblog\\content\\posts\u0026#34; attachments_dir = r\u0026#34;c:\\users\\3adas\\onedrive\\notes\\files\u0026#34; static_images_dir = r\u0026#34;c:\\users\\3adas\\documents\\salamehblog\\static\\images\u0026#34; # step 1: process each markdown file in the posts directory for filename in os.listdir(posts_dir): if filename.endswith(\u0026#34;.md\u0026#34;): filepath = os.path.join(posts_dir, filename) with open(filepath, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: content = file.read() # step 2: find all image links in the format ![[image.extension]] images = re.findall(r\u0026#39;\\[\\[([^]]+\\.(png|jpg|jpeg|gif|bmp|webp|svg))\\]\\]\u0026#39;, content, re.ignorecase) # step 3: replace image links and ensure urls are correctly formatted for image, _ in images: # `_` is unused, it contains the extension from the regex group # prepare the markdown-compatible link with %20 replacing spaces markdown_image = f\u0026#34;![image description](/images/{image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; content = content.replace(f\u0026#34;![[{image}]]\u0026#34;, markdown_image) # step 4: copy the image to the hugo static/images directory if it exists image_source = os.path.join(attachments_dir, image) if os.path.exists(image_source): shutil.copy(image_source, static_images_dir) # step 5: write the updated content back to the markdown file with open(filepath, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: file.write(content) print(\u0026#34;markdown files processed and images copied successfully.\u0026#34;) run the python script save the above python script as images.py in the root folder of your hugo site. run the script using:\npython images.py upload the code to github to upload your hugo site to github, follow these steps:\nstep 1: create a new repository click the plus icon in github.\nselect new repository from the dropdown menu.\nname your repository. for example, you could use salamehblog, set the repository to public. click create repository.\nstep 2: push your code to github add the remote origin for your repository: git remote add origin https://github.com/username/salamehblog.git build the website: hugo add all files to the staging area: git add . commit your changes: git commit -m \u0026#34;initial commit\u0026#34; push the code to github: git push -u origin main create a new branch for github pages to deploy from git subtree split --prefix public -b gh-pages-deploy git push origin gh-pages-deploy:gh-pages --force git branch -d gh-pages-deploy after completing these steps, your hugo website will be successfully uploaded to github and ready for deployment.\ndeployment navigate to the settings of your github repository.\nselect pages from the left-hand menu.\nchoose the gh-pages branch and set your custom domain.\nin the public folder of your hugo project, create a file named cname. add your custom domain (e.g., blog.salameh.top) inside the cname file.\nautomation script now that everything is set up, we need to address the challenge of running multiple commands each time we want to publish a post. this process is prone to human error and can be cumbersome. to streamline this, we’ll create a powershell script that automates the entire workflow.\ncreate the script\nin the root folder of your blog, create a new file named updateblog.ps1 and paste the following code into it: # powershell script for windows # set variables for obsidian to hugo copy $sourcepath = \u0026#34;c:\\users\\3adas\\onedrive\\notes\\posts\u0026#34; $destinationpath = \u0026#34;c:\\users\\3adas\\documents\\salamehblog\\content\\posts\u0026#34; # set github repo $myrepo = \u0026#34;reponame\u0026#34; # set error handling $erroractionpreference = \u0026#34;stop\u0026#34; set-strictmode -version latest # change to the script\u0026#39;s directory $scriptdir = split-path -parent $myinvocation.mycommand.definition set-location $scriptdir # check for required commands $requiredcommands = @(\u0026#39;git\u0026#39;, \u0026#39;hugo\u0026#39;) # check for python command (python or python3) if (get-command \u0026#39;python\u0026#39; -erroraction silentlycontinue) { $pythoncommand = \u0026#39;python\u0026#39; } elseif (get-command \u0026#39;python3\u0026#39; -erroraction silentlycontinue) { $pythoncommand = \u0026#39;python3\u0026#39; } else { write-error \u0026#34;python is not installed or not in path.\u0026#34; exit 1 } foreach ($cmd in $requiredcommands) { if (-not (get-command $cmd -erroraction silentlycontinue)) { write-error \u0026#34;$cmd is not installed or not in path.\u0026#34; exit 1 } } # step 1: check if git is initialized, and initialize if necessary if (-not (test-path \u0026#34;.git\u0026#34;)) { write-host \u0026#34;initializing git repository...\u0026#34; git init git remote add origin $myrepo } else { write-host \u0026#34;git repository already initialized.\u0026#34; $remotes = git remote if (-not ($remotes -contains \u0026#39;origin\u0026#39;)) { write-host \u0026#34;adding remote origin...\u0026#34; git remote add origin $myrepo } } # step 2: sync posts from obsidian to hugo content folder using robocopy write-host \u0026#34;syncing posts from obsidian...\u0026#34; if (-not (test-path $sourcepath)) { write-error \u0026#34;source path does not exist: $sourcepath\u0026#34; exit 1 } if (-not (test-path $destinationpath)) { write-error \u0026#34;destination path does not exist: $destinationpath\u0026#34; exit 1 } # use robocopy to mirror the directories $robocopyoptions = @(\u0026#39;/mir\u0026#39;, \u0026#39;/z\u0026#39;, \u0026#39;/w:5\u0026#39;, \u0026#39;/r:3\u0026#39;) $robocopyresult = robocopy $sourcepath $destinationpath @robocopyoptions if ($lastexitcode -ge 8) { write-error \u0026#34;robocopy failed with exit code $lastexitcode\u0026#34; exit 1 } # step 3: process markdown files with python script to handle image links write-host \u0026#34;processing image links in markdown files...\u0026#34; if (-not (test-path \u0026#34;images.py\u0026#34;)) { write-error \u0026#34;python script images.py not found.\u0026#34; exit 1 } # execute the python script try { \u0026amp; $pythoncommand images.py } catch { write-error \u0026#34;failed to process image links.\u0026#34; exit 1 } # step 4: build the hugo site write-host \u0026#34;building the hugo site...\u0026#34; try { hugo } catch { write-error \u0026#34;hugo build failed.\u0026#34; exit 1 } # step 5: add changes to git, including handling deletions write-host \u0026#34;staging changes for git...\u0026#34; # detect changes and include deletions $gitstatus = git status --porcelain if (-not $gitstatus) { write-host \u0026#34;no changes to stage.\u0026#34; } else { # stage all changes, including deletions write-host \u0026#34;staging all changes, including deletions...\u0026#34; git add --all } # step 6: commit changes with a dynamic message $commitmessage = \u0026#34;synced posts on $(get-date -format \u0026#39;yyyy-mm-dd hh:mm:ss\u0026#39;)\u0026#34; $hasstagedchanges = (git diff --cached --name-only) -ne \u0026#34;\u0026#34; if (-not $hasstagedchanges) { write-host \u0026#34;no changes to commit.\u0026#34; } else { write-host \u0026#34;committing changes...\u0026#34; git commit -m \u0026#34;$commitmessage\u0026#34; } # step 7: push all changes to the main branch write-host \u0026#34;deploying to github master...\u0026#34; try { git push origin master } catch { write-error \u0026#34;failed to push to master branch.\u0026#34; exit 1 } # step 8: push the public folder to the gh-pages branch using subtree split and force push write-host \u0026#34;deploying to github pages...\u0026#34; # check if the temporary branch exists and delete it $branchexists = git branch --list \u0026#34;gh-pages-deploy\u0026#34; if ($branchexists) { git branch -d gh-pages-deploy } # perform subtree split try { git subtree split --prefix public -b gh-pages-deploy } catch { write-error \u0026#34;subtree split failed.\u0026#34; exit 1 } # push to gh-pages branch with force try { git push origin gh-pages-deploy:gh-pages --force } catch { write-error \u0026#34;failed to push to hostinger branch.\u0026#34; git branch -d gh-pages-deploy exit 1 } # delete the temporary branch git branch -d gh-pages-deploy write-host \u0026#34;all done! site synced, processed, committed, built, and deployed.\u0026#34; run the script\neach time you want to sync or upload a new post, simply execute the script: .\\updateblog.ps1 ","title":"Starting a blog"},{"date":"2024-12-05","image":"","imageAlt":"","link":"/posts/learning-vim/","summary":"This guide covers installing Vim, understanding its modes (Normal, Insert, Visual, Command-Line), essential commands, combining actions, and customizing settings with `:set` for efficient text editing.","tags":["linux"],"text":"everything is based on this video.\ninstalling vim first, check if it’s installed by typing vi or vim in the terminal. if you see the following output: it means the program is installed. otherwise, you’ll need to install it using your linux package manager.\nif you\u0026rsquo;re on ubuntu, use the following commands:\nsudo apt install vi or\nsudo apt install vim understanding vim modes vim has several modes, each designed for specific tasks. vim’s modes are its core strength, allowing efficient text manipulation and navigation. each mode has a specific purpose, and transitioning between them is seamless.\n1. normal mode purpose: the default mode for navigating and executing commands.\nhow to enter: press esc from any mode.\nfeatures in normal mode: cursor navigation: use h (left), j (down), k (up), and l (right). jump words with w (next word) or b (back a word). jump to start/end of the line with ^/$. editing commands: dd: delete a line. yy: copy (yank) a line. p: paste copied/cut text. u: undo the last change. search \u0026amp; replace: /the-thing-you-want: search forward for \u0026ldquo;the-thing-you-want\u0026rdquo;. ?the-thing-you-want: search backward for \u0026ldquo;the-thing-you-want\u0026rdquo;. exiting normal mode: you\u0026rsquo;re always in normal mode unless you\u0026rsquo;ve entered another mode. press esc to ensure you\u0026rsquo;re back.\n2. insert mode purpose: to insert text into the file.\nin vim, capitalized versions of commands often extend or modify the behavior of their lowercase counterparts, typically operating on a larger scope or providing a slightly different action. here’s how capitalized versions of i, a, and o behave and differ from their lowercase equivalents:\ni vs. i i (insert mode): enters insert mode at the current cursor position. you can begin inserting text immediately before the character where the cursor is located. i (insert at start of line): enters insert mode at the beginning of the current line, skipping over any leading whitespace or indentation. this is useful for quickly editing or appending text at the start of a line without manually navigating there. example: this is a sentence. (cursor on the \u0026#34;t\u0026#34;) pressing `i`: insert before \u0026#34;t\u0026#34;. pressing `i`: insert at the very start of the line (before the \u0026#34;t\u0026#34; and leading spaces). a vs. a a (append mode): enters insert mode immediately after the current cursor position. allows you to append text to the current character. a (append at end of line): enters insert mode at the end of the current line, regardless of the cursor’s current position. ideal for quickly adding text at the end of a line. example: this is a sentence. (cursor on \u0026#34;t\u0026#34;) pressing `a`: append after \u0026#34;t\u0026#34;. pressing `a`: jump to the end of the line and begin inserting. o vs. o o (open below): opens a new line below the current line and enters insert mode. convenient for adding new lines after the current one. o (open above): opens a new line above the current line and enters insert mode. useful for quickly inserting new lines before the current line. example: line 1 line 2 (cursor here) line 3 pressing `o`: opens a new line below \u0026#34;line 2\u0026#34;. pressing `o`: opens a new line above \u0026#34;line 2\u0026#34;. why capitalization matters capitalized commands like i, a, and o are shortcuts for actions that would otherwise require additional steps or motions:\ni saves time by avoiding manual navigation to the start of the line. a avoids navigating to the end of the line before appending. **o and o make it easy to insert blank lines without leaving the current context. this behavior reflects vim\u0026rsquo;s philosophy of providing shortcuts for repetitive or common editing tasks while maintaining efficient text editing workflows. by mastering these commands, you can significantly improve your productivity in vim.\nfeatures in insert mode: type as you would in a regular text editor. use arrow keys to navigate (though it\u0026rsquo;s better to return to normal mode for navigation). exiting insert mode: press esc to return to normal mode.\n3. visual mode purpose: to select text for manipulation.\nhow to enter:\nv: character-wise selection. v: line-wise selection. ctrl+v: block/column-wise selection. features in visual mode: highlight text with cursor movement. perform actions like: d: cut (delete) selection. y: copy (yank) selection. \u0026gt;/\u0026lt;: indent or unindent selection. it\u0026rsquo;s like pressing tab u/u: convert selection to uppercase/lowercase. exiting visual mode: press esc to return to normal mode.\n4. command-line mode purpose: execute advanced commands like saving, quitting, or search-and-replace.\nhow to enter:\n:: for general commands. /: for forward search. ?: for backward search. examples of commands: :w: save changes. :q: quit. :wq: save and quit. :q!: quit without saving. :s/old/new/g: replace \u0026ldquo;old\u0026rdquo; with \u0026ldquo;new\u0026rdquo; in the current line. exiting command-line mode: press esc to cancel the current command or after executing it.\nthese modes make vim incredibly versatile, catering to diverse editing needs and workflows. by mastering them, you unlock vim\u0026rsquo;s full potential for efficient text editing.\ncombining multiple commands in vim, you can combine multiple commands to perform actions in sequence on text or the file you\u0026rsquo;re editing. this allows for powerful, efficient editing without needing to switch modes repeatedly.\ncommands cheat sheet using command combinations you can combine commands by using command prefixes, which allow you to perform multiple actions in a single command.\nexamples of command combinations: delete word (diw):\nthe command diw combines two commands:\nd: delete iw: inner word (selects the word under the cursor). this deletes the word under the cursor without deleting the space after it.\nthe quick brown fox if the cursor is on \u0026ldquo;quick\u0026rdquo;, pressing diw will delete \u0026ldquo;quick\u0026rdquo;, leaving \u0026ldquo;the brown fox\u0026rdquo;.\nchange word (ciw):\nciw stands for \u0026ldquo;change inner word\u0026rdquo;.\nc: change (deletes and enters insert mode) iw: inner word (selects the word under the cursor). this command deletes the word and enters insert mode for you to type a new word.\nthe quick brown fox if the cursor is on \u0026ldquo;quick\u0026rdquo;, pressing ciw will delete \u0026ldquo;quick\u0026rdquo; and place the cursor in insert mode to type a new word.\ndelete inside brackets (di():\ndi( combines d (delete) and i( (inner parentheses).\nit deletes the contents inside parentheses, but leaves the parentheses themselves intact.\nthis is (sample text) inside parentheses. if the cursor is inside the parentheses, pressing di( will delete \u0026ldquo;sample text\u0026rdquo; but leave the parentheses.\nyank line (yy):\nyy yanks (copies) the entire line the cursor is on, including line breaks. you can also use 2yy to yank multiple lines at once (in this case, 2 lines). indent selection (\u0026gt; or \u0026lt;):\nto indent a selection, you can use the \u0026gt; command. in visual mode (v or v), you can select a block of text and then use \u0026gt; to indent the entire block. to un-indent, use \u0026lt;. undo and redo:\nu: undo the last change. ctrl+r: redo the undone change. combining commands with count prefixes: you can also prefix commands with numbers to apply them a certain number of times.\nexample: 5dd: deletes 5 lines starting from the cursor\u0026rsquo;s current position. example: 3w: moves the cursor forward 3 words. this technique of combining commands and using prefixes significantly enhances vim\u0026rsquo;s efficiency, making it easier to manipulate text with fewer keystrokes.\nthe :set command here are examples of the :set command in vim, showcasing how to customize the editor\u0026rsquo;s behavior and appearance:\n1. enable line numbers absolute line numbers:\n:set number displays line numbers on the left-hand side of the screen.\nrelative line numbers:\n:set relativenumber shows line numbers relative to the current cursor position, making it easier to navigate using commands like 5j or 10k.\ndisable line numbers:\n:set nonumber :set norelativenumber disables both absolute and relative line numbers.\n2. highlight search results enable search highlighting:\n:set hlsearch highlights all search matches in the document.\ndisable search highlighting:\n:set nohlsearch turns off the search highlighting after completing a search.\nenable incremental search:\n:set incsearch shows search results as you type, instead of waiting until you press enter.\ndisable incremental search:\n:set noincsearch 3. auto-indentation enable auto-indentation:\n:set smartindent automatically indents new lines based on the previous line\u0026rsquo;s indentation (useful for programming).\nenable syntax-based indentation:\n:set filetype=python :set smarttab :set autoindent :set tabstop=4 :set shiftwidth=4 customizes indentation rules for a specific file type, such as python. these settings ensure consistent indentation using 4 spaces.\ndisable auto-indentation:\n:set noautoindent :set nosmartindent 4. tab and space settings set tab width:\n:set tabstop=4 sets the width of a tab character to 4 spaces.\nset indentation width:\n:set shiftwidth=4 sets the number of spaces to use for indentation when pressing \u0026gt; or \u0026lt;.\nuse spaces instead of tabs:\n:set expandtab converts tab characters to spaces (commonly used in python and other languages).\nuse tabs instead of spaces:\n:set noexpandtab ensures that tabs are inserted when the tab key is pressed, rather than spaces.\n5. line wrapping enable line wrapping:\n:set wrap enables text wrapping, so lines that extend past the screen width are wrapped onto the next line.\ndisable line wrapping:\n:set nowrap disables text wrapping, and long lines will scroll horizontally instead of wrapping.\n6. search case sensitivity case-insensitive search:\n:set ignorecase makes searches case-insensitive (e.g., searching for \u0026ldquo;apple\u0026rdquo; will match \u0026ldquo;apple\u0026rdquo;, \u0026ldquo;apple\u0026rdquo;, etc.).\ncase-sensitive search:\n:set noignorecase ensures searches are case-sensitive.\nsmart case search:\n:set smartcase makes searches case-insensitive unless you use an uppercase letter in the search query. for example, searching for \u0026ldquo;apple\u0026rdquo; will match all cases, but searching for \u0026ldquo;apple\u0026rdquo; will only match \u0026ldquo;apple\u0026rdquo;.\n7. auto-completion enable file completion:\n:set wildmenu enhances the command-line completion feature with a graphical menu-like interface.\nenable path completion:\n:set wildmode=list:longest enables more intuitive file path completion on the command line.\n8. backup and swap files disable swap files:\n:set noswapfile disables the creation of swap files. swap files are used for recovering unsaved changes in case of a crash.\nenable backup files:\n:set backup :set backupdir=~/vim-backups enables creating backup files when saving a file and specifies the directory for backups.\ndisable backup files:\n:set nobackup 9. status line customization enable the status line:\n:set laststatus=2 always shows the status line at the bottom of the vim window.\ndisable the status line:\n:set laststatus=0 10. show line and column number enable line and column number display: :set ruler displays the current line and column number in the status line, so you always know your position in the file. 11. mouse support enable mouse support:\n:set mouse=a enables mouse support for selecting text and resizing windows inside vim.\ndisable mouse support:\n:set mouse= 12. vim colorscheme set a colorscheme: :colorscheme desert sets the colorscheme to \u0026ldquo;desert\u0026rdquo; (you can replace desert with any other installed colorscheme like elflord, morning, or industry). 13. line break characters display non-printing characters:\n:set list :set listchars=tab:»·,trail:· this shows special characters like tabs (») and trailing spaces (·), which can be useful for cleaning up your text.\nhide non-printing characters:\n:set nolist these :set commands let you tweak vim to match your workflow and preferences, from simple appearance changes to more advanced features like auto-indentation or search behaviors. once you’ve customized your settings, you can even save them in your .vimrc file to make these changes permanent across sessions.\n.vimrc file the .vimrc file is a configuration file that vim loads at startup, allowing you to customize vim’s behavior. location of the .vimrc file: ~/.vimrc\nbasic structure the .vimrc file contains vim commands for settings, keybindings, and other customizations.\n\u0026#34; enable line numbers set number \u0026#34; enable syntax highlighting syntax enable \u0026#34; set color scheme to \u0026#39;desert\u0026#39; colorscheme desert \u0026#34; enable smart indentation, set tab width and spaces for indentation set smartindent \u0026#34; automatically indent new lines set shiftwidth=4 \u0026#34; indentation width for new lines set tabstop=4 \u0026#34; number of spaces a tab is equal to set expandtab \u0026#34; convert tabs to spaces \u0026#34; ignore case during search and highlight search results set ignorecase \u0026#34; ignore case in searches set hlsearch \u0026#34; highlight search matches \u0026#34; enable mouse support in all modes set mouse=a \u0026#34; mouse can be used in all modes (normal, insert, visual, etc.) \u0026#34; enable backup files and specify backup directory set backup \u0026#34; enable backup files set backupdir=~/vim-backups \u0026#34; set the directory for backup files \u0026#34; automatically set the filetype to python for .py files autocmd bufread,bufnewfile *.py set filetype=python \u0026#34; map \u0026#39;jj\u0026#39; to escape insert mode (useful for avoiding the esc key) inoremap jj \u0026lt;esc\u0026gt; \u0026#34; press \u0026#39;jj\u0026#39; to exit insert mode explanation of comments: line numbers: displays line numbers for easier navigation. syntax highlighting: enables syntax color coding for better readability. color scheme: sets a predefined color scheme for the editor. indentation: configures tab and space behavior to match the desired coding style. search settings: makes searches case-insensitive and highlights matching results. mouse support: allows using the mouse in all vim modes. backup files: enables backups and sets the directory where backup files will be stored. filetype settings: automatically applies file-specific settings based on file extension (e.g., python for .py files). key mapping: allows custom key mappings, such as pressing jj to exit insert mode. waypoints in vim waypoints are useful for marking specific places in your file to quickly return to. this can be especially helpful when navigating through large files. in vim, waypoints are often referred to as marks.\nsetting and using marks: set a mark: to set a mark, press m followed by a letter (a-z). for example, ma sets a mark named a at the current cursor position. jump to a mark: to jump to a specific mark, press ' followed by the mark\u0026rsquo;s letter. for example, 'a takes you to the position where mark a was set. view all marks: you can see a list of all active marks by typing :marks. example: move to a specific line, say line 10. set a mark with ma (mark \u0026ldquo;a\u0026rdquo;). continue editing elsewhere. return to the mark by typing 'a. marks allow you to quickly navigate between important points in your file without needing to rely on line numbers or searching.\nthe :reg command the :reg command in vim allows you to view and manage the contents of vim\u0026rsquo;s registers. registers are temporary storage areas where text is stored when you cut, copy, or paste in vim. this command helps you access these stored texts, allowing for easy retrieval and reuse.\nviewing registers to view the contents of all registers, type :reg and press enter. this will display a list of registers and their contents. using specific registers you can access specific registers by typing :reg followed by the register name. for example, :reg a shows the contents of register a. types of registers: unnamed register (\u0026quot;\u0026quot;): stores text that was last yanked or deleted. named registers (a-z): these are registers that you can explicitly specify when yanking or deleting. you can yank or delete to a specific register with \u0026quot;a, \u0026quot;b, etc. numbered registers (0-9): automatically store text from the most recent yank or delete operations, with 0 holding the most recent yank. special registers: \u0026quot;%: the current file name. \u0026quot;#: the name of the alternate file. \u0026quot;* and \u0026quot;+: access to the system clipboard (if supported). macro registers (q-z): these registers are used to store macros (sequences of commands). by recording a macro, you can save a sequence of commands to a register and replay them later. examples: copying to a register: \u0026quot;ayw: yank a word into register a. pasting from a register: \u0026quot;ap: paste the content of register a. viewing register contents: :reg a: view the contents of register a. saving a macro to a register: press q followed by any register letter (e.g., qa) to start recording a macro into register a perform the desired actions. press q again to stop recording. playing a macro from a register: press @a to replay the macro stored in register a. the :reg command, along with macro functionality, gives you powerful tools to manage and reuse text and commands in vim, enhancing your productivity and workflow.\n","title":"Learning VIM"},{"date":"2024-12-04","image":"","imageAlt":"","link":"/posts/download-vs-code-on-linux/","summary":"This guide explains downloading and installing Visual Studio Code on Linux using a `.deb` file. It includes navigating the website, terminal commands for installation, and a lighthearted waiting tip.","tags":["linux"],"text":" visit the visual studio code download page. download the appropriate .deb file for your system.\nonce the download is complete, open a terminal and run the following command to install it:\nsudo dpkg -i ./the-vscode-.deb-file (replace ./the-vscode-.deb-file with the actual file name you downloaded.)\nthe installation process might take a while, so feel free to grab a snack while it completes.\n","title":"Download VS-Code on Linux"},{"date":"0001-01-01","image":"","imageAlt":"","link":"/posts/running-ros-on-raspberry-pi/","summary":"\u003cp\u003eTo run ROS on a Raspberry Pi, we need to install Ubuntu because ROS isn\u0026rsquo;t officially supported on Raspberry Pi OS. Given the hardware limitations of the Raspberry Pi 3 with only 1GB of RAM, it\u0026rsquo;s not powerful enough to handle Ubuntu Core efficiently. Instead, we need to install \u003cstrong\u003eUbuntu Server\u003c/strong\u003e, which is a lightweight alternative that can better accommodate the limited resources of the Raspberry Pi.\u003c/p\u003e","tags":[],"text":"to run ros on a raspberry pi, we need to install ubuntu because ros isn\u0026rsquo;t officially supported on raspberry pi os. given the hardware limitations of the raspberry pi 3 with only 1gb of ram, it\u0026rsquo;s not powerful enough to handle ubuntu core efficiently. instead, we need to install ubuntu server, which is a lightweight alternative that can better accommodate the limited resources of the raspberry pi.\ninstalling ubuntu server on raspberry pi 1. download the raspberry pi imager first, go to the official website and download the raspberry pi imager. 2. install the imager after downloading the imager, open the file to start the installation process. click install and then next when prompted. 3. launch the app once the imager is installed, open the application. 4. select your device choose the device you want to use. in my case, it\u0026rsquo;s the raspberry pi 3.\n5. choose the operating system when selecting the os, choose other general-purpose os. then, select ubuntu. ensure that you select ubuntu server. make sure to choose the latest version of ubuntu server.\n6. select storage choose the storage device you want to use. keep in mind that all data on the storage will be erased during the installation process, so select the correct device. 7. finalize and install once you’ve selected the device and os, click next. a confirmation screen will appear. note: click edit settings do not click no you will be fucked down the line in the general tab, enter your desired username and password. changing the wireless lan settings here won\u0026rsquo;t affect the settings in the os, so you can skip that part if needed.\tin the\nservices tab, ensure that enable ssh is checked, and select password authentication.\tonce done, click save, confirm with yes, and wait for the download to complete.\nnow you have ubuntu server installed on your sd card!\n8. booting the raspberry pi take the sd card that you\u0026rsquo;ve prepared with ubuntu server and insert it into the raspberry pi. connect the raspberry pi to a monitor, keyboard, and power source, then power it up. the system will perform some initial setup tasks, which you can ignore. after a short time, the raspberry pi will prompt you to log in.\nuse the same username and password you entered earlier to login. you should now be logged into ubuntu server on your raspberry pi and ready to proceed with setting up ros or other tasks. connecting ubuntu server to wi-fi connecting ubuntu server to wi-fi without a gui can be done using the terminal and a tool like netplan, which is included by default in recent ubuntu versions. here’s the easiest way to get connected:\n1. identify your wireless interface: run the following command to list your network interfaces: ip link look for an interface name like wlan0 or wlp3s0 (this is your wireless interface). 2. edit the netplan configuration: open the netplan configuration file for your system. the file is usually located /etc/netplan/. use the following command to find it: ls /etc/netplan/ open the configuration file (replace filename.yaml with the actual file name): sudo nano /etc/netplan/filename.yaml 3. add wi-fi configuration: update the file to include your wi-fi settings. here\u0026rsquo;s an example configuration: network: version: 2 wifis: wlan0: # replace with your interface name dhcp4: true access-points: \u0026#34;yourwifissid\u0026#34;: password: yourwifipassword make sure you copy the spaces and tabs correctly 4. apply the configuration: save and close the file (ctrl+o, enter, and ctrl+x in nano). apply the new configuration: sudo netplan apply 5. test the connection: check if you are connected to wi-fi: ip a look for an ip address under your wireless interface. starting the ssh server we will start the ssh server to remotely access the raspberry pi\nenable the ssh server you have two options but if you did as i said in the installation the ssh server should be already installed\nwhile flashing a fresh os image follow the instructions in the [[running ros on raspberry pi#7. finalize and install]] guide. during the os customisation step, navigate to the services tab. tick the checkbox to enable ssh. select password authentication to log in using the same username and password you use while physically using your raspberry pi. select allow public-key authentication only to configure an ssh key for passwordless login. note: i didn\u0026rsquo;t understand the passwordless login so from the terminal enter sudo raspi-config in a terminal window. select interfacing options. navigate to and select ssh. choose yes. select ok. choose finish. \u0026ldquo;airbox-e798\u0026rdquo;: password: hh65cm6u 192.168.1.60\nsudo apt install python3-rpi.gpio sudo apt install python3-venv python3 -m venv venv source venv/bin/activate\n","title":""}]
}

