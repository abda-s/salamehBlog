<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>ROS on Abdullah Salameh&#39;s Blog</title>
    <link>/tags/ros/</link>
    <description>Recent content in ROS on Abdullah Salameh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ros/index.xml" rel="self" type="application/rss+xml" /><icon>/logo.svg</icon>
    
    
    <item>
      <title>ROS 2 Cheat Sheets</title>
      <link>/posts/ros-2-cheat-sheets/</link>
      <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/ros-2-cheat-sheets/</guid>
      <description><![CDATA[<h2 id="ros-2-environment-configuration-cheat-sheet">ROS 2 Environment Configuration Cheat Sheet</h2>
<hr>
<h3 id="commands-and-explanations">Commands and Explanations</h3>
<h3 id="1-source-the-setup-files">1. Source the Setup Files</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>source /opt/ros/&lt;distro&gt;/setup.bash
</span></span></code></pre></div><ul>
<li>Activates ROS 2 in the current shell session by setting necessary environment variables.</li>
<li>Replace <code>&lt;distro&gt;</code> with the name of your installed ROS 2 distribution (e.g., <code>humble</code>, <code>galactic</code>, <code>jazzy</code>).</li>
</ul>
<h3 id="2-add-sourcing-to-shell-startup-script">2. Add Sourcing to Shell Startup Script</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;source /opt/ros/&lt;distro&gt;/setup.bash&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><ul>
<li>Automatically sources ROS 2 every time you open a new shell.</li>
<li>Modify <code>~/.bashrc</code> to include the source command.</li>
</ul>
<p>Undo this step:</p>
<ul>
<li>Edit the <code>~/.bashrc</code> file manually to remove the line added.</li>
</ul>
<h3 id="3-check-environment-variables">3. Check Environment Variables</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>printenv | grep -i ROS
</span></span></code></pre></div><ul>
<li>Verifies if ROS environment variables are correctly set (e.g., <code>ROS_DISTRO</code>, <code>ROS_VERSION</code>).</li>
</ul>
<h3 id="4-set-the-ros_domain_id-variable">4. Set the ROS_DOMAIN_ID Variable</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export ROS_DOMAIN_ID<span style="color:#f92672">=</span>&lt;your_domain_id&gt;
</span></span></code></pre></div><ul>
<li>Sets a unique domain ID for communication between ROS 2 nodes.</li>
<li>Add to <code>~/.bashrc</code> for persistence:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;export ROS_DOMAIN_ID=&lt;your_domain_id&gt;&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><h3 id="5-set-the-ros_automatic_discovery_range-variable">5. Set the ROS_AUTOMATIC_DISCOVERY_RANGE Variable</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export ROS_AUTOMATIC_DISCOVERY_RANGE<span style="color:#f92672">=</span>&lt;range_value&gt;
</span></span></code></pre></div><ul>
<li>Limits ROS 2 discovery range, useful in environments with multiple robots.</li>
<li>Add to <code>~/.bashrc</code> for persistence:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;export ROS_AUTOMATIC_DISCOVERY_RANGE=&lt;range_value&gt;&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><h2 id="turtlesim-and-ros2-cheat-sheet">Turtlesim and ROS2 Cheat Sheet</h2>
<hr>
<h3 id="1-install-turtlesim">1. Install Turtlesim</h3>
<ul>
<li>Install Turtlesim:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt update
</span></span><span style="display:flex;"><span>sudo apt install ros-&lt;ros2-distro&gt;-turtlesim
</span></span></code></pre></div><ul>
<li>Check installed executables:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 pkg executables turtlesim
</span></span></code></pre></div><h3 id="2-start-turtlesim">2. Start Turtlesim</h3>
<ul>
<li>Launch the turtlesim node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><h3 id="3-control-the-turtle">3. Control the Turtle</h3>
<ul>
<li>Launch the teleop node to control the turtle:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtle_teleop_key
</span></span></code></pre></div><p>Additional ROS2 commands:</p>
<ul>
<li>List active nodes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node list
</span></span></code></pre></div><ul>
<li>List available topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>List available services:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><ul>
<li>List available actions:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action list
</span></span></code></pre></div><h3 id="4-install-and-use-rqt">4. Install and Use RQT</h3>
<ul>
<li>Install RQT and plugins:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt update
</span></span><span style="display:flex;"><span>sudo apt install <span style="color:#e6db74">&#39;~nros-&lt;ros2-distro&gt;-rqt*&#39;</span>
</span></span></code></pre></div><ul>
<li>Launch RQT:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rqt
</span></span></code></pre></div><h3 id="5-use-rqt-service-caller">5. Use RQT Service Caller</h3>
<ul>
<li>Select the Service Caller plugin:
<ul>
<li>Navigate to: Plugins &gt; Services &gt; Service Caller</li>
</ul>
</li>
<li>Refresh services:
<ul>
<li>Click on the Refresh button.</li>
</ul>
</li>
</ul>
<h3 id="6-spawn-a-new-turtle-service-call">6. Spawn a New Turtle (Service Call)</h3>
<ul>
<li>Call the <code>/spawn</code> service (in RQT Service Caller):
<ul>
<li>Name: <code>turtle2</code></li>
<li>Coordinates: <code>x = 1.0</code>, <code>y = 1.0</code></li>
<li>Click Call to spawn a new turtle.</li>
</ul>
</li>
</ul>
<h3 id="7-change-pen-settings-service-call">7. Change Pen Settings (Service Call)</h3>
<ul>
<li>Call the <code>/set_pen</code> service (in RQT Service Caller):
<ul>
<li><code>r = 255</code> (red)</li>
<li><code>width = 5</code></li>
<li>Click Call.</li>
</ul>
</li>
</ul>
<h3 id="8-remap-topics-for-multiple-turtles">8. Remap Topics for Multiple Turtles</h3>
<ul>
<li>Remap the <code>cmd_vel</code> topic for turtle2:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:<span style="color:#f92672">=</span>turtle2/cmd_vel
</span></span></code></pre></div><h3 id="9-stop-turtlesim">9. Stop Turtlesim</h3>
<ul>
<li>Stop the turtlesim node:
<ul>
<li>Press Ctrl + C in the <code>turtlesim_node</code> terminal.</li>
</ul>
</li>
<li>Stop the teleop node:
<ul>
<li>Press q in the <code>turtle_teleop_key</code> terminal.</li>
</ul>
</li>
</ul>
<h2 id="understanding-nodes-in-ros-2-cheat-sheet">Understanding Nodes in ROS 2 Cheat Sheet</h2>
<hr>
<h3 id="the-ros-2-graph">The ROS 2 Graph</h3>
<p>The ROS 2 graph represents the network of ROS 2 elements (nodes, topics, services, etc.) interacting in real-time. A robot system can be visualized as multiple nodes processing data together. Each node in ROS 2 serves a specific modular function (e.g., controlling motors or publishing sensor data).</p>
<hr>
<h3 id="nodes-in-ros-2">Nodes in ROS 2</h3>
<ul>
<li>
<p>What is a Node?<br>
A node is an executable responsible for a specific task (e.g., controlling motors, publishing sensor data) and communicates with other nodes via topics, services, actions, or parameters.</p>
</li>
<li>
<p>Single or Multiple Nodes per Executable:<br>
A single ROS 2 executable (written in C++ or Python) can contain multiple nodes.</p>
</li>
</ul>
<p><img src="Pasted%20image%2020241215001625.png" alt="Image Description"></p>
<hr>
<h3 id="1-ros2-run">1. ros2 run</h3>
<p>The <code>ros2 run</code> command is used to run an executable from a specific package.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run &lt;package_name&gt; &lt;executable_name&gt;
</span></span></code></pre></div><ul>
<li>Example to run the turtlesim:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><p>This will open a window with a turtle in it.</p>
<h3 id="2-ros2-node-list">2. ros2 node list</h3>
<p>To list all active nodes in the ROS 2 system:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node list
</span></span></code></pre></div><h3 id="3-ros2-node-info">3. ros2 node info</h3>
<p>The <code>ros2 node info &lt;node_name&gt;</code> command provides detailed information about a node’s publishers, subscribers, services, and actions.</p>
<ul>
<li>Example to get info about the <code>/turtlesim</code> node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info /turtlesim
</span></span></code></pre></div><h3 id="31-remapping-node-names-and-topics">3.1 Remapping Node Names and Topics</h3>
<ul>
<li>Remap the node name using <code>--ros-args --remap</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --remap __node:<span style="color:#f92672">=</span>my_turtle
</span></span></code></pre></div><ul>
<li>This will rename <code>/turtlesim</code> to <code>/my_turtle</code>. If you run <code>ros2 node list</code>, you will see:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/my_turtle
</span></span><span style="display:flex;"><span>/teleop_turtle
</span></span></code></pre></div><h2 id="ros-2-topic-commands-cheat-sheet">ROS 2 Topic Commands Cheat Sheet</h2>
<hr>
<h3 id="topics-in-ros2">Topics in ROS2</h3>
<ul>
<li>What is a topic
A topic in ROS 2 is a communication channel through which nodes can publish and subscribe to messages, enabling data exchange between them.</li>
</ul>
<p><img src="Pasted%20image%2020241215005244.png" alt="Image Description"></p>
<hr>
<h3 id="1-rqt_graph-graphical-tool">1. rqt_graph (Graphical Tool):</h3>
<ul>
<li>Run rqt_graph to visualize the nodes and topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rqt_graph
</span></span></code></pre></div><ul>
<li>Open via GUI: <code>rqt &gt; Plugins &gt; Introspection &gt; Node Graph</code>.</li>
</ul>
<h3 id="2-ros2-topic-list">2. ros2 topic list:</h3>
<ul>
<li>List all active topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>List topics with types:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list -t
</span></span></code></pre></div><h3 id="3-ros2-topic-echo">3. ros2 topic echo:</h3>
<ul>
<li>Display the data being published on a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: To see <code>/turtle1/cmd_vel</code> data:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo /turtle1/cmd_vel
</span></span></code></pre></div><h3 id="4-ros2-topic-info">4. ros2 topic info:</h3>
<ul>
<li>Get info about a specific topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic info &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Info about <code>/turtle1/cmd_vel</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic info /turtle1/cmd_vel
</span></span></code></pre></div><h3 id="5-ros2-interface-show">5. ros2 interface show:</h3>
<ul>
<li>Show the structure of a message type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show &lt;msg_type&gt;
</span></span></code></pre></div><ul>
<li>Example: For <code>geometry_msgs/msg/Twist</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show geometry_msgs/msg/Twist
</span></span></code></pre></div><h3 id="6-ros2-topic-pub">6. ros2 topic pub:</h3>
<ul>
<li>Publish data to a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub &lt;topic_name&gt; &lt;msg_type&gt; <span style="color:#e6db74">&#34;&lt;args&gt;&#34;</span>
</span></span></code></pre></div><ul>
<li>Example: To continuously move the turtle:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist <span style="color:#e6db74">&#34;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}&#34;</span>
</span></span></code></pre></div><ul>
<li>Publish once:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> ros2 topic pub --once &lt;topic_name&gt; &lt;msg_type&gt; <span style="color:#e6db74">&#34;&lt;args&gt;&#34;</span>
</span></span></code></pre></div><h3 id="7-ros2-topic-hz">7. ros2 topic hz:</h3>
<ul>
<li>View the rate of data publishing:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic hz &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Check the rate for <code>/turtle1/pose</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic hz /turtle1/pose
</span></span></code></pre></div><h3 id="8-ros2-topic-bw">8. ros2 topic bw:</h3>
<ul>
<li>Check bandwidth usage for a topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic bw &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Example: Check bandwidth for <code>/turtle1/pose</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic bw /turtle1/pose
</span></span></code></pre></div><h3 id="9-ros2-topic-find">9. ros2 topic find:</h3>
<ul>
<li>Find topics by message type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic find &lt;msg_type&gt;
</span></span></code></pre></div><ul>
<li>Example: Find topics with <code>geometry_msgs/msg/Twist</code> type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic find geometry_msgs/msg/Twist
</span></span></code></pre></div><h2 id="ros-2-services-cheat-sheet">ROS 2 Services Cheat Sheet</h2>
<hr>
<h3 id="services-in-ros2">Services in ROS2:</h3>
<p>Services in ROS 2 follow a call-and-response model, where nodes request data from a service and receive a response. Unlike topics, services only provide data when specifically called by a client.</p>
<p><img src="Pasted%20image%2020241215010056.png" alt="Image Description"></p>
<hr>
<h3 id="1-list-active-services">1. List Active Services:</h3>
<ul>
<li>View all active services in ROS 2:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><h3 id="2-service-type">2. Service Type:</h3>
<ul>
<li>Check the type of a service (e.g., <code>/clear</code>):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service type /clear
</span></span></code></pre></div><h3 id="3-service-info">3. Service Info:</h3>
<ul>
<li>Get info about a service (e.g., <code>/clear</code>):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service info /clear
</span></span></code></pre></div><h3 id="4-find-services-by-type">4. Find Services by Type:</h3>
<ul>
<li>Find services of a specific type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service find std_srvs/srv/Empty
</span></span></code></pre></div><h3 id="5-show-service-interface">5. Show Service Interface:</h3>
<ul>
<li>View the request/response structure of a service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show turtlesim/srv/Spawn
</span></span></code></pre></div><h3 id="6-call-a-service">6. Call a Service:</h3>
<ul>
<li>Call a service with or without arguments:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service call /clear std_srvs/srv/Empty
</span></span><span style="display:flex;"><span>ros2 service call /spawn turtlesim/srv/Spawn <span style="color:#e6db74">&#34;{x: 2, y: 2, theta: 0.2, name: &#39;&#39;}&#34;</span>
</span></span></code></pre></div><h3 id="7-echo-service-data">7. Echo Service Data:</h3>
<ul>
<li>View service communication (request/response):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service echo /add_two_ints
</span></span></code></pre></div><p>Here is the content with the requested headings formatted as <code>####</code>:</p>
<hr>
<h2 id="ros-2-parameters-cheat-sheet">ROS 2 Parameters Cheat Sheet</h2>
<h3 id="parameters-in-ros2">Parameters in ROS2:</h3>
<p>Parameters in ROS 2 are configuration values for nodes, like settings that can be integers, floats, booleans, strings, and lists. Each node can maintain its own parameters.</p>
<h3 id="1-ros2-param-list">1. ros2 param list</h3>
<ul>
<li>List all parameters for all nodes:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param list
</span></span></code></pre></div><ul>
<li>Example output:</li>
</ul>
<pre tabindex="0"><code>/teleop_turtle:
	scale_angular
	scale_linear
	use_sim_time
/turtlesim:
	background_b
	background_g
    background_r
    use_sim_time
</code></pre><h3 id="2-ros2-param-get">2. ros2 param get</h3>
<ul>
<li>Get the value and type of a parameter:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param get &lt;node_name&gt; &lt;parameter_name&gt;
</span></span></code></pre></div><ul>
<li>Example to get the value of <code>/turtlesim background_g</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param get /turtlesim background_g
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Integer value is: 86
</code></pre><h3 id="3-ros2-param-set">3. ros2 param set</h3>
<ul>
<li>Change a parameter’s value:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param set &lt;node_name&gt; &lt;parameter_name&gt; &lt;value&gt;
</span></span></code></pre></div><ul>
<li>Example to change <code>/turtlesim background_r</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param set /turtlesim background_r <span style="color:#ae81ff">150</span>
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Set parameter successful
</code></pre><h3 id="4-ros2-param-dump">4. ros2 param dump</h3>
<ul>
<li>View and save a node&rsquo;s parameters to a file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param dump &lt;node_name&gt; &gt; &lt;file_name&gt;.yaml
</span></span></code></pre></div><ul>
<li>Example for <code>/turtlesim</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param dump /turtlesim &gt; turtlesim.yaml
</span></span></code></pre></div><h3 id="5-ros2-param-load">5. ros2 param load</h3>
<ul>
<li>Load parameters from a file into a node:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param load &lt;node_name&gt; &lt;parameter_file&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 param load /turtlesim turtlesim.yaml
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>Set parameter background_b successful
Set parameter background_g successful
Set parameter background_r successful
</code></pre><h3 id="6-load-parameter-file-on-node-startup">6. Load Parameter File on Node Startup</h3>
<ul>
<li>Start a node with saved parameters:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run &lt;package_name&gt; &lt;executable_name&gt; --ros-args --params-file &lt;file_name&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml
</span></span></code></pre></div><p>Here&rsquo;s the version without any tabs before the code blocks:</p>
<hr>
<h2 id="ros-2-actions-cheat-sheet">ROS 2 Actions Cheat Sheet</h2>
<h3 id="overview-of-actions">Overview of Actions</h3>
<ul>
<li>Actions in ROS 2 are for long-running tasks that can be canceled and provide feedback.</li>
<li>Actions are a combination of Goal, Feedback, and Result.</li>
<li>They use a client-server model similar to topics but allow steady feedback and cancellation.</li>
<li>Action Client sends goals to the Action Server, which processes the goal and sends feedback/results.
<img src="Pasted%20image%2020241215011642.png" alt="Image Description"></li>
</ul>
<hr>
<h3 id="1-ros2-node-info">1. ros2 node info</h3>
<ul>
<li>View a node&rsquo;s information, including its actions:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info &lt;node_name&gt;
</span></span></code></pre></div><ul>
<li>Example for <code>/turtlesim</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 node info /turtlesim
</span></span></code></pre></div><p>This shows the Action Servers and Action Clients for the node.</p>
<h3 id="2-ros2-action-list">2. ros2 action list</h3>
<ul>
<li>List all actions in the ROS graph:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action list
</span></span></code></pre></div><p>This will return available actions such as <code>/turtle1/rotate_absolute</code>.</p>
<h3 id="3-ros2-action-type">3. ros2 action type</h3>
<ul>
<li>Check the action type for a specific action:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action type /turtle1/rotate_absolute
</span></span></code></pre></div><ul>
<li>Output example:</li>
</ul>
<pre tabindex="0"><code>turtlesim/action/RotateAbsolute
</code></pre><h3 id="4-ros2-action-info">4. ros2 action info</h3>
<ul>
<li>View detailed information about an action:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action info /turtle1/rotate_absolute
</span></span></code></pre></div><ul>
<li>Example output:</li>
</ul>
<pre tabindex="0"><code>Action: /turtle1/rotate_absolute
Action clients: 1
    /teleop_turtle
Action servers: 1
    /turtlesim
</code></pre><h3 id="5-ros2-interface-show-1">5. ros2 interface show</h3>
<ul>
<li>Inspect the structure of the action type:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 interface show turtlesim/action/RotateAbsolute
</span></span></code></pre></div><ul>
<li>This will show the structure of the goal, result, and feedback:</li>
</ul>
<pre tabindex="0"><code>The desired heading in radians
float32 theta
---
The angular displacement in radians to the starting position
float32 delta
---
The remaining rotation in radians
float32 remaining
</code></pre><h3 id="6-ros2-action-send_goal">6. ros2 action send_goal</h3>
<ul>
<li>Send a goal to an action server:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal &lt;action_name&gt; &lt;action_type&gt; &lt;values&gt;
</span></span></code></pre></div><ul>
<li>Example:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute <span style="color:#e6db74">&#34;{theta: 1.57}&#34;</span>
</span></span></code></pre></div><ul>
<li>Add <code>--feedback</code> to receive feedback during goal execution:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute <span style="color:#e6db74">&#34;{theta: -1.57}&#34;</span> --feedback
</span></span></code></pre></div><p>Here is the content with only the commands formatted without tabs:</p>
<h2 id="usingrqt_consoleto-view-logs">Using <code>rqt_console</code> to view logs</h2>
<hr>
<h3 id="1-setup">1. Setup</h3>
<p>Start rqt_console in a new terminal with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run rqt_console rqt_console
</span></span></code></pre></div><p>Now, start turtlesim in a new terminal with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node
</span></span></code></pre></div><h3 id="2-messages-on-rqt_console">2. Messages on rqt_console</h3>
<p>To produce log messages for rqt_console to display, let’s have the turtle run into the wall. In a new terminal, enter the ros2 topic pub command below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic pub -r <span style="color:#ae81ff">1</span> /turtle1/cmd_vel geometry_msgs/msg/Twist <span style="color:#e6db74">&#34;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}&#34;</span>
</span></span></code></pre></div><p>Press <code>Ctrl+C</code> in the terminal where you ran the ros2 topic pub command to stop your turtle from running into the wall.</p>
<h3 id="3-set-the-default-logger-level">3. Set the Default Logger Level</h3>
<p>You can set the default logger level when you first run the <code>/turtlesim</code> node using remapping. Enter the following command in your terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 run turtlesim turtlesim_node --ros-args --log-level WARN
</span></span></code></pre></div><p>Here is a cheat sheet for recording and playing back data using <code>ros2 bag</code>, excluding the previously mentioned commands:</p>
<h2 id="recording-and-playing-back-data-in-ros-2">Recording and Playing Back Data in ROS 2</h2>
<hr>
<h3 id="managing-topic-data">Managing Topic Data</h3>
<h4 id="1-setup-1">1. Setup</h4>
<ul>
<li>Start the <code>/turtlesim</code> and <code>/teleop_turtle</code> nodes.</li>
<li>Create a directory for saving recordings.</li>
</ul>
<h4 id="2-choose-a-topic">2. Choose a Topic</h4>
<ul>
<li>To list available topics in your system, run:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic list
</span></span></code></pre></div><ul>
<li>To inspect the data of a topic, run:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 topic echo &lt;topic_name&gt;
</span></span></code></pre></div><h4 id="3-record-topics">3. Record Topics</h4>
<ul>
<li>Single Topic:<br>
Record a single topic:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record &lt;topic_name&gt;
</span></span></code></pre></div><ul>
<li>Multiple Topics:<br>
Record multiple topics and specify a custom bag file name:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record -o &lt;file_name&gt; &lt;topic1&gt; &lt;topic2&gt; ...
</span></span></code></pre></div><ul>
<li>Record All Topics:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record -a
</span></span></code></pre></div><h4 id="4-inspect-topic-data">4. Inspect Topic Data</h4>
<ul>
<li>To see details about a recorded bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag info &lt;bag_file_name&gt;
</span></span></code></pre></div><h4 id="5-play-topic-data">5. Play Topic Data</h4>
<ul>
<li>To replay a bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag play &lt;bag_file_name&gt;
</span></span></code></pre></div><hr>
<h3 id="managing-service-data">Managing Service Data</h3>
<h4 id="1-setup-2">1. Setup</h4>
<ul>
<li>Start the <code>introspection_service</code> and <code>introspection_client</code> nodes with Service Introspection enabled.</li>
</ul>
<h4 id="2-check-service-availability">2. Check Service Availability</h4>
<ul>
<li>List all available services:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service list
</span></span></code></pre></div><ul>
<li>To check if Service Introspection is enabled on a specific service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 service echo --flow-style &lt;service_name&gt;
</span></span></code></pre></div><h4 id="3-record-services">3. Record Services</h4>
<ul>
<li>Record a Specific Service:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag record --service &lt;service_name&gt;
</span></span></code></pre></div><ul>
<li>Record All Services:</li>
</ul>
<pre tabindex="0"><code>ros2 bag record --all-services
</code></pre><h4 id="4-inspect-service-data">4. Inspect Service Data</h4>
<ul>
<li>To inspect a recorded service data bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag info &lt;bag_file_name&gt;
</span></span></code></pre></div><h4 id="5-play-service-data">5. Play Service Data</h4>
<ul>
<li>To replay service data from the bag file:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ros2 bag play --publish-service-requests &lt;bag_file_name&gt;
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Running ROS on Raspberry Pi</title>
      <link>/posts/running-ros-on-raspberry-pi/</link>
      <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/running-ros-on-raspberry-pi/</guid>
      <description><![CDATA[<p><strong>Note</strong>: I&rsquo;m still working on this! 😊</p>
<p>To run ROS on a Raspberry Pi, we need to install Ubuntu because ROS isn&rsquo;t officially supported on Raspberry Pi OS. Given the hardware limitations of the Raspberry Pi 3 with only 1GB of RAM, it&rsquo;s not powerful enough to handle Ubuntu Core efficiently. Instead, we need to install <strong>Ubuntu Server</strong>, which is a lightweight alternative that can better accommodate the limited resources of the Raspberry Pi.</p>
<h2 id="installing-ubuntu-server-on-raspberry-pi">Installing Ubuntu Server on Raspberry Pi</h2>
<h3 id="1-download-the-raspberry-pi-imager">1. Download the Raspberry Pi Imager</h3>
<p>First, go to the <a href="https://www.raspberrypi.com/software/">official website</a> and download the Raspberry Pi Imager.
<img src="/images/1.png" alt="Image Description"></p>
<h3 id="2-install-the-imager">2. Install the Imager</h3>
<p>After downloading the imager, open the file to start the installation process. Click <strong>Install</strong> and then <strong>Next</strong> when prompted.
<img src="/images/2.png" alt="Image Description"></p>
<h3 id="3-launch-the-app">3. Launch the App</h3>
<p>Once the imager is installed, open the application. <br>
<img src="/images/Pasted%20image%2020241202212428.png" alt="Image Description"></p>
<h3 id="4-select-your-device">4. Select Your Device</h3>
<p>Choose the device you want to use. In my case, it&rsquo;s the <strong>Raspberry Pi 3</strong>.</p>
<h3 id="5-choose-the-operating-system">5. Choose the Operating System</h3>
<p>When selecting the OS, choose <strong>Other general-purpose OS</strong>.
<img src="/images/Pasted%20image%2020241202212609.png" alt="Image Description"><br>
Then, select <strong>Ubuntu</strong>.    <img src="/images/Pasted%20image%2020241202212735.png" alt="Image Description"><br>
Ensure that you select <strong>Ubuntu Server</strong>.
<img src="/images/Pasted%20image%2020241202212911.png" alt="Image Description">
Make sure to choose the latest version of Ubuntu Server.</p>
<h3 id="6-select-storage">6. Select Storage</h3>
<p>Choose the storage device you want to use. Keep in mind that all data on the storage will be erased during the installation process, so select the correct device. <br>
<img src="/images/Pasted%20image%2020241202213057.png" alt="Image Description"></p>
<h3 id="7-finalize-and-install">7. Finalize and Install</h3>
<p>Once you’ve selected the device and OS, click <strong>Next</strong>. A confirmation screen will appear. <br>
<img src="/images/Pasted%20image%2020241203011921.png" alt="Image Description">	<strong>Note</strong>: Click Edit Settings <em>do not click No</em> you will be fucked down the line
<img src="/images/Pasted%20image%2020241203012226.png" alt="Image Description">
In the <strong>GENERAL</strong> tab, enter your desired username and password. Changing the wireless LAN settings here won&rsquo;t affect the settings in the OS, so you can skip that part if needed.	In the</p>
<p><strong>SERVICES</strong> tab, ensure that <strong>Enable SSH</strong> is checked, and select <strong>Password Authentication</strong>.	 <img src="/images/Pasted%20image%2020241203012505.png" alt="Image Description">
Once done, click <strong>Save</strong>, confirm with <strong>Yes</strong>, and wait for the download to complete.</p>
<p>Now you have Ubuntu Server installed on your SD card!</p>
<h3 id="8-booting-the-raspberry-pi">8. Booting the Raspberry Pi</h3>
<p>Take the SD card that you&rsquo;ve prepared with Ubuntu Server and insert it into the Raspberry Pi. Connect the Raspberry Pi to a monitor, keyboard, and power source, then power it up. The system will perform some initial setup tasks, which you can ignore. After a short time, the Raspberry Pi will prompt you to log in.</p>
<ul>
<li>Use the same username and password you entered earlier to login.
You should now be logged into Ubuntu Server on your Raspberry Pi and ready to proceed with setting up ROS or other tasks.</li>
</ul>
<h2 id="connecting-ubuntu-server-to-wi-fi">Connecting Ubuntu Server to Wi-Fi</h2>
<p>Connecting Ubuntu Server to Wi-Fi without a GUI can be done using the terminal and a tool like <code>netplan</code>, which is included by default in recent Ubuntu versions. Here’s the easiest way to get connected:</p>
<h3 id="1-identify-your-wireless-interface">1. Identify Your Wireless Interface:</h3>
<ul>
<li>Run the following command to list your network interfaces:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ip link
</span></span></code></pre></div><ul>
<li>Look for an interface name like <code>wlan0</code> or <code>wlp3s0</code> (this is your wireless interface).</li>
</ul>
<h3 id="2-edit-the-netplan-configuration">2. Edit the Netplan Configuration:</h3>
<ul>
<li>Open the Netplan configuration file for your system. The file is usually located <code>/etc/netplan/</code>. Use the following command to find it:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ls /etc/netplan/
</span></span></code></pre></div><ul>
<li>Open the configuration file (replace <code>filename.yaml</code> with the actual file name):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo nano /etc/netplan/filename.yaml
</span></span></code></pre></div><h3 id="3-add-wi-fi-configuration">3. Add Wi-Fi Configuration:</h3>
<ul>
<li>Update the file to include your Wi-Fi settings. Here&rsquo;s an example configuration:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">network</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">wifis</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">wlan0</span>:  <span style="color:#75715e"># Replace with your interface name</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dhcp4</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">access-points</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;YourWiFiSSID&#34;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">password</span>: <span style="color:#ae81ff">YourWiFiPassword</span>
</span></span></code></pre></div><ul>
<li>make sure you copy the spaces and tabs correctly</li>
</ul>
<h3 id="4-apply-the-configuration">4. Apply the Configuration:</h3>
<ul>
<li>Save and close the file (<code>Ctrl+O</code>, <code>Enter</code>, and <code>Ctrl+X</code> in <code>nano</code>).</li>
<li>Apply the new configuration:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo netplan apply
</span></span></code></pre></div><h3 id="5-test-the-connection">5. Test the Connection:</h3>
<ul>
<li>Check if you are connected to Wi-Fi:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ip a
</span></span></code></pre></div><ul>
<li>Look for an IP address under your wireless interface.</li>
</ul>
<h2 id="starting-the-ssh-server">Starting the SSH server</h2>
<p>we will start the ssh server to remotely access the raspberry pi</p>
<h3 id="enable-the-ssh-server">Enable the SSH server</h3>
<p>You have two options but if you did as i said in the installation the ssh server should be already installed</p>
<h4 id="while-flashing-a-fresh-os-image">While flashing a fresh OS image</h4>
<ol>
<li>Follow the instructions in the [[Running ROS on Raspberry Pi#7. Finalize and Install]] guide.</li>
<li>During the <strong>OS Customisation</strong> step, navigate to the <strong>Services</strong> tab.</li>
<li>Tick the checkbox to <strong>Enable SSH</strong>.</li>
<li>Select <strong>password authentication</strong> to log in using the same username and password you use while physically using your Raspberry Pi. Select <strong>Allow public-key authentication only</strong> to <a href="https://www.raspberrypi.com/documentation/computers/remote-access.html#configure-ssh-without-a-password">configure an SSH key</a> for passwordless login.</li>
</ol>
<ul>
<li><strong>Note</strong>: I didn&rsquo;t understand the passwordless login so</li>
</ul>
<h4 id="from-the-terminal">From the terminal</h4>
<ol>
<li>Enter <code>sudo raspi-config</code> in a terminal window.</li>
<li>Select <code>Interfacing Options</code>.</li>
<li>Navigate to and select <code>SSH</code>.</li>
<li>Choose <code>Yes</code>.</li>
<li>Select <code>Ok</code>.</li>
<li>Choose <code>Finish</code>.</li>
</ol>
<p>&ldquo;Airbox-E798&rdquo;:
password: HH65Cm6U
192.168.1.60</p>
<p>sudo apt install python3-rpi.gpio
sudo apt install python3-venv
python3 -m venv venv
source venv/bin/activate</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
